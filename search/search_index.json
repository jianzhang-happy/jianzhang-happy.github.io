{"config":{"lang":["en","ja"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u4f60\u597d","text":"<p>\u8fd9\u91cc\u662f\u5f20\u5065\u7684\u4e2a\u4eba\u7f51\u7ad9 https://jianzhang-happy.github.io</p> <ul> <li>\u901a\u8fc7\u4e3b\u9898\u548c\u76ee\u5f55\u4ee5\u6253\u5f00\u6587\u7ae0</li> <li>PC\u7aef \u5728\u4e0a\u65b9\u6807\u7b7e\u680f\u9009\u62e9\u4e3b\u9898 \u5728\u5de6\u4fa7\u76ee\u5f55\u9009\u62e9\u6587\u7ae0</li> <li>\u79fb\u52a8\u7aef \u70b9\u51fb\u5de6\u4e0a\u89d2\u56fe\u6807\u9009\u62e9\u4e3b\u9898\u548c\u6587\u7ae0</li> <li>\u641c\u7d22\u5173\u952e\u8bcd\u4ee5\u6253\u5f00\u6587\u7ae0</li> </ul>"},{"location":"%E7%A0%94%E7%A9%B6/","title":"\u7814\u7a76","text":"<p>\u70b9\u51fb\u5de6\u4fa7\u76ee\u5f55\u6253\u5f00\u6587\u7ae0</p>"},{"location":"%E7%AC%94%E8%AE%B0/","title":"\u7b14\u8bb0","text":"<p>\u70b9\u51fb\u5de6\u4fa7\u76ee\u5f55\u6253\u5f00\u6587\u7ae0</p>"},{"location":"%E7%AC%94%E8%AE%B0/Python/Python%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/","title":"Python\u5e38\u7528\u6280\u5de7","text":"<ul> <li>Python\u5e38\u7528\u6280\u5de7<ul> <li>time\u548ctimeit\u8ba1\u65f6</li> <li>pandas\u4e2drolling().apply()\u52a0\u901f</li> </ul> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/Python/Python%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/#timetimeit","title":"<code>time</code>\u548c<code>timeit</code>\u8ba1\u65f6","text":"<ul> <li> <p><code>time</code>\u548c<code>timeit</code>\u8ba1\u65f6\u7684\u533a\u522b\u5728\u4e8e\u524d\u8005\u53ea\u8fd4\u56de\u4e00\u6b21\u8fd0\u884c\u4ee3\u7801\u7684\u65f6\u95f4\uff0c\u540e\u8005\u8fd4\u56de\u591a\u6b21\u8fd0\u884c\u7684\u65f6\u95f4\u7684\u5747\u503c\u548c\u6807\u51c6\u5dee</p> </li> <li> <p>\u5728<code>jupyter</code>\u4e2d\u53ef\u4ee5\u4f7f\u7528<code>%time</code>\u548c<code>%timeit</code>\u5bf9\u5f53\u524d\u884c\u8fd0\u884c\u7684\u4ee3\u7801\u8ba1\u65f6\uff0c\u7528<code>%%time</code>\u548c<code>%%timeit</code>\u5bf9\u5f53\u524d\u5355\u5143\u8ba1\u65f6</p> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/Python/Python%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/#pandasrollingapply","title":"pandas\u4e2drolling().apply()\u52a0\u901f","text":"<ul> <li>\u5bf9\u4e8epandas\u5185\u7f6e\u7684rolling().mean()\u3001rolling().std()\u7b49\u65b9\u6cd5\uff0c\u5185\u7f6e\u51fd\u6570\u901f\u5ea6\u5f88\u5feb</li> <li>\u5982\u679c\u8981\u8fd0\u7528rolling().apply(<code>func</code>)\uff0c\u5f53\u6570\u636e\u91cf\u8f83\u5927\u7684\u65f6\u5019\u6700\u597d\u91c7\u7528<code>numpy</code>\u8fdb\u884c\u8fd0\u7b97</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/Python/Python%E6%98%93%E7%8A%AF%E9%94%99%E8%AF%AF/","title":"Python\u6613\u72af\u9519\u8bef","text":"<ul> <li>Python\u6613\u72af\u9519\u8bef<ul> <li>\u5217\u8868<ul> <li>\u5217\u8868\u4e58\u6cd5</li> </ul> </li> <li>\u5185\u5b58/\u6307\u9488\u76f8\u5173<ul> <li>\u53d8\u91cf\u5185\u5b58</li> </ul> </li> <li>pandas\u76f8\u5173<ul> <li>SettingWithCopyWarning\u7684\u89e3\u51b3\u529e\u6cd5</li> </ul> </li> </ul> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/Python/Python%E6%98%93%E7%8A%AF%E9%94%99%E8%AF%AF/#_1","title":"\u5217\u8868","text":""},{"location":"%E7%AC%94%E8%AE%B0/Python/Python%E6%98%93%E7%8A%AF%E9%94%99%E8%AF%AF/#_2","title":"\u5217\u8868\u4e58\u6cd5","text":"<ul> <li>\u5217\u8868\u4e58\u6cd5\u5f97\u5230\u7684\u65b0\u5217\u8868\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u6307\u5411\u540c\u4e00\u4e2a\u5730\u5740\uff0c\u56e0\u6b64\u5982\u679c\u4fee\u6539\u4e00\u4e2a\u7d22\u5f15\u7684\u5143\u7d20\u4f1a\u5f15\u8d77\u5176\u4ed6\u5143\u7d20\u4e5f\u76f8\u5e94\u6539\u53d8\u3002\u800c\u5217\u8868\u8868\u8fbe\u5f0f\u7684\u5404\u4e2a\u5143\u7d20\u5219\u90fd\u662f\u5bf9\u5e94\u4e0d\u540c\u5730\u5740\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\u5982\u679c\u5217\u8868\u8868\u8fbe\u5f0f\u4e2d\u5143\u7d20\u662f\u6570\u5b57/\u5b57\u7b26\uff08\u4e32\uff09\uff0c\u5219\u6bcf\u4e2a\u5143\u7d20\u4e5f\u5bf9\u5e94\u76f8\u540c\u5730\u5740\u3002==\u5c3d\u91cf\u7528\u5217\u8868\u8868\u8fbe\u5f0f\uff01==</li> </ul> <pre><code>a = [[0]] * 2\nid(a[0]) == id(a[1]) # True\n\na = [[0] for _ in range(2)]\nid(a[0]) == id(a[1]) # False\n\na = ['abc' for _ in range(2)]\nid(a[0]) == id(a[1]) # True\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/Python/Python%E6%98%93%E7%8A%AF%E9%94%99%E8%AF%AF/#_3","title":"\u5185\u5b58/\u6307\u9488\u76f8\u5173","text":""},{"location":"%E7%AC%94%E8%AE%B0/Python/Python%E6%98%93%E7%8A%AF%E9%94%99%E8%AF%AF/#_4","title":"\u53d8\u91cf\u5185\u5b58","text":"<ul> <li>python\u5728\u505a\u8fd0\u7b97\u65f6\u4f1a\u5728\u5185\u5b58\u4e2d\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61\uff0c\u56e0\u6b64\u5982\u679c\u8981\u5bf9\u5bf9\u8c61\u505a\u539f\u4f4d\u8fd0\u7b97\uff0c\u53ef\u4ee5\u4f7f\u7528\u8bf8\u5982+=,[:]\u4e4b\u7c7b\u7684\u64cd\u4f5c\u3002\u793a\u4f8b\u5982\u4e0b\uff1a</li> </ul> <pre><code># id(Y)\u6539\u53d8\nY = X + Y\n# id(Y)\u4e0d\u53d8\nY[:] = X + Y\nY += X\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/Python/Python%E6%98%93%E7%8A%AF%E9%94%99%E8%AF%AF/#pandas","title":"pandas\u76f8\u5173","text":""},{"location":"%E7%AC%94%E8%AE%B0/Python/Python%E6%98%93%E7%8A%AF%E9%94%99%E8%AF%AF/#settingwithcopywarning","title":"<code>SettingWithCopyWarning</code>\u7684\u89e3\u51b3\u529e\u6cd5","text":"<ul> <li>\u8b66\u544a\u8be6\u7ec6\u5185\u5bb9\u4e3a\uff1aSettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead\u3002\u51fa\u73b0\u8fd9\u4e2a\u8b66\u544a\u8bf4\u660e\u4f7f\u7528\u4e86==\u94fe\u5f0f\u7d22\u5f15\u8d4b\u503c==\uff0c\u56e0\u4e3a\u94fe\u5f0f\u7d22\u5f15\u65e0\u6cd5\u786e\u5b9a\u7d22\u5f15\u5f97\u5230\u7684\u6570\u636e\u662f\u5426\u662f\u539f\u59cb\u6570\u636e\u7684\u590d\u5236\uff0c\u56e0\u6b64\u539f\u59cb\u6570\u636e\u53ef\u80fd\u5e76\u6ca1\u6709\u6b63\u786e\u8d4b\u503c\u3002</li> <li>\u89e3\u51b3\u529e\u6cd5\uff1a\u6240\u6709\u8d4b\u503c\u64cd\u4f5c\u90fd\u901a\u8fc7<code>.loc[index]</code>\u8fdb\u884c\uff0c\u53ef\u4ee5\u5148\u5c06index\u6c42\u51fa\u6765\u3002</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/Python/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/","title":"Python\u9762\u5411\u5bf9\u8c61","text":"<ul> <li>Python\u9762\u5411\u5bf9\u8c61<ul> <li>\u7c7b<ul> <li>class\u7684__init__\u548c__call__\u533a\u522b</li> <li>class\u7684__dict__\u5c5e\u6027</li> </ul> </li> </ul> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/Python/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#_1","title":"\u7c7b","text":""},{"location":"%E7%AC%94%E8%AE%B0/Python/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#class__init____call__","title":"class\u7684<code>__init__</code>\u548c<code>__call__</code>\u533a\u522b","text":"<ul> <li>\u867d\u7136\u5f62\u5f0f\u4e0a\u770b<code>__init__</code>\u548c<code>__call__</code>\u90fd\u662f\u76f4\u63a5\u62ec\u53f7\u8c03\u7528\uff0c\u4f46\u662f==python\u7684\u7c7b\u5fc5\u987b\u5148\u5b9e\u4f8b\u5316\u624d\u80fd\u6267\u884c<code>__call__</code>==\uff0c\u4e5f\u5c31\u662f<code>__call__</code>\u53ea\u80fd\u7531\u7c7b\u5b9e\u4f8b\u5bf9\u8c61\u8c03\u7528\uff0c<code>__init__</code>\u901a\u8fc7\u7c7b\u540d\u5bf9\u8c61\u8fdb\u884c\u5b9e\u4f8b\u5316\u3002</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/Python/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#class__dict__","title":"class\u7684<code>__dict__</code>\u5c5e\u6027","text":"<ul> <li> <p>python\u7c7b\u7684<code>__dict__</code>\u4ee5\u5b57\u5178\u5f62\u5f0f\u4fdd\u5b58\u7c7b\u7684\u5c5e\u6027\uff0c\u53ef\u4ee5\u901a\u8fc7\u6b64\u5c5e\u6027\u4fee\u6539\u7c7b\u53d8\u91cf\u7684\u503c</p> </li> <li> <p>\u4e00\u79cd\u5e38\u7528\u7684\u65b9\u5f0f\u5c06\u5b57\u5178\u8f6c\u6362\u6210\u7c7b\u7684\u5c5e\u6027\u7684\u65b9\u5f0f\uff1a</p> </li> </ul> <pre><code>class Config:\n    def __init__(self, entries: dict = {}):\n        for k, v in entries.items():\n            if isinstance(v, dict):\n                self.__dict__[k] = Config(v)\n            else:\n                self.__dict__[k] = v\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/Python/list/","title":"list","text":"<ul> <li>list<ul> <li>\u65b9\u6cd5<ul> <li>sort</li> </ul> </li> </ul> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/Python/list/#_1","title":"\u65b9\u6cd5","text":""},{"location":"%E7%AC%94%E8%AE%B0/Python/list/#sort","title":"sort","text":"<ul> <li> <p><code>sort(key=None, reverse=False)</code>\u65b9\u6cd5\u5bf9\u5217\u8868\u6309\u7167\u5148\u4ece\u7b2c\u4e00\u4e2a\u7ef4\u5ea6\u6392\u5e8f\uff0c\u518d\u5bf9\u7b2c\u4e00\u4e2a\u7ef4\u5ea6\u76f8\u540c\u7684\u5143\u7d20\u6309\u7b2c\u4e8c\u4e2a\u7ef4\u5ea6\u6392\u5e8f\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff1bsort\u65b9\u6cd5\u6267\u884c==\u539f\u5730\u6392\u5e8f==\uff1bsort\u65b9\u6cd5\u9ed8\u8ba4\u6309\u5347\u5e8f\u6392\u5217</p> </li> <li> <p><code>key</code>\u53c2\u6570\u6307\u5b9a\u6bcf\u4e2a\u7ef4\u5ea6\u7528\u4e8e\u5347\u5e8f\u6392\u5217\u7684\u5224\u65ad\u6807\u51c6\u51fd\u6570</p> </li> <li> <p>\u793a\u4f8b\uff1a</p> </li> </ul> <pre><code>a = [[1,2], [1,3], [0,1],[0,2]]\na.sort()\nprint(a) # [[0, 1], [0, 2], [1, 2], [1, 3]]\na.sort(key=lambda x: (-x[0], x[1]))\nprint(a) # [[1, 2], [1, 3], [0, 1], [0, 2]]\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/Python/numpy%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/","title":"numpy\u5e38\u7528\u51fd\u6570","text":"<ul> <li>numpy\u5e38\u7528\u51fd\u6570<ul> <li>\u672a\u5206\u7c7b<ul> <li>np.rint</li> </ul> </li> </ul> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/Python/numpy%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/#_1","title":"\u672a\u5206\u7c7b","text":""},{"location":"%E7%AC%94%E8%AE%B0/Python/numpy%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/#nprint","title":"np.rint","text":"<ul> <li> <p>\u529f\u80fd\uff1a\u5c06\u77e9\u9635\u5143\u7d20\u8f6c\u6362\u4e3a\u6700\u63a5\u8fd1\u7684\u6574\u6570</p> </li> <li> <p>\u8c03\u7528\u65b9\u5f0f\uff1a</p> </li> </ul> <pre><code>numpy.rint(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj]) = &lt;ufunc 'rint'&gt;\n</code></pre> <ul> <li>\u53c2\u6570\uff1a</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/Python/numpy%E6%95%B0%E7%BB%84%E7%B4%A2%E5%BC%95/","title":"<code>numpy</code>\u6570\u7ec4\u7d22\u5f15","text":"<ul> <li>numpy\u6570\u7ec4\u7d22\u5f15<ul> <li>\u5e03\u5c14\u503c\u77e9\u9635\u7d22\u5f15</li> </ul> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/Python/numpy%E6%95%B0%E7%BB%84%E7%B4%A2%E5%BC%95/#_1","title":"\u5e03\u5c14\u503c\u77e9\u9635\u7d22\u5f15","text":"<p>\u5047\u5b9a\u4e00\u4e2a\u77e9\u9635\u7684\u5f62\u72b6\u4e3a\\([N0, N1, N2, ...]\\)\uff0c\u90a3\u4e48\u5e03\u5c14\u503c\u7d22\u5f15\u77e9\u9635\u7684\u5f62\u72b6\u5fc5\u987b\u4e3a\u88ab\u7d22\u5f15\u77e9\u9635\u7684\u524dx\u4e2a\u7ef4\u5ea6\uff0c\u5373\u5982\u679c\u5e03\u5c14\u503c\u7d22\u5f15\u77e9\u9635\u4e3a1\u7ef4\u77e9\u9635\uff0c\u5219\u5176\u5f62\u72b6\u5fc5\u987b\u4e3a\\([N 0]\\)\uff0c\u5982\u679c\u5e03\u5c14\u503c\u7d22\u5f15\u77e9\u9635\u4e3a2\u7ef4\u77e9\u9635\uff0c\u5219\u5176\u5f62\u72b6\u5fc5\u987b\u4e3a\\([N 0,N 1]\\)\uff0c...</p> <p>\u793a\u4f8b\uff1a</p>"},{"location":"%E7%AC%94%E8%AE%B0/Python/pandas/","title":"Pandas","text":"<ul> <li>Pandas<ul> <li>\u5e38\u7528\u51fd\u6570/\u65b9\u6cd5<ul> <li>pd.melt</li> <li>df.eval\u6216pd.eval</li> </ul> </li> </ul> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/Python/pandas/#_1","title":"\u5e38\u7528\u51fd\u6570/\u65b9\u6cd5","text":""},{"location":"%E7%AC%94%E8%AE%B0/Python/pandas/#pdmelt","title":"<code>pd.melt</code>","text":"<ul> <li>\u529f\u80fd\uff1a\u5bf9\u539f\u59cb<code>dataframe</code>\u8fdb\u884c\u9006\u900f\u89c6\uff08<code>unpivot</code>\uff09</li> <li>\u7528\u6cd5\uff1a<code>pandas.melt(frame, id_vars=None, value_vars=None, var_name=None, value_name='value', col_level=None, ignore_index=True)</code></li> <li>\u53c2\u6570\uff1a</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/Python/pandas/#dfevalpdeval","title":"df.eval\u6216pd.eval","text":"<ul> <li> <p>\u529f\u80fd\uff1a\u5bf9dataframe\u7684\u5217\u6267\u884c\u4e00\u4e9b\u7b97\u6570\u64cd\u4f5c\uff0c\u4f8b\u5982\u4e24\u5217\u4e4b\u95f4\u7684\u52a0\u51cf\u4e58\u9664\u7b49</p> </li> <li> <p>\u8c03\u7528\uff1a<code>DataFrame.eval(expr, *, inplace=False, **kwargs)</code></p> </li> <li> <p>\u793a\u4f8b\uff1a</p> </li> </ul> <pre><code>df = pd.DataFrame({'A': range(1, 6), 'B': range(10, 0, -2)})\ndf.eval('A + B')\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/Python/pandas%E9%80%8F%E8%A7%86%E8%A1%A8%E5%92%8Creshape/","title":"pandas\u900f\u89c6\u8868\u548creshape","text":"<ul> <li>pandas\u900f\u89c6\u8868\u548creshape<ul> <li>pivot()\u548cpivot_table()<ul> <li>pivot()</li> <li>pivot_table()</li> </ul> </li> <li>melt()\u548cwide_to_long()<ul> <li>melt()</li> </ul> </li> </ul> </li> </ul> <p>\u672c\u6587\u603b\u7ed3\u4e86pandas\u5bf9Series/DataFrame\u6539\u53d8\u5f62\u72b6\u7684\u65b9\u6cd5\uff08\u603b\u7ed3\u81eapandas\u5b98\u65b9\u6587\u6863\uff09\u3002</p>"},{"location":"%E7%AC%94%E8%AE%B0/Python/pandas%E9%80%8F%E8%A7%86%E8%A1%A8%E5%92%8Creshape/#pivotpivot_table","title":"pivot()\u548cpivot_table()","text":""},{"location":"%E7%AC%94%E8%AE%B0/Python/pandas%E9%80%8F%E8%A7%86%E8%A1%A8%E5%92%8Creshape/#pivot","title":"pivot()","text":"<ul> <li> <p>\u529f\u80fd\uff1a\u5c06DataFrame\u6309\u7167\u6307\u5b9a\u7684index\u3001columns\u548cvalues\u8fdb\u884c\u91cd\u6784</p> </li> <li> <p>\u7528\u6cd5\uff1a<code>pandas.pivot(data, *, columns, index=_NoDefault.no_default, values=_NoDefault.no_default)</code></p> </li> <li>\u53c2\u6570\uff1a</li> <li>data: DataFrame\uff1bDataFrame\u6570\u636e\u5bf9\u8c61</li> <li>columns\uff1astr / [str1,str2...] / object; \u9700\u8981\u5f97\u5230\u7684DataFrame\u5305\u542b\u7684\u5217</li> <li>index: str / [str1,str2...] / object (\u53ef\u9009\u53c2\u6570);  \u65b0\u7684DataFrame\u7684index\u5bf9\u5e94\u7684\u5217\uff0c\u5982\u679c\u672a\u6307\u5b9a\u5219\u4f7f\u7528\u539f\u59cbindex</li> <li>values\uff1astr / [str1,str2...] / object (\u53ef\u9009\u53c2\u6570); \u65b0\u7684DataFrame\u7684\u503c\uff0c\u5982\u679c\u672a\u6307\u5b9a\u5219\u4f7f\u7528\u5269\u4f59\u7684\u5217</li> <li>\u8bf4\u660e\uff1a</li> <li>\u5bf9\u5e94\u65b9\u6cd5\u4e3a<code>df.pivot()</code></li> <li>\u53d8\u6362\u793a\u4f8b\u56fe\uff1a</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/Python/pandas%E9%80%8F%E8%A7%86%E8%A1%A8%E5%92%8Creshape/#pivot_table","title":"pivot_table()","text":""},{"location":"%E7%AC%94%E8%AE%B0/Python/pandas%E9%80%8F%E8%A7%86%E8%A1%A8%E5%92%8Creshape/#meltwide_to_long","title":"melt()\u548cwide_to_long()","text":""},{"location":"%E7%AC%94%E8%AE%B0/Python/pandas%E9%80%8F%E8%A7%86%E8%A1%A8%E5%92%8Creshape/#melt","title":"melt()","text":"<ul> <li>\u529f\u80fd\uff1a\u5c06DataFrame\u6307\u5b9a\u7684\u5217\u505a\u4e3a\u6307\u793a\u53d8\u91cf\uff0c\u5176\u4ed6\u5217\u538b\u7f29\u6210\u4e24\u5217\uff0c\u4e00\u5217\u8868\u793a\u53d8\u91cf\u540d\uff0c\u53e6\u4e00\u5217\u4f5c\u4e3a\u503c</li> <li>\u7528\u6cd5\uff1a<code>pandas.melt(frame, id_vars=None, value_vars=None, var_name=None, value_name='value', col_level=None, ignore_index=True)</code></li> <li>\u53c2\u6570\uff1a</li> <li>id_vars: tuple, list, ndarray (\u53ef\u9009\u53c2\u6570)\uff1b\u4f5c\u4e3a\u6307\u793a\u53d8\u91cf\u7684\u5217</li> <li>value_vars: tuple, list, ndarray (\u53ef\u9009\u53c2\u6570)\uff1b\u6307\u5b9a\u8981\u628a\u54ea\u4e9b\u5217\u7528\u4e8e\u9006\u900f\u89c6\u8868\uff0c\u5982\u679c\u672a\u6307\u5b9a\u5219\u628a\u5269\u4f59\u6240\u6709\u5217\u505a\u9006\u900f\u89c6\u8868\u64cd\u4f5c</li> <li>var_name: scalar\uff1b \u6307\u5b9a\u53d8\u91cf\u540d\u5217\u7684\u540d\u79f0</li> <li>value_name: scalar, \u9ed8\u8ba4\u4e3a'value'\uff1b\u6307\u5b9a\u503c\u5217\u7684\u540d\u79f0</li> <li>col_level\uff1aint\uff0cstr\uff08\u53ef\u9009\u53c2\u6570\uff09\uff1bindex\u4e3aMultiIndex\u4f7f\u7528</li> <li> <p>ignore_index: bool,\u9ed8\u8ba4\u4e3aTrue\uff1b\u662f\u5426\u4f7f\u7528\u539f\u59cb\u7684index id</p> </li> <li> <p>\u8bf4\u660e\uff1a</p> </li> <li>\u5bf9\u5e94\u65b9\u6cd5\u4e3a\uff1a<code>df.melt()</code></li> <li>\u53d8\u6362\u793a\u610f\u56fe\uff1a</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/Pytorch%E5%88%9D%E5%A7%8B%E5%8C%96/","title":"Pytorch\u521d\u59cb\u5316","text":"<ul> <li>Pytorch\u521d\u59cb\u5316<ul> <li>\u5747\u5300xavier\u521d\u59cb\u5316</li> </ul> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/Pytorch%E5%88%9D%E5%A7%8B%E5%8C%96/#xavier","title":"\u5747\u5300xavier\u521d\u59cb\u5316","text":"<ul> <li>\u5bf9\u8f93\u5165\u5f20\u91cf\u6267\u884c\u5747\u5300xavier\u521d\u59cb\u5316</li> <li>\u7528\u6cd5\uff1atorch.nn.init.xavier_uniform_(tensor, gain=1.0)</li> <li>\u5e38\u89c1\u7528\u6cd5\uff1a</li> <li>\u5bf9\u67d0\u4e00\u4e2aLayer\u7684\u53c2\u6570\u6267\u884c\u521d\u59cb\u5316</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/Pytorch%E5%9F%BA%E7%A1%80/","title":"Pytorch\u57fa\u7840","text":"<ul> <li>Pytorch\u57fa\u7840<ul> <li>\u5e38\u7528\u51fd\u6570/\u65b9\u6cd5<ul> <li>squeeze\u548cunsqueeze</li> <li>arange</li> <li>normal</li> <li>torch.triu</li> <li>Tensor.masked_fill_</li> </ul> </li> <li>\u5176\u4ed6<ul> <li>None\u7528\u4e8etensor\u7d22\u5f15</li> </ul> </li> </ul> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/Pytorch%E5%9F%BA%E7%A1%80/#_1","title":"\u5e38\u7528\u51fd\u6570/\u65b9\u6cd5","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/Pytorch%E5%9F%BA%E7%A1%80/#squeezeunsqueeze","title":"squeeze\u548cunsqueeze","text":"<ul> <li>squeeze\u7528\u4e8e\u5c06tensor\u4e2d\u957f\u5ea6\u4e3a1\u7684\u7ef4\u5ea6\u5220\u53bb\uff1bunsqueeze\u7528\u4e8e\u5c06tensor\u6269\u5145\u4e00\u4e2a\u957f\u5ea6\u4e3a1\u7684\u7ef4\u5ea6</li> <li>\u7528\u6cd5\uff1a</li> <li><code>torch.squeeze(input, dim=None)</code>: torch.squeeze(input)\u5c06input\u4e2d\u6240\u6709\u957f\u5ea6\u4e3a1\u7684\u7ef4\u5ea6\u53bb\u6389\uff0ctorch.squeeze(input,dim)\uff0c\u5982\u679cdim\u6240\u5728\u7ef4\u5ea6\u7684\u957f\u5ea6\u4e3a1\uff0c\u5219\u53bb\u6389dim\u7ef4\u5ea6\uff0c\u5426\u5219\u4e0d\u505a\u6539\u53d8\u3002</li> <li><code>Tensor.squeeze(dim=None)</code></li> <li><code>torch.unsqueeze(input, dim)</code>\uff1a\u5728dim\u7ef4\u5ea6\u4e0a\u589e\u52a0\u4e00\u4e2a\u957f\u5ea6\u4e3a1\u7684\u7ef4\u5ea6</li> <li><code>Tensor.unsqueeze(dim)</code></li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/Pytorch%E5%9F%BA%E7%A1%80/#arange","title":"arange","text":"<ul> <li>\u7c7b\u4f3c\u4e8e<code>np.arange</code>,\u8fd4\u56de\u4e00\u4e2a\u4e00\u7ef4\u5f20\u91cf</li> <li>\u7528\u6cd5\uff1a</li> <li>torch.arange(start=0, end, step=1, *, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) \u2192 Tensor</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/Pytorch%E5%9F%BA%E7%A1%80/#normal","title":"normal","text":"<ul> <li>\u4ea7\u751f\u6b63\u6001\u5206\u5e03\u968f\u673a\u6570\u5f20\u91cf</li> <li>\u7528\u6cd5\uff1a</li> <li>torch.arange(start=0, end, step=1, , out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False*) \u2192 Tensor</li> <li>\u4e5f\u53ef\u4ee5\u6307\u5b9a\u5f62\u72b6\u53c2\u6570size\uff1atorch.normal(mean, std, size, , out=None*) \u2192 Tensor </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/Pytorch%E5%9F%BA%E7%A1%80/#torchtriu","title":"torch.triu","text":"<ul> <li>\u529f\u80fd\uff1a\u5bf9\u77e9\u9635\u7684\u6700\u540e\u4e24\u4e2a\u7ef4\u5ea6\u53d6\u5176\u4e0a\u4e09\u89d2\u77e9\u9635\uff0c\u5176\u4e2d<code>diagonal</code>\u53c2\u6570\u63a7\u5236\u5bf9\u89d2\u7ebf\u7684\u4f4d\u7f6e\uff08\u4e3b\u5bf9\u89d2\u7ebf\u7531\u6570\u503c\u66f4\u5c0f\u7684\u7ef4\u5ea6\u51b3\u5b9a\uff09\uff0c\u6b64\u53c2\u6570\u53ea\u80fd\u4e3a\u6574\u6570\uff0c\u5f53\u4e3a0\u65f6\u8868\u793a\u53d6\u5305\u62ec\u4e3b\u5bf9\u89d2\u7ebf\u4ee5\u4e0a\u5143\u7d20\uff0c\u4e3a1\u8868\u793a\u4e0d\u5305\u62ec\u4e3b\u5bf9\u89d2\u7ebf\uff0c\u4e3a-1\u8868\u793a\u53d6\u4e3b\u5bf9\u89d2\u7ebf\u518d\u5f80\u5de6\u4e0b\u4e00\u884c\u5bf9\u89d2\u7ebf\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002</li> <li>\u8c03\u7528\uff1a<code>torch.triu(input, diagonal=0, *, out=None)</code></li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/Pytorch%E5%9F%BA%E7%A1%80/#tensormasked_fill_","title":"Tensor.masked_fill_","text":"<ul> <li>\u529f\u80fd\uff1a\u5c06\u77e9\u9635\u4e2d\u6307\u5b9a\u4f4d\u7f6e\u586b\u5145\u6307\u5b9a\u503cvalue\uff0c==\u5f53mask\u77e9\u9635\u7ef4\u5ea6\u4e0d\u8db3\u65f6\uff0c\u5c06\u8fd0\u7528\u5e7f\u64ad\u673a\u5236==</li> <li>\u8c03\u7528\uff1a<code>Tensor.masked_fill_(mask, value)</code></li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/Pytorch%E5%9F%BA%E7%A1%80/#_2","title":"\u5176\u4ed6","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/Pytorch%E5%9F%BA%E7%A1%80/#nonetensor","title":"None\u7528\u4e8etensor\u7d22\u5f15","text":"<p>None\u51fa\u73b0\u5728\u7d22\u5f15\u4e2d\u7b49\u4ef7\u4e8e\u5728None\u6240\u5728\u7ef4\u5ea6\u5c06tensor\u589e\u52a0\u4e00\u4e2a\u7ef4\u5ea6\uff0c<code>tensor[None, :]</code>\u6307\u5728\u7b2c0\u4e2a\u7ef4\u5ea6\u5c06\u5f20\u91cf\u6269\u5c55\u4e00\u4e2a\u7ef4\u5ea6\u3002</p>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/Pytorch%E5%B8%B8%E7%94%A8Layer/","title":"Pytorch\u5e38\u7528Layer","text":"<ul> <li>Pytorch\u5e38\u7528Layer<ul> <li>nn.linear\u7c7b</li> </ul> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/Pytorch%E5%B8%B8%E7%94%A8Layer/#nnlinear","title":"nn.linear\u7c7b","text":"<ul> <li>\u5bf9\u8f93\u5165\u77e9\u9635\u7684==\u6700\u540e\u4e00\u4e2a\u7ef4\u5ea6==\u8fdb\u884c\u7ebf\u6027\u53d8\u5316</li> <li>\u7528\u6cd5\uff1atorch.nn.Linear(in_features, out_features, bias=True, device=None, dtype=None)</li> <li>\u53c2\u6570\u89e3\u91ca\uff1a</li> <li>in_features\uff1a\u8f93\u5165\u7ef4\u5ea6</li> <li>out_features\uff1a\u8f93\u51fa\u7ef4\u5ea6</li> <li>bias\uff1a\u662f\u5426\u52a0\u504f\u7f6e</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/Pytorch%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96/","title":"Pytorch\u6570\u636e\u8bfb\u53d6","text":"<ul> <li>Pytorch\u6570\u636e\u8bfb\u53d6<ul> <li>torch.utils.data<ul> <li>DataLoader\u7c7b</li> <li>Dataset\u7c7b</li> <li>IterableDataset\u7c7b</li> <li>TensorDataset\u7c7b</li> <li>StackDataset\u7c7b</li> <li>ConcatDataset\u7c7b</li> <li>ChainDataset\u7c7b</li> <li>Subset\u7c7b</li> <li></li> </ul> </li> </ul> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/Pytorch%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96/#torchutilsdata","title":"torch.utils.data","text":"<p>\u603b\u7ed3\u81eatorch\u5b98\u65b9\u6587\u6863</p>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/Pytorch%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96/#dataloader","title":"DataLoader\u7c7b","text":"<ul> <li> <p>\u58f0\u660e\uff1atorch.utils.data.DataLoader(dataset, batch_size=1, shuffle=None, sampler=None, batch_sampler=None, num_workers=0, collate_fn=None, pin_memory=False, drop_last=False, timeout=0, worker_init_fn=None, multiprocessing_context=None, generator=None, , prefetch_factor=None, persistent_workers=False, pin_memory_device=''*)</p> </li> <li> <p>\u53c2\u6570\u89e3\u91ca\uff1a</p> </li> <li>dataset\uff1atorch.utils.data.dataset\u7c7b\u578b\u5bf9\u8c61</li> <li>drop_last\uff1a\u5982\u679cbatch_size\u4e0d\u80fd\u6574\u9664\u6570\u636e\u96c6\u957f\u5ea6\uff0c\u6b64\u65f6\u6700\u540e\u4e00\u4e2abatch\u5927\u5c0f\u4f1a\u4e0d\u8db3\u4e00\u4e2abatch_size\u5927\u5c0f\uff0cdrop_last\u4e3a\u771f\u65f6\u5c06\u4f1a\u5220\u53bb\u8fd9\u4e2abatch\u3002</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/Pytorch%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96/#dataset","title":"Dataset\u7c7b","text":"<ul> <li> <p>Dataset\u57fa\u7c7b\uff0c\u5b9e\u9645\u9879\u76ee\u4e2d\u5f80\u5f80\u9700\u8981\u4ee5\u6b64\u7c7b\u4e3a\u7236\u7c7b\u5efa\u7acb\u5b50\u7c7b\uff0c\u5b50\u7c7b\u5fc5\u987b\u91cd\u8f7d<code>__getitem__</code>\u548c<code>__len__</code>\u8fd9\u4e24\u4e2a\u51fd\u6570\u3002</p> </li> <li> <p>\u58f0\u660e\uff1atorch.utils.data.Dataset(args, *kwds)</p> </li> <li>\u91cd\u8f7d\u7684<code>__getitem__</code>\u51fd\u6570\u5f62\u5f0f\u4e3a<code>def __getitem__(self, index)</code>,\u5176\u4e2dindex\u53c2\u6570\u8868\u793a\u7d22\u5f15\uff0c\u6b64\u51fd\u6570\u8fd4\u56de\u5bf9\u5e94\u7d22\u5f15\u5bf9\u5e94\u7684\u6570\u636e\uff08\u5305\u62ec\u8f93\u5165\u3001\u8f93\u51fa\u7b49\uff09\uff1b\u91cd\u8f7d\u7684<code>__len__</code>\u51fd\u6570\u5f62\u5f0f\u4e3a<code>def __len__(self)</code>,\u8fd4\u56de\u6570\u636e\u96c6\u7684\u957f\u5ea6\u3002</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/Pytorch%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96/#iterabledataset","title":"IterableDataset\u7c7b","text":"<ul> <li>\u58f0\u660e\uff1atorch.utils.data.IterableDataset(args, *kwds)</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/Pytorch%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96/#tensordataset","title":"TensorDataset\u7c7b","text":"<ul> <li>\u58f0\u660e\uff1atorch.utils.data.TensorDataset(*tensors)</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/Pytorch%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96/#stackdataset","title":"StackDataset\u7c7b","text":"<ul> <li>\u58f0\u660e\uff1atorch.utils.data.StackDataset(args, *kwargs)</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/Pytorch%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96/#concatdataset","title":"ConcatDataset\u7c7b","text":"<ul> <li>\u58f0\u660e\uff1atorch.utils.data.ConcatDataset(datasets)</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/Pytorch%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96/#chaindataset","title":"ChainDataset\u7c7b","text":"<ul> <li>\u58f0\u660e\uff1atorch.utils.data.ChainDataset(datasets)</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/Pytorch%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96/#subset","title":"Subset\u7c7b","text":"<ul> <li>\u58f0\u660e\uff1atorch.utils.data.Subset(dataset, indices)</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/Pytorch%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96/#_1","title":"Pytorch\u6570\u636e\u8bfb\u53d6","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/torch.nn/","title":"torch.nn","text":"<ul> <li>torch.nn<ul> <li>\u5377\u79ef\u5c42\uff08Convolution Layers\uff09<ul> <li>\u4e0d\u540c\u7ef4\u5ea6\u5377\u79ef\u5c42\u6bd4\u8f83</li> </ul> </li> <li>\u6c47\u805a\u5c42\uff08Pooling layers\uff09<ul> <li>\u4e0d\u540c\u7ef4\u5ea6\u6c47\u805a\u5c42\u6bd4\u8f83</li> </ul> </li> <li>\u5faa\u73af\u5c42<ul> <li>nn.LSTM</li> </ul> </li> <li>\u635f\u5931\u51fd\u6570<ul> <li>\u6982\u8ff0</li> <li>nn.CrossEntropy</li> </ul> </li> <li>- \u6982\u8ff0\uff1a\u5e38\u89c1\u8c03\u7528\u65b9\u5f0floss=nn.CrossEntropyLoss(reduction='None')\uff0creduction\u53c2\u6570\u9ed8\u8ba4\u4e3amean\uff0c\u53ef\u9009mean\u3001none\u3001sum\uff1b\u8f93\u5165\u662f\u6982\u7387(\u5373softmax\u8f93\u51fa\u7684\u6982\u7387)\u6216\u8005\u6ca1\u6709\u7ecf\u8fc7softmax\u8f6c\u6362\u7684'\u6982\u7387'\uff0c\u76ee\u6807\u65e2\u53ef\u4ee5\u4e3a\u6982\u7387\uff0c\u4e5f\u53ef\u4ee5\u662f[0, n)\u4e4b\u95f4\u7684\u7c7b\u522b\u6807\u53f7\u3002==\u5176\u4e2d\u91c7\u7528\u7c7b\u522b\u6807\u53f7\u8ba1\u7b97\u4f1a\u5f97\u5230\u4f18\u5316==</li> <li>\u5f52\u4e00\u5316\u5c42<ul> <li>\u6982\u8ff0</li> <li>nn.BatchNorm1d</li> <li>nn.BatchNorm2d</li> <li>nn.LayerNorm</li> </ul> </li> <li>dropout\u5c42<ul> <li>nn.Dropout</li> </ul> </li> </ul> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/torch.nn/#convolution-layers","title":"\u5377\u79ef\u5c42\uff08Convolution Layers\uff09","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/torch.nn/#_1","title":"\u4e0d\u540c\u7ef4\u5ea6\u5377\u79ef\u5c42\u6bd4\u8f83","text":"<ul> <li> <p>nn.Conv1d\u548cnn.Conv2d\u7684\u8f93\u5165\u53c2\u6570\u57fa\u672c\u90fd\u4e00\u6837\uff0c\u57fa\u672c\u5305\u62ec\u8f93\u5165\u901a\u9053\u6570<code>in_channels</code>\uff0c\u8f93\u51fa\u901a\u9053\u6570<code>out_channels</code>\uff0c\u5377\u79ef\u6838\u5927\u5c0f<code>kernel_size</code>\uff0c\u6b65\u5e45<code>stride</code>\uff0c\u586b\u5145<code>padding</code>\uff0c\u81a8\u80c0<code>dilation</code>\u3002\u53c2\u6570\u542b\u4e49\u5982\u4e0b\uff1a</p> </li> <li> <p><code>in_channels</code>\uff1a\u8f93\u5165\u901a\u9053\u6570\u76ee</p> </li> <li> <p><code>out_channels</code>\uff1a\u8f93\u51fa\u901a\u9053\u6570\u76ee</p> </li> <li> <p><code>kernel_size</code>\uff1a\u5377\u79ef\u6838\u5927\u5c0f</p> </li> <li> <p><code>stride</code>\uff1a\u6b65\u5e45\u5927\u5c0f</p> </li> <li> <p><code>padding</code>\uff1a\u586b\u5145\u6570\u76ee\uff1b<code>padding</code>\u53c2\u6570\u652f\u6301\u6574\u6570\u3001\u5143\u7ec4\u548c\u5b57\u7b26\u4e32\u8f93\u5165\uff0c\u5176\u4e2d\u5b57\u7b26\u4e32\u8f93\u5165\u6709<code>valid</code>\u548c<code>same</code>\u4e24\u79cd\u9009\u9879\uff0c<code>valid</code>\u8868\u793a\u65e0\u586b\u5145\uff0c<code>same</code>\u8868\u793a\u586b\u5145\u5230\u548c\u8f93\u5165\u5f62\u72b6\u76f8\u540c\uff0c==\u9700\u8981\u6ce8\u610f\u7684\u662f\u91c7\u7528\u5b57\u7b26\u4e32\u8f93\u5165\u65f6\u4e0d\u652f\u6301<code>stride</code>\u4e0d\u7b49\u4e8e1==\u3002</p> </li> <li> <p><code>dilation</code>\uff1a\u5377\u79ef\u6838\u4e2d\u7528\u4e8e\u8ba1\u7b97\u7684\u5143\u7d20\u4e4b\u95f4\u7684\u95f4\u9694\uff0c\u9ed8\u8ba4\u95f4\u9694\u4e3a1\uff08\u4e5f\u5c31\u662f\u6240\u6709\u5143\u7d20\u90fd\u53c2\u4e0e\u8fd0\u7b97\uff09</p> </li> <li> <p><code>groups</code>\uff1a\u63a7\u5236\u8f93\u5165\u8f93\u51fa\u7684\u8054\u7cfb\uff0c<code>groups=1</code>\u8868\u793a\u6bcf\u4e2a\u8f93\u5165\u901a\u9053\u90fd\u5c06\u7528\u4e8e\u8ba1\u7b97\u8f93\u51fa\uff1b<code>groups=2</code>\u8868\u793a\u4e00\u534a\u7684\u8f93\u5165\u901a\u9053\u7528\u4e8e\u8ba1\u7b97\u4e00\u534a\u7684\u8f93\u51fa\u901a\u9053\uff0c\u53e6\u4e00\u534a\u8f93\u5165\u901a\u9053\u8ba1\u7b97\u53e6\u4e00\u534a\u8f93\u51fa\u901a\u9053\uff1b</p> </li> <li> <p><code>bias</code>\uff1a\u662f\u5426\u6dfb\u52a0bias</p> </li> <li> <p><code>padding_mode</code>\uff1a\u586b\u5145\u65b9\u5f0f\uff1a<code>'zeros'</code>, <code>'reflect'</code>, <code>'replicate'</code> ,<code>'circular'</code>, \u9ed8\u8ba4 `'zeros'</p> </li> <li> <p><code>device</code>\uff1a\u6570\u636e\u5b58\u50a8\u88c5\u7f6e</p> </li> <li> <p><code>dtype</code>\uff1a\u6570\u636e\u7c7b\u578b</p> </li> <li> <p>\u4e00\u7ef4\u5377\u79ef(<code>nn.Conv1d</code>)\u548c\u4e8c\u7ef4\u5377\u79ef(<code>nn.Conv2d</code>)\u7684\u533a\u522b\uff1a</p> </li> <li> <p>\u4e00\u7ef4\u5377\u79ef<code>kernel_size</code>\u5f62\u72b6\u4e3a\\(1 \\times kernel_{size}\\)\uff0c\u4e8c\u7ef4\u5377\u79ef\u6838\u5927\u5c0f\u4e3a\\(kernel_{size} \\times kernel_{size}\\)\u6216\u8005\\(kernel_{size}[0] \\times kernel_{size}[1]\\)\uff1b\u4f53\u73b0\u5230\u53c2\u6570\u4e0a\u4e00\u7ef4\u5377\u79ef<code>kernel_size</code>\u53ea\u80fd\u4e3a\u6574\u6570/\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684tuple\uff1b</p> </li> <li> <p>\u4e00\u7ef4\u5377\u79ef\u7684<code>stride</code>\u53c2\u6570\u540c\u6837\u4e5f\u53ea\u80fd\u4e3a\u6574\u6570/\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684tuple\uff1b</p> </li> <li> <p>\u4e00\u7ef4\u5377\u79ef<code>padding</code>\u8868\u793a\u5de6\u53f3\u5206\u522b\u586b\u5145\u7684\u957f\u5ea6\uff0c\u4e8c\u7ef4\u5377\u79ef\u5219\u8868\u793a<code>(H,W)</code>\u8fd9\u4e24\u4e2a\u7ef4\u5ea6\u5206\u522b\u586b\u5145\u7684\u7ef4\u5ea6</p> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/torch.nn/#pooling-layers","title":"\u6c47\u805a\u5c42\uff08Pooling layers\uff09","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/torch.nn/#_2","title":"\u4e0d\u540c\u7ef4\u5ea6\u6c47\u805a\u5c42\u6bd4\u8f83","text":"<ul> <li> <p>\u6700\u5927\u6c47\u805a\u5c42\uff1a\u4e00\u7ef4\u6700\u5927\u6c47\u805a\u5c42\u548c\u4e8c\u7ef4\u6700\u5927\u6c47\u805a\u5c42\u53c2\u6570\u76f8\u540c\uff0c\u5305\u62ec\uff1a</p> </li> <li> <p><code>kernel_size</code>\uff0c<code>stride</code>\uff0c<code>padding</code>\uff0c<code>dilation</code>\uff1a\u5bf9\u4e8e\u4e00\u7ef4\uff0c\u53ea\u80fd\u4e3a\u6574\u6570\u6216\u8005\u5305\u542b\u4e00\u4e2a\u6574\u6570\u7684tuple\uff1b\u5bf9\u4e8e\u4e8c\u7ef4\uff0c\u53ef\u4ee5\u4e3a\u6574\u6570\u6216\u8005\u5305\u542b\u4e24\u4e2a\u6574\u6570\u7684tuple</p> </li> <li> <p><code>return_indices</code>\uff1a\u9664\u4e86\u8fd4\u56de\u6700\u5927\u503c\uff0c\u8fd8\u4f1a\u8fd4\u56de\u6700\u5927\u503c\u5bf9\u5e94index</p> </li> <li> <p><code>ceil_mode</code>\uff1a\u5c06\u4f1a\u4f7f\u7528ceil\u800c\u4e0d\u662ffloor\u8ba1\u7b97\u8f93\u51fa\u5f62\u72b6</p> </li> <li> <p>\u5e73\u5747\u6c47\u805a\u5c42\uff1a\u4e8c\u7ef4\u5e73\u5747\u6c47\u805a\u5c42\u6bd4\u4e00\u7ef4\u5e73\u5747\u6c47\u805a\u5c42\u591a\u4e00\u4e2a<code>divisor_override</code>\u53c2\u6570\uff0c\u76f8\u540c\u53c2\u6570\u5982\u4e0b\uff1a</p> </li> <li><code>kernel_size</code>\uff0c<code>stride</code>\uff0c<code>padding</code>\uff1a\u5bf9\u4e8e\u4e00\u7ef4\uff0c\u53ea\u80fd\u4e3a\u6574\u6570\u6216\u8005\u5305\u542b\u4e00\u4e2a\u6574\u6570\u7684tuple\uff1b\u5bf9\u4e8e\u4e8c\u7ef4\uff0c\u53ef\u4ee5\u4e3a\u6574\u6570\u6216\u8005\u5305\u542b\u4e24\u4e2a\u6574\u6570\u7684tuple\uff1b\u5176\u4e2d<code>padding</code>\u91c7\u75280\u586b\u5145\uff1b</li> <li><code>ceil_mode</code>\uff1a\u5c06\u4f1a\u4f7f\u7528ceil\u800c\u4e0d\u662ffloor\u8ba1\u7b97\u8f93\u51fa\u5f62\u72b6</li> <li><code>count_include_pad</code>\uff1a\u8ba1\u7b97\u5747\u503c\u65f6\u662f\u5426\u7eb3\u5165\u586b\u5145\u76840</li> <li><code>divisor_override</code>\uff1a\u6574\u6570\uff1b\u6307\u5b9a\u7528\u4e8e\u8ba1\u7b97\u5747\u503c\u7684\u5206\u6bcd</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/torch.nn/#_3","title":"\u5faa\u73af\u5c42","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/torch.nn/#nnlstm","title":"nn.LSTM","text":"<ul> <li>\u529f\u80fd\uff1a</li> <li>\u8c03\u7528\uff1a<code>torch.nn.LSTM(self, input_size, hidden_size, num_layers=1, bias=True, batch_first=False, dropout=0.0, bidirectional=False, proj_size=0, device=None, dtype=None)</code></li> <li>\u53c2\u6570\uff1a</li> <li>input_size\uff1a\u8f93\u5165\u5e8f\u5217\u7684\u7279\u5f81\u6570\u76ee</li> <li>hidden_size\uff1a\u9690\u85cf\u5c42\u7279\u5f81\u6570\u76ee</li> <li>num_layers\uff1a\u5faa\u73af\u5c42\u5c42\u6570</li> <li>bias\uff1a\u8ba1\u7b97\u65f6\u662f\u5426\u6dfb\u52a0bias</li> <li>batch_first\uff1a\u8f93\u5165\u548c\u8f93\u51fa\u5e8f\u5217\u7684\u5f62\u72b6\u662f\u5426\u4e3a\\(batch \\times seq \\times feature\\)\uff0c\u9ed8\u8ba4\u4e3a\u5426\uff0c\u5373\u8f93\u5165\u8f93\u51fa\u5e8f\u5217\u5f62\u72b6\u4e3a\\(seq \\times batch \\times feature\\)</li> <li>dropout\uff1a\u5bf9\u4e8e\u591a\u5c42\u5faa\u73af\u5c42\u7f51\u7edc\uff0c\u5982\u679cdropout\u975e\u96f6\uff0c\u90a3\u4e48\u5728\u9664\u6700\u540e\u4e00\u5c42\u8f93\u51fa\u5c42\u4e0a\u6dfb\u52a0\u4e00\u4e2adropout\u5c42\u3002</li> <li>bidirectional\uff1a\u662f\u5426\u662f\u53cc\u5411\u5faa\u73af\u7f51\u7edc\uff0c\u9ed8\u8ba4\u4e3a\u5426</li> <li> <p>proj_size\uff1a</p> </li> <li> <p>\u8f93\u5165\uff1ainput\uff0c(h_0, c_0)</p> </li> <li>input\uff1a\u8f93\u5165\u5927\u5c0f\u4e3a\\(seq \\times feature_{in}\\)\uff08\u6ca1\u6709batch\u65f6\uff09\u6216\u8005\\(seq \\times batch \\times feature_{in}\\)\uff0c\u5982\u679cbatch_first\u53c2\u6570\u4e3aTrue\u7684\u65f6\u5019\uff0c\u8f93\u5165\u5f62\u72b6\u4e3a\\(batch \\times seq \\times feature\\)\u3002</li> <li>h_0\u3001c_0\uff1a\u521d\u59cb\u9690\u85cf\u5355\u5143\u548c\u8bb0\u5fc6\u5355\u5143\uff0c\u5bf9\u4e8e\u5355\u5411\u7f51\u7edc\uff0c\u5f62\u72b6\u4e3a\\(num_{layers} \\times feature_{out}\\)\uff0c\u5bf9\u4e8e\u53cc\u5411\u7f51\u7edc\u5219\u4e3a\\(2 \\times num_{layers} \\times feature_{out}\\)\uff08\u6ca1\u6709batch\u65f6\uff09\uff0c\u5f53\u4e3abatch\u8f93\u5165\u65f6\uff0c\u5219\u5206\u522b\u4e3a\\(num_{layers} \\times batch \\times feature_{out}\\)\u548c\\(2 \\times num_{layers} \\times batch \\times feature_{out}\\)\u3002\u5982\u679c\u6ca1\u6709\u6307\u5b9a\uff0c\u5219h_0\u548cc_0\u9ed8\u8ba4\u90fd\u662f0\u5143\u7d20\u3002</li> <li>\u8f93\u51fa\uff1aoutput\uff0c(h_n, c_n)</li> <li>output\uff1a</li> <li>h_n</li> <li>c_n</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/torch.nn/#_4","title":"\u635f\u5931\u51fd\u6570","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/torch.nn/#_5","title":"\u6982\u8ff0","text":"<p>\u635f\u5931\u51fd\u6570\u7c7b\u90fd\u662fnn.Module\u7684\u5b50\u7c7b\u3002</p>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/torch.nn/#nncrossentropy","title":"nn.CrossEntropy","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/torch.nn/#-lossnncrossentropylossreductionnonereductionmeanmeannonesumsoftmaxsoftmax0-n","title":"- \u6982\u8ff0\uff1a\u5e38\u89c1\u8c03\u7528\u65b9\u5f0f<code>loss=nn.CrossEntropyLoss(reduction='None')</code>\uff0creduction\u53c2\u6570\u9ed8\u8ba4\u4e3amean\uff0c\u53ef\u9009mean\u3001none\u3001sum\uff1b\u8f93\u5165\u662f\u6982\u7387(\u5373softmax\u8f93\u51fa\u7684\u6982\u7387)\u6216\u8005\u6ca1\u6709\u7ecf\u8fc7softmax\u8f6c\u6362\u7684'\u6982\u7387'\uff0c\u76ee\u6807\u65e2\u53ef\u4ee5\u4e3a\u6982\u7387\uff0c\u4e5f\u53ef\u4ee5\u662f[0, n)\u4e4b\u95f4\u7684\u7c7b\u522b\u6807\u53f7\u3002==\u5176\u4e2d\u91c7\u7528\u7c7b\u522b\u6807\u53f7\u8ba1\u7b97\u4f1a\u5f97\u5230\u4f18\u5316==","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/torch.nn/#_6","title":"\u5f52\u4e00\u5316\u5c42","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/torch.nn/#_7","title":"\u6982\u8ff0","text":"<ul> <li>\u5f52\u4e00\u5316\u7684\u539f\u7406\u90fd\u662f\u5bf9\u8f93\u5165\u6570\u636e\u8fdb\u884c\u6807\u51c6\u5316\uff0c\u9075\u5faa\u4ee5\u4e0b\u516c\u5f0f\uff1a</li> </ul> \\[ y = \\frac{x-E[x]}{\\sqrt{Var[x]+\\epsilon}} * \\gamma + \\beta \\] <p>\u4e0d\u540c\u7684\u5f52\u4e00\u5316\u65b9\u5f0f\u5728\u4e8e\u5747\u503c\u548c\u6807\u51c6\u5dee\u7684\u8ba1\u7b97\u65b9\u5f0f\u4e0d\u540c\uff0c\u5bf9\u4e8eLayerNorm\uff0c\u5747\u503c/\u6807\u51c6\u5dee\u4e3a\u5728\u7ed9\u5b9a\u7ef4\u5ea6\u8ba1\u7b97\uff08\u5bf9\u4e8eLayerNorm\uff0c\u6307\u5b9a\u7ef4\u5ea6\u53ea\u80fd\u662f\u6700\u540e\u4e00\u4e2a\u7ef4\u5ea6\uff09\uff0c\u800cBatchNorm\u5219\u4e3a\u5728\u9664\u7ed9\u5b9a\u7ef4\u5ea6\u4e4b\u5916\u7684\u7ef4\u5ea6\u8ba1\u7b97\uff08\u5bf9\u4e8eBatchNorm1d\u548cBatchNorm2d\uff0c\u6307\u5b9a\u7ef4\u5ea6\u53ea\u80fd\u662f\u7b2c\u4e8c\u4e2a\u7ef4\u5ea6\uff09\uff1b</p> <ul> <li>\u793a\u4f8b\uff1a</li> </ul> <pre><code># NLP Example\nbatch, sentence_length, embedding_dim = 4, 2, 3\nembedding = torch.arange(24, dtype=torch.float32).reshape(batch, sentence_length, embedding_dim)\nlayer_norm = nn.LayerNorm(embedding_dim)\na = layer_norm(embedding)\n\nb = (embedding-embedding.mean(dim=(-1),keepdim=True)) / torch.sqrt(embedding.var(dim=(-1),keepdim=True,unbiased=False) + 1e-5)\n# a,b\u7684\u5404\u4e2a\u5143\u7d20\u76f8\u540c\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/torch.nn/#nnbatchnorm1d","title":"nn.BatchNorm1d","text":"<ul> <li>\u529f\u80fd\uff1a\u5bf92\u7ef4\u6216\u80053\u7ef4\u8f93\u5165\u8fdb\u884cBatch\u5f52\u4e00\u5316\uff0c\u5747\u503c/\u65b9\u5dee\u8ba1\u7b97\u5728\u7ed9\u5b9a\u7ef4\u5ea6\u4e4b\u524d\u7684\u7ef4\u5ea6\u8fdb\u884c</li> <li>\u9700\u8981\u6ce8\u610f\u7684\u662f\u5728\u8bad\u7ec3\u548c\u9a8c\u8bc1\u9636\u6bb5BatchNorm\u7684\u884c\u4e3a\u4e0d\u4e00\u6837</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/torch.nn/#nnbatchnorm2d","title":"nn.BatchNorm2d","text":"<ul> <li>\u529f\u80fd\uff1a\u5bf94\u7ef4\u8f93\u5165\u8fdb\u884cBatch\u5f52\u4e00\u5316</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/torch.nn/#nnlayernorm","title":"nn.LayerNorm","text":"<ul> <li>\u529f\u80fd\uff1a\u5bf9\u8f93\u5165\u8fdb\u884cLayer\u5f52\u4e00\u5316\uff0c\u5747\u503c/\u65b9\u5dee\u8ba1\u7b97\u65b9\u5f0f\u5728\u7ed9\u5b9a\u7ef4\u5ea6\u8fdb\u884c</li> <li>\u8c03\u7528\uff1a<code>torch.nn.LayerNorm(normalized_shape, eps=1e-05, elementwise_affine=True, bias=True, device=None, dtype=None)</code></li> <li>\u53c2\u6570\uff1a</li> <li>normalized_shape\uff1aint/str/torch.Size; \u6b64\u53c2\u6570\u53ea\u80fd\u4e3a\u8f93\u5165\u5f62\u72b6\u7684\u540e\u51e0\u4f4d\u6570\u5b57\u7ec4\u6210\u7684\u5143\u7ec4</li> <li>eps\uff1afloat\uff1b \u8ba1\u7b97\u65f6\u5206\u6bcd\u4e2d\u7684\u57fa\u51c6</li> <li>elementwise_affine\uff1abool\uff1b\\(\\gamma\\)\u548c\\(\\beta\\)\u662f\u5426\u53ef\u4ee5\u5b66\u4e60</li> <li>bias\uff1abool\uff1b\u662f\u5426\u5b66\u4e60\u504f\u5dee\\(\\beta\\)</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/torch.nn/#dropout","title":"dropout\u5c42","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/torch.nn/#nndropout","title":"nn.Dropout","text":"<ul> <li>\u529f\u80fd\uff1a\u5bf9\u8f93\u5165\u8fdb\u884cdropout\u64cd\u4f5c\uff1b\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\uff0c\u8f93\u5165\u4f1a\u4e58\u4ee5\u7f29\u653e\u56e0\u5b50\\(\\frac{1}{1-p}\\)\uff0c\u800c\u5728\u9a8c\u8bc1\u9636\u6bb5dropout\u4e0d\u8d77\u4f5c\u7528\uff08\u76f8\u5f53\u4e8e\u4e58\u4ee51\uff09</li> <li>\u8c03\u7528\uff1a<code>torch.nn.Dropout(p=0.5, inplace=False)</code></li> <li>\u53c2\u6570\uff1a</li> <li>p\uff1adropout\u6982\u7387</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/torch.optim/","title":"<code>torch.optim</code>","text":"<ul> <li>torch.optim<ul> <li>\u6982\u8ff0</li> <li>torch.optim.SGD<ul> <li>\u7c7b\u58f0\u660e\uff1a</li> </ul> </li> </ul> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/torch.optim/#_1","title":"\u6982\u8ff0","text":"<p><code>optim</code>\u5b9e\u73b0\u4e86\u591a\u79cd\u4f18\u5316\u5668\uff0c\u5176\u4e2d\u4f18\u5316\u5668\u7684\u6784\u9020\u65b9\u5f0f\u4e3b\u8981\u6709\u4e24\u79cd\uff1a</p> <ul> <li>\u7b2c\u4e00\u79cd\u65b9\u5f0f\u6240\u6709\u53c2\u6570\u7684\u66f4\u65b0\u65b9\u5f0f\u76f8\u540c\uff08\u5373\u5b66\u4e60\u7387\uff0cdecay_rate\u7b49\u76f8\u540c\uff09\uff0c\u6784\u9020\u65b9\u5f0f\u5982\uff1a</li> </ul> <pre><code>optimizer = optim.SGD(model.parameters(), lr=0.01, momentum=0.9)\noptimizer = optim.Adam([var1, var2], lr=0.0001)\n</code></pre> <ul> <li><code>optim</code>\u4e5f\u652f\u6301\u4e0d\u540c\u53c2\u6570\u91c7\u7528\u4e0d\u540c\u7684\u66f4\u65b0\u65b9\u5f0f\uff0c\u8fd9\u79cd\u6784\u9020\u65b9\u5f0f\u4f20\u5165\u5b57\u5178\uff0c\u5176\u4e2d\u5b57\u5178\u4e2d\u672a\u6307\u5b9a\u7684\u53c2\u6570\u5171\u4eab\u5b57\u5178\u4e4b\u5916\u7684\u5173\u952e\u8bcd\u53c2\u6570\uff0c\u5982\uff1a</li> </ul> <pre><code>optim.SGD([\n                {'params': model.base.parameters()},\n                {'params': model.classifier.parameters(), 'lr': 1e-3}\n            ], lr=1e-2, momentum=0.9)\n# classifier.parameters()\u7684\u5b66\u4e60\u7387\u4e3a1e-3,\u5176\u4ed6\u53c2\u6570\u5b66\u4e60\u7387\u4e3a1e-2\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/torch.optim/#torchoptimsgd","title":"<code>torch.optim.SGD</code>","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/torch.optim/#_2","title":"\u7c7b\u58f0\u660e\uff1a","text":"<p><code>torch.optim.SGD(params, lr=&lt;required parameter&gt;, momentum=0, dampening=0, weight_decay=0, nesterov=False, *, maximize=False, foreach=None, differentiable=False)</code></p>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/%E6%A8%A1%E5%9E%8B%E4%BF%9D%E5%AD%98/","title":"\u6a21\u578b\u4fdd\u5b58","text":"<ul> <li>\u6a21\u578b\u4fdd\u5b58<ul> <li>\u57fa\u672c</li> </ul> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/%E6%A8%A1%E5%9E%8B%E4%BF%9D%E5%AD%98/#_2","title":"\u57fa\u672c","text":"<ul> <li><code>pytorch</code>\u53ef\u4ee5\u4fdd\u5b58\u6a21\u578b\u7684\u53c2\u6570\uff0c\u540e\u7eed\u90e8\u7f72\u65f6\u53ef\u4ee5\u5b9e\u4f8b\u5316\u6a21\u578b\u540e\u8bfb\u53d6\u53c2\u6570\uff0c\u793a\u4f8b\uff1a</li> </ul> <pre><code>net = MyNet()\n# \u4fdd\u5b58\ntorch.save(net.state_dict(), 'MyNet')\n# \u52a0\u8f7d\nclone = MyNet() # \u5148\u5b9e\u4f8b\u5316\u4e00\u4e2a\u6a21\u578b\u5b9e\u4f8b\nclone.load_state_dict(torch.load('MyNet'))\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/%E8%87%AA%E5%8A%A8%E6%B1%82%E5%AF%BC/","title":"\u81ea\u52a8\u6c42\u5bfc","text":"<ul> <li>\u81ea\u52a8\u6c42\u5bfc<ul> <li>\u57fa\u7840</li> </ul> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Pytorch/%E8%87%AA%E5%8A%A8%E6%B1%82%E5%AF%BC/#_2","title":"\u57fa\u7840","text":"<ul> <li>\u521b\u5efa\u53ef\u81ea\u52a8\u6c42\u5bfc\u5f20\u91cf\u7684\u65b9\u6cd5\uff1a</li> <li>\u5bf9\u5f20\u91cf\u8c03\u7528<code>requires_grad_(True)</code>\u65b9\u6cd5</li> <li>\u521b\u5efa\u5f20\u91cf\u65f6\u6307\u5b9a\u53c2\u6570<code>requires_grad=True</code></li> <li>\u5bf9\u5f20\u91cf\u7684\u51fd\u6570\u6c42\u5bfc\uff1a\u8c03\u7528<code>backward()</code>\u65b9\u6cd5</li> <li>\u5f20\u91cf\u6e05\u96f6\uff1a\u5bf9\u5f20\u91cf\u7684<code>grad</code>\u5bf9\u8c61\u8c03\u7528<code>zero_()</code>\u65b9\u6cd5\uff0c\u4f8b\uff1a<code>x.grad.zero_()</code></li> <li><code>detach()</code>\u65b9\u6cd5\uff1a\u5c06\u5f20\u91cf\u5265\u79bb\u8ba1\u7b97\u56fe\uff0c\u5373\u5f53\u4f5c\u4e0d\u53ef\u6c42\u5bfc\u53c2\u6570\u4f7f\u7528</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/lightgbm/lightgbm/","title":"lightgbm","text":"<ul> <li>lightgbm<ul> <li>:question:\u76ee\u524d\u6709\u7591\u95ee\u7684\u70b9<ul> <li>\u53ef\u590d\u73b0\u6027\u7684\u95ee\u9898</li> <li>\u8fd0\u884c\u6548\u7387</li> </ul> </li> <li>:one: \u7528\u6cd5baseline</li> <li>:two: \u91cd\u8981\u53c2\u6570</li> <li>:three: \u8c03\u53c2baseline</li> </ul> </li> </ul> <p>\u672c\u6587\u4ecb\u7ecdlightgbm\u7684python API\u7684\u4f7f\u7528</p>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/lightgbm/lightgbm/#question","title":":question:\u76ee\u524d\u6709\u7591\u95ee\u7684\u70b9","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/lightgbm/lightgbm/#_1","title":"\u53ef\u590d\u73b0\u6027\u7684\u95ee\u9898","text":"<p>\u5728\u4e0d\u6307\u5b9alightgbm\u7684seed\u548cdeterministic=True\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\uff0c\u7528\u540c\u6837\u7684\u53c2\u6570\u5728\u76f8\u540c\u7684\u6570\u636e\u96c6\u4e0a\u8bad\u7ec3\u5f97\u5230\u7684\u7ed3\u679c\u662f\u4e00\u6837\u7684\u3002\u76ee\u524d\u770b\u6587\u6863\u8bf4\u7684\u662f\u9700\u8981\u6307\u5b9adeterministic=True\u7684\u60c5\u51b5\u4e0b\u7ed3\u679c\u624d\u662f\u786e\u5b9a\u7684\u3002\u9ed8\u8ba4deterministic=False\u3002\u5373\u4f7fdevice\u4e0d\u540c\uff08cpu\u548cgpu\uff09\uff0c\u7ed3\u679c\u4e5f\u4e00\u6837\u3002</p>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/lightgbm/lightgbm/#_2","title":"\u8fd0\u884c\u6548\u7387","text":"<p>cpu\u76f8\u6bd4gpu\u6548\u7387\u6162\u633a\u591a\u7684\uff0ccuda\u8fd8\u6ca1\u8bd5\u8fc7\u3002</p>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/lightgbm/lightgbm/#one-baseline","title":":one: \u7528\u6cd5baseline","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/lightgbm/lightgbm/#two","title":":two: \u91cd\u8981\u53c2\u6570","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/lightgbm/lightgbm/#three-baseline","title":":three: \u8c03\u53c2baseline","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/lightgbm/lightgbm%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0/","title":"lightgbm\u81ea\u5b9a\u4e49\u635f\u5931\u51fd\u6570","text":"<ul> <li>lightgbm\u81ea\u5b9a\u4e49\u635f\u5931\u51fd\u6570<ul> <li>\u57fa\u672c\u4ecb\u7ecd</li> <li>\u793a\u4f8b</li> </ul> </li> </ul> <p>\u672c\u6587\u4ecb\u7ecdlightgbm\u81ea\u5b9a\u4e49\u635f\u5931\u51fd\u6570\u7684\u65b9\u5f0f\uff0c\u6240\u4f7f\u7528\u7684API\u7248\u672c\u4e3a<code>4.1.0</code>\uff0c\u8fd9\u91cc\u7684\u4ecb\u7ecd\u57fa\u4e8epython API</p>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/lightgbm/lightgbm%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0/#_1","title":"\u57fa\u672c\u4ecb\u7ecd","text":"<ul> <li>lightgbm\u81ea\u5b9a\u4e49\u635f\u5931\u51fd\u6570\u9700\u8981\u5199\u4e24\u4e2a\u51fd\u6570\uff0c\u4e00\u4e2a\u51fd\u6570\u7528\u4e8e\u8bad\u7ec3\uff0c\u6b64\u51fd\u6570\u8f93\u5165\u76ee\u6807\u503c\u548c\u771f\u5b9e\u503c\uff08\u5176\u4e2d\u771f\u5b9e\u503c\u7684\u7c7b\u522b\u662flightgbm\u7684Dataset\u7c7b\uff0c\u9700\u8981\u7528get_label\u65b9\u6cd5\u5f97\u5230\u771f\u5b9e\u503c\u6807\u7b7e\u77e9\u9635\uff09\uff0c\u8fd4\u56de\u635f\u5931\u51fd\u6570\u5173\u4e8e\u76ee\u6807\u503c\u7684\u4e00\u9636\u5bfc\u6570\uff08gradient/grad\uff09\u548c\u4e8c\u9636\u5bfc\u6570\uff08hessian/hess\uff09\uff1b\u7b2c\u4e8c\u4e2a\u51fd\u6570\u8ba1\u7b97\u635f\u5931\u51fd\u6570\u7528\u4e8e\u9a8c\u8bc1\uff0c\u6b64\u51fd\u6570\u540c\u6837\u8f93\u5165\u76ee\u6807\u503c\u548c\u771f\u5b9e\u503c\uff0c\u8fd4\u56de\u503c\u5305\u542b\u4e09\u4e2a\uff0c\u5206\u522b\u662f\u635f\u5931\u540d\u79f0\uff0c\u635f\u5931\u5927\u5c0f\uff0c\u662f\u5426\u671f\u671b\u66f4\u9ad8\u7684\u635f\u5931\uff1b</li> <li>\u7b2c\u4e00\u4e2a\u51fd\u6570\u4f5c\u4e3alightgbm\u7684\u53c2\u6570\"objective\"\u8f93\u5165\uff0c\u7b2c\u4e8c\u4e2a\u51fd\u6570\u4f5c\u4e3atrain\u7684fevl\u53c2\u6570\u8f93\u5165\uff1b</li> <li>\u5bf9\u4e8e\u67d0\u4e9b\u4e0d\u5bb9\u6613\u6c42\u5bfc\u7684\u635f\u5931\u7c7b\u578b\uff0c\u53ef\u4ee5\u501f\u52a9pytorch\u7684\u81ea\u52a8\u6c42\u5bfc\u6765\u5b9e\u73b0\uff1b</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/lightgbm/lightgbm%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0/#_2","title":"\u793a\u4f8b","text":"<ul> <li>\u624b\u52a8\u5b9e\u73b0<code>l2</code>\u635f\u5931\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u5982\u679c\u635f\u5931\u51fd\u6570\u5f62\u5f0f\u4e0a\u662f\u5bf9\u6240\u6709\u5b9e\u4f8b\u7684\u635f\u5931\u8fdb\u884c\u6c42\u548c\u6216\u8005\u6c42\u5747\u503c\uff0c\u5176\u5b9e\u4e24\u8005\u7ed3\u679c\u662f\u4e00\u81f4\u7684\uff0c\u56e0\u4e3a\u4e24\u8005\u7684\u5bfc\u6570\u53ea\u5dee\u4e86\u4e00\u4e2a\u5e38\u6570\u500d\u6570\u5173\u7cfb\u3002</li> </ul> <pre><code>def l2_loss(y, data):\n    t = data.get_label()\n    grad = (y - t) / len(y)\n    hess = np.ones_like(y) / len(y)\n    return grad, hess\n\ndef l2_eval(y, data):\n    t = data.get_label()\n    loss = (y-t)**2\n    return 'l2', loss.mean(), False\n</code></pre> <ul> <li>\u5229\u7528pytorch\u7684\u81ea\u52a8\u6c42\u5bfc\u5b9e\u73b0<code>l2</code>\u635f\u5931</li> </ul> <pre><code>def l2_loss_torch(y, data):\n    t = data.get_label()\n    t = torch.tensor(t).reshape(shape=(len(t),))\n    y = torch.tensor(y, requires_grad=True).reshape(t.shape)\n    loss = ((y - t) ** 2).mean()\n    gradient, = grad(loss, y, create_graph=True)\n    hessian = []\n    for i in range(len(y)):\n        hessian_, = grad(gradient[i], y, retain_graph=True)\n        hessian_ = hessian_[i].item()\n        hessian.append(hessian_)\n    return gradient.detach().numpy(), hessian\n\ndef l2_eval(y, data):\n    t = data.get_label()\n    loss = (y-t)**2\n    return 'l2', loss.mean(), False\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/optuna/lightgbm/","title":"lightgbm","text":"<ul> <li>lightgbm<ul> <li>:o: \u8981\u70b9</li> <li>:one:\u81ea\u5b9a\u4e49\u8c03\u53c2baseline<ul> <li>\u81ea\u5b9a\u4e49\u8c03\u53c2\u4ecb\u7ecd</li> <li>baseline</li> </ul> </li> <li>:two:tuner\u8c03\u53c2<ul> <li>tuner\u8c03\u7528\u4ecb\u7ecd</li> <li>baseline</li> </ul> </li> </ul> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/optuna/lightgbm/#o","title":":o: \u8981\u70b9","text":"<ul> <li>optuna\u4e3alightgbm\u8bbe\u8ba1\u4e86\u4e24\u79cd\u53c2\u6570\u5bfb\u4f18\u65b9\u5f0f\uff1a</li> <li>\u7b2c\u4e00\u79cd\u662f\u57fa\u672c\u7684\u53c2\u6570\u5bfb\u4f18\u65b9\u5f0f\uff0c\u5373\u5b9a\u4e49\u4e00\u4e2aoptuna\u7684objective\u51fd\u6570\u8fdb\u884c\u53c2\u6570\u5bfb\u4f18\uff0c\u5728\u8fd9\u79cd\u65b9\u5f0f\u4e2d==\u53ef\u4ee5\u81ea\u5b9a\u4e49\u9700\u8981\u8c03\u4f18\u7684\u8d85\u53c2\u6570==\u3002<ul> <li>\u8fd9\u79cd\u65b9\u5f0f\u8c03\u53c2\u7684\u4f18\u70b9\u6709\uff1a</li> <li>\u53ef\u4ee5\u5b9a\u5236\u53c2\u6570</li> <li>==\u53ef\u4ee5\u753b\u5404\u79cdoptuna\u652f\u6301\u7684\u53ef\u89c6\u5316\u8c03\u53c2\u8fc7\u7a0b\u56fe\u50cf==</li> <li>:exclamation: \u7ed3\u679c\u53ef\u590d\u5236\u7684\u65b9\u5f0f\uff1a==sampler\u4e2d\u6307\u5b9aseed==\uff0clightgbm\u7684params\u4e2ddeterministic\u53c2\u6570\u6307\u5b9a\u4e3aTrue\uff1b\u53e6\u5916random.seed,np.random.seed()\u6700\u597d\u4e5f\u6307\u5b9a</li> </ul> </li> <li>\u7b2c\u4e8c\u79cd\u662f\u5229\u7528optuna.integration.lightgbm.LightGBMTuner,\u8fd9\u79cd\u65b9\u5f0f\u53ef\u4ee5\u5bf9lightgbm\u7684==7\u4e2a\u8d85\u53c2\u6570==\uff08<code>lambda_l1</code>, <code>lambda_l2</code>, <code>num_leaves</code>, <code>feature_fraction</code>, <code>bagging_fraction</code>, <code>bagging_freq</code>,<code>min_child_samples</code>\uff09\u8fdb\u884c\u53c2\u6570\u5bfb\u4f18\u3002<ul> <li>\u8fd9\u79cd\u65b9\u5f0f\u8c03\u53c2\u4f18\u70b9\u4e3b\u8981\u5c31\u662f\u65b9\u4fbf</li> <li>:exclamation: \u7ed3\u679c\u53ef\u590d\u5236\u7684\u65b9\u5f0f\uff1alightgbm\u7684params\u4e2ddeterministic\u53c2\u6570\u6307\u5b9a\u4e3aTrue\uff0c==\u6307\u5b9aoptuna_seed==\uff1b\u53e6\u5916random.seed,np.random.seed()\u6700\u597d\u4e5f\u6307\u5b9a</li> </ul> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/optuna/lightgbm/#onebaseline","title":":one:\u81ea\u5b9a\u4e49\u8c03\u53c2baseline","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/optuna/lightgbm/#_1","title":"\u81ea\u5b9a\u4e49\u8c03\u53c2\u4ecb\u7ecd","text":"<ul> <li>\u901a\u8fc7\u5b9a\u4e49objective\u5bf9\u8c61\u5e76\u5efa\u7acbstudy\u5373\u53ef\u5229\u7528optuna\u8fdb\u884c\u53c2\u6570\u5bfb\u4f18</li> <li>optuna\u4e3alightgbm\u5b9a\u4e49\u4e86\u4e00\u4e2a<code>optuna.integration.LightGBMPruningCallback</code>\u5bf9\u8c61\u7528\u4e8e\u526a\u679d\uff0c==\u5e76\u8bb0\u5f55\u4e2d\u95f4\u503c\u7528\u4e8e\u8c03\u4f18\u8fc7\u7a0b\u5c55\u793a==</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/optuna/lightgbm/#baseline","title":"baseline","text":"<pre><code>import random\nimport lightgbm as lgb\nimport numpy as np\nimport sklearn.datasets\nimport sklearn.metrics\nfrom sklearn.model_selection import train_test_split\n\nimport optuna\n\nSEED = 42\n\nnp.random.seed(SEED)\nrandom.seed(SEED)\n\ndef objective(trial):\n    data, target = sklearn.datasets.load_breast_cancer(return_X_y=True)\n    train_x, valid_x, train_y, valid_y = train_test_split(data, target, test_size=0.25)\n    dtrain = lgb.Dataset(train_x, label=train_y)\n    dvalid = lgb.Dataset(valid_x, label=valid_y)\n\n    param = {\n        \"objective\": \"binary\",\n        \"metric\": \"auc\",\n        \"verbosity\": -1,\n        \"boosting_type\": \"gbdt\",\n        \"bagging_fraction\": trial.suggest_float(\"bagging_fraction\", 0.4, 1.0),\n        \"bagging_freq\": trial.suggest_int(\"bagging_freq\", 1, 7),\n        \"min_child_samples\": trial.suggest_int(\"min_child_samples\", 5, 100),\n        \"deterministic\": True,\n    }\n\n    # Add a callback for pruning.\n    pruning_callback = optuna.integration.LightGBMPruningCallback(trial, \"auc\")\n    gbm = lgb.train(param, dtrain, valid_sets=[dvalid], callbacks=[pruning_callback])\n\n    preds = gbm.predict(valid_x)\n    pred_labels = np.rint(preds)\n    accuracy = sklearn.metrics.accuracy_score(valid_y, pred_labels)\n    return accuracy\n\n\nstudy = optuna.create_study(\n    direction=\"maximize\",\n    sampler=optuna.samplers.TPESampler(seed=SEED),\n    pruner=optuna.pruners.MedianPruner(n_warmup_steps=10),\n)\nstudy.optimize(objective, n_trials=5, timeout=600)\n\n# You can use Matplotlib instead of Plotly for visualization by simply replacing `optuna.visualization` with\n# `optuna.visualization.matplotlib` in the following examples.\noptuna.visualization.plot_optimization_history(study)\noptuna.visualization.plot_intermediate_values(study)\noptuna.visualization.plot_parallel_coordinate(study)\noptuna.visualization.plot_parallel_coordinate(study, params=[\"bagging_freq\", \"bagging_fraction\"])\noptuna.visualization.plot_contour(study)\noptuna.visualization.plot_contour(study, params=[\"bagging_freq\", \"bagging_fraction\"])\noptuna.visualization.plot_slice(study)\noptuna.visualization.plot_slice(study, params=[\"bagging_freq\", \"bagging_fraction\"])\noptuna.visualization.plot_param_importances(study)\noptuna.visualization.plot_param_importances(\n    study, target=lambda t: t.duration.total_seconds(), target_name=\"duration\"\n)\noptuna.visualization.plot_edf(study)\noptuna.visualization.plot_rank(study)\noptuna.visualization.plot_timeline(study)\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/optuna/lightgbm/#twotuner","title":":two:tuner\u8c03\u53c2","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/optuna/lightgbm/#tuner","title":"tuner\u8c03\u7528\u4ecb\u7ecd","text":"<ul> <li> <p>\u5229\u7528optuna.integration.lightgbm.LightGBMTuner\uff08\u4ee5\u4e0b\u7b80\u79f0LightGBMTuner\uff09\u8fdb\u884c\u53c2\u6570\u5bfb\u4f18\u53ef\u4ee5\u76f4\u63a5\u6309\u7167\u6309\u7167lightgbm\u7684python API\u76f4\u63a5\u8c03\u7528train\u8fdb\u884c\u8c03\u53c2\u5373\u53ef\u3002</p> </li> <li> <p>\u5177\u4f53\u5730\uff0c\u53ea\u9700\u8981\u5c06<code>import lightgbm as lgb</code>\u6539\u4e3a<code>import optuna.integration.lightgbm as lgb</code>\u5373\u53ef\uff0c\u4e4b\u540e\u5c31\u53ef\u4ee5\u8c03\u7528<code>lgb.train</code>\u8fdb\u884c\u53c2\u6570\u5bfb\u4f18\u3002</p> </li> <li> <p>\u8fd9\u91cc\u8c03\u7528\u7684\u5b9e\u9645\u4e0a\u662f<code>optuna.integration.lightgbm.train</code>\uff08\u4ee5\u4e0b\u7b80\u79f0train\uff09\uff0ctrain\u662fLightGBMTuner\u7684\u5c01\u88c5\uff0c\u65e2\u652f\u6301lightgbm\u7684\u53c2\u6570\u8f93\u5165\uff0c\u4e5f\u652f\u6301\u4e00\u4e9boptuna\u81ea\u5b9a\u4e49\u53c2\u6570\u8f93\u5165\u3002</p> </li> <li> <p>LightGBMTuner\u7684\u8f93\u5165\u53c2\u6570\u5982\u4e0b\uff1a</p> </li> </ul> <pre><code>optuna.integration.lightgbm.LightGBMTuner(params, train_set, num_boost_round=1000, valid_sets=None, valid_names=None, feval=None, feature_name='auto', categorical_feature='auto', keep_training_booster=False, callbacks=None, time_budget=None, sample_size=None, study=None, optuna_callbacks=None, model_dir=None, verbosity=None, show_progress_bar=True, *, optuna_seed=None)\n</code></pre> <ul> <li> <p>\u5176\u4e2dparams\u4e0elightgbm\u7684\u53c2\u6570\u4e00\u81f4\uff0c\u6709\u51e0\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u53c2\u6570\uff1a</p> <ul> <li>num_boost_round\uff1anum_boost_round\u5728lightgbm\u4e2d\u9ed8\u8ba4\u4e3a100\uff0coptuna\u4e2d\u6539\u6210\u4e86\u9ed8\u8ba41000</li> <li>optuna_seed\uff1a\u63a7\u5236\u7ed3\u679c\u53ef\u590d\u5236\u6027\u7684\u53c2\u6570\uff0c==\u9700\u8981\u6ce8\u610f\u7684\u662f\uff1a\u8fd9\u4e2a\u53c2\u6570\u9700\u8981\u914d\u5408lightgbm\u7684deterministic\u53c2\u6570\u4e00\u8d77\u4f7f\u7528\uff0c\u56e0\u4e3alightgbm\u9ed8\u8ba4deterministic=False==\u3002</li> </ul> </li> <li> <p>\u6700\u7ec8\u5f97\u5230\u7684\u6a21\u578b\u5373\u4e3a\u8868\u73b0\u6700\u597d\u7684\u8d85\u53c2\u6570\u5bf9\u5e94\u7684\u6a21\u578b\uff0c\u8c03\u7528model.params\u5373\u53ef\u8fd4\u56de\u6700\u597d\u7684\u8d85\u53c2\u6570\uff0c\u8c03\u7528model.best_iteration\u8fd4\u56de\u6700\u4f73\u8fed\u4ee3\u6b21\u6570\u3002</p> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/optuna/lightgbm/#baseline_1","title":"baseline","text":"<pre><code>\"\"\"\nOptuna example that optimizes a classifier configuration for cancer dataset using LightGBM tuner.\nIn this example, we optimize the validation log loss of cancer detection.\n\"\"\"\nimport random\nimport numpy as np\nimport optuna.integration.lightgbm as lgb\n\nfrom lightgbm import early_stopping\nfrom lightgbm import log_evaluation\nimport sklearn.datasets\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\n\nrandom.seed(42)\nnp.random.seed(42)\n\n# \u4e8c\u7c7b\u5206\u7c7b\u95ee\u9898,\u6570\u636e\u96c6\u89c4\u6a21\u4e3a569*30\ndata, target = sklearn.datasets.load_breast_cancer(return_X_y=True)\ntrain_x, val_x, train_y, val_y = train_test_split(data, target, test_size=0.25)\ndtrain = lgb.Dataset(train_x, label=train_y)\ndval = lgb.Dataset(val_x, label=val_y)\n\nparams = {\n    \"objective\": \"binary\",\n    \"metric\": \"binary_logloss\",\n    \"verbosity\": 0,\n    \"boosting_type\": \"gbdt\",\n    \"device\": 'gpu',\n    'deterministic': True,\n}\n\nmodel = lgb.train(\n    params,\n    dtrain,\n    valid_sets=[dtrain, dval],\n    callbacks=[early_stopping(100), log_evaluation(100)],\n    optuna_seed=30,\n)\n\n# \u4e8c\u7c7b\u5206\u7c7b,\u6240\u4ee5\u53ef\u4ee5\u7528np.rint\u5c06\u6982\u7387\u8f6c\u6362\u4e3a\u7c7b\u522b\nprediction = np.rint(model.predict(val_x, num_iteration=model.best_iteration))\naccuracy = accuracy_score(val_y, prediction)\n\nbest_params = model.params\nprint(\"Best params:\", best_params)\nprint(\"  Accuracy = {}\".format(accuracy))\nprint(\"  Params: \")\nfor key, value in best_params.items():\n    print(\"    {}: {}\".format(key, value))\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/optuna/optuna/","title":"optuna","text":"<ul> <li>optuna<ul> <li>optuna\u8d85\u53c2\u6570\u641c\u7d22\u6d41\u7a0b</li> <li>optuna\u4f18\u5316\u65b9\u5f0f</li> <li>optuna\u521b\u5efa\u76ee\u6807\u51fd\u6570</li> <li>study\u5bf9\u8c61<ul> <li>study\u5bf9\u8c61\u4fdd\u5b58\u4e0e\u67e5\u770b</li> </ul> </li> </ul> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/optuna/optuna/#optuna_1","title":"optuna\u8d85\u53c2\u6570\u641c\u7d22\u6d41\u7a0b","text":"<ol> <li>\u5b9a\u4e49\u76ee\u6807\u51fd\u6570</li> <li>\u521b\u5efastudy\u5bf9\u8c61\uff08\u53ef\u4ee5\u5c06study\u5bf9\u8c61\u4fdd\u5b58\u4e3a\u6570\u636e\u5e93\u6587\u4ef6\uff0c\u5176\u4e2d\u4fdd\u5b58\u4e86\u6bcf\u6b21\u5b9e\u9a8c\u7684\u53c2\u6570\u53ca\u76ee\u6807\u503c\u53d8\u5316\u60c5\u51b5\uff1b\u540e\u7eed\u53ef\u4ee5load\u6b64\u5bf9\u8c61\u7528\u4e8e\u753b\u56fe\uff09</li> <li>\u7528study\u5bf9\u8c61\u8c03\u7528optimize\u65b9\u6cd5\u4f18\u5316\u76ee\u6807\u51fd\u6570</li> <li>\u753b\u56fe\u5c55\u793a\u7ed3\u679c\u6216\u8005\u5c06\u7ed3\u679c\u4fdd\u5b58\u4e3a\u8868\u683c</li> </ol>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/optuna/optuna/#optuna_2","title":"optuna\u4f18\u5316\u65b9\u5f0f","text":"<ul> <li> <p>\u53c2\u6570\u8c03\u4f18\u65b9\u5f0f\uff1aoptuna\u652f\u6301\u591a\u79cd\u8d85\u53c2\u6570\u641c\u7d22\u65b9\u5f0f\uff0c\u901a\u8fc7Smpler\u53c2\u6570\u8c03\u6574\u641c\u7d22\u65b9\u5f0f\uff0c\u9ed8\u8ba4\u91c7\u7528TPESampler\uff0coptuna\u5b9e\u73b0\u4ee5\u4e0bSampler\uff1a</p> </li> <li> <p>Grid Search implemented in <code>GridSampler</code></p> </li> <li>Random Search implemented in <code>RandomSampler</code></li> <li>Tree-structured Parzen Estimator algorithm implemented in <code>TPESampler</code></li> <li>CMA-ES based algorithm implemented in <code>CmaEsSampler</code></li> <li>Algorithm to enable partial fixed parameters implemented in <code>PartialFixedSampler</code></li> <li>Nondominated Sorting Genetic Algorithm II implemented in <code>NSGAIISampler</code></li> <li> <p>A Quasi Monte Carlo sampling algorithm implemented in <code>QMCSampler</code></p> </li> <li> <p>\u526a\u679d\uff08pruning\uff09\u7b97\u6cd5\uff1a\u526a\u679d\u7b97\u6cd5\u5728\u8868\u73b0\u4e0d\u597d\u7684\u53c2\u6570\u5b9e\u9a8c\u65f6\u65e9\u505c\uff0coptuna\u9ed8\u8ba4\u91c7\u7528MedianPruner\u3002optuna\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u526a\u679d\uff0c\u56e0\u4e3a\u526a\u679d\u8981\u6c42\u8bb0\u5f55\u4e2d\u95f4\u503c\uff0c\u6240\u4ee5\u53ea\u6709\u5728\u5faa\u73af\u904d\u5386epoch\u7684\u8fc7\u7a0b\u4e2d\u52a0\u5165\u4e2d\u95f4\u503c\u8bb0\u5f55\u4ee5\u53ca\u662f\u5426\u526a\u679d\u8bed\u53e5\u624d\u80fd\u6267\u884c\u526a\u679d\uff0c\u5bf9\u4e8e\u5927\u591a\u6570\u673a\u5668\u5b66\u4e60/\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\uff0coptuna\u5b9e\u73b0\u4e86\u7ee7\u627f\u7684\u526a\u679dcallback\u4ee5\u4fbf\u66f4\u5bb9\u6613\u5b9e\u73b0\u526a\u679d\u3002optuna\u5b9e\u73b0\u7684\u526a\u679d\u7b97\u6cd5\uff1a</p> </li> <li> <p>Median pruning algorithm implemented in <code>MedianPruner</code></p> </li> <li> <p>Non-pruning algorithm implemented in <code>NopPruner</code></p> </li> <li> <p>Algorithm to operate pruner with tolerance implemented in <code>PatientPruner</code></p> </li> <li> <p>Algorithm to prune specified percentile of trials implemented in <code>PercentilePruner</code></p> </li> <li> <p>Asynchronous Successive Halving algorithm implemented in <code>SuccessiveHalvingPruner</code></p> </li> <li> <p>Hyperband algorithm implemented in <code>HyperbandPruner</code></p> </li> <li> <p>Threshold pruning algorithm implemented in <code>ThresholdPruner</code></p> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/optuna/optuna/#optuna_3","title":"optuna\u521b\u5efa\u76ee\u6807\u51fd\u6570","text":"<ul> <li>optuna\u901a\u8fc7\u4f18\u5316\u76ee\u6807\u51fd\u6570\u6765\u6267\u884c\u8d85\u53c2\u6570\u641c\u7d22\uff0c\u76ee\u6807\u51fd\u6570\u6a21\u677f\u5982\u4e0b\uff1a</li> </ul> <pre><code>def objective(trial):\n\n    clf = MLPClassifier(\n        hidden_layer_sizes=tuple([trial.suggest_int('n_units_l{}'.format(i), 32, 64) for i in range(3)]),\n        learning_rate_init=trial.suggest_float('lr_init', 1e-5, 1e-1, log=True),\n    )\n\n    for step in range(100):\n        clf.partial_fit(x_train, y_train, classes=classes)\n        value = clf.score(x_valid, y_valid)  \n\n        # Report intermediate objective value.\n        trial.report(value, step)\n\n        # Handle pruning based on the intermediate value.\n        if trial.should_prune():\n            raise optuna.TrialPruned()  \n\n    return value\n</code></pre> <ul> <li>\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u91cc\u7684\u4e2d\u95f4\u503c\u8bb0\u5f55\u9700\u8981\u5728\u76ee\u6807\u51fd\u6570\u4e2d\u5199\u51faepoch\u7684\u5faa\u73af\u8fc7\u7a0b\uff0c\u5982\u679c\u91c7\u7528<code>keras</code>\u76f4\u63a5\u62df\u5408\u5219\u65e0\u6cd5\u5f97\u5230\u4e2d\u95f4\u503c\uff0c\u5982\u679c\u7528<code>keras</code>\u9700\u8981\u5c55\u793a\u4e2d\u95f4\u503c\u9700\u8981\u7528<code>train_on_epoch</code>\u7b49\u65b9\u6cd5\u3002</li> <li>\u53c2\u6570\u641c\u7d22\u7a7a\u95f4\uff1a</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/optuna/optuna/#study","title":"study\u5bf9\u8c61","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/optuna/optuna/#study_1","title":"study\u5bf9\u8c61\u4fdd\u5b58\u4e0e\u67e5\u770b","text":"<ul> <li>\u5728\u5b9a\u4e49study\u5bf9\u8c61\u65f6\u53ef\u4ee5\u6307\u5b9astudy_name\u548cstorage\u53c2\u6570\uff0cstorage\u53c2\u6570\u6307\u5b9astudy\u5bf9\u8c61\u4fdd\u5b58\u7684\u4f4d\u7f6e\uff0c\u591a\u4e2astudy\u5bf9\u8c61\u53ef\u4ee5\u4fdd\u5b58\u5728\u4e00\u4e2a\u6570\u636e\u5e93\u4e2d\uff0c\u56e0\u6b64\u6700\u597d\u6307\u5b9astudy_name\u65b9\u4fbf\u540e\u7eed\u67e5\u770b\u7ed3\u679c\uff1b</li> <li>storage\u53c2\u6570\u7684\u5730\u5740\u5f80\u5f80\u6307\u5b9a\u4e3a\u76f8\u5bf9\u8def\u5f84\uff0c\u5f62\u5f0f\u4e3a\uff1a<code>sqlite:///+</code>\u76f8\u5bf9\u8def\u5f84\uff0c\u6587\u4ef6\u540d\u9700\u8981\u4ee5sqlite3\u4e3a\u540e\u7f00\uff1b</li> <li>\u4fdd\u5b58\u7684sqlite3\u6587\u4ef6\u53ef\u4ee5\u901a\u8fc7opyuna-dashboard\u7684\u6d4f\u89c8\u5668\u63a5\u53e3\u6253\u5f00\uff0c\u76ee\u524d\u6b64\u63a5\u53e3\u4ec5\u652f\u6301\u90e8\u5206\u56fe\u50cf\u3002</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%90%86%E8%AE%BA/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/","title":"\u4f18\u5316\u7b97\u6cd5","text":"<ul> <li>\u4f18\u5316\u7b97\u6cd5<ul> <li>\u968f\u673a\u68af\u5ea6\u4e0b\u964d\uff08SGD\uff09<ul> <li>SGD\u7684\u7f3a\u70b9</li> </ul> </li> </ul> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%90%86%E8%AE%BA/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/#sgd","title":"\u968f\u673a\u68af\u5ea6\u4e0b\u964d\uff08SGD\uff09","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%90%86%E8%AE%BA/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/#sgd_1","title":"SGD\u7684\u7f3a\u70b9","text":"<ul> <li>\u8fd0\u7b97\u6548\u7387\uff1a\u77e9\u9635\u8fd0\u7b97\u76f8\u6bd4\u5355\u4e2a\u5143\u7d20\u8fd0\u7b97\u66f4\u5feb\uff0c\u56e0\u6b64SGD\u8fd0\u7b97\u901f\u5ea6\u53ef\u80fd\u6bd4\u5bf9\u6574\u4e2a\u6570\u636e\u96c6\u7684\u68af\u5ea6\u4e0b\u964d\u8fd8\u6162</li> <li><code>batch normalization</code>\u7b49\u64cd\u4f5c\u4e0d\u652f\u6301SGD</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%90%86%E8%AE%BA/%E6%9D%83%E9%87%8D%E5%88%9D%E5%A7%8B%E5%8C%96/","title":"\u6743\u91cd\u521d\u59cb\u5316","text":"<ul> <li>\u6743\u91cd\u521d\u59cb\u5316<ul> <li>\u6982\u8ff0</li> <li>\u4e0d\u540c\u521d\u59cb\u5316\u65b9\u5f0f\u4ecb\u7ecd<ul> <li>Xavier\u521d\u59cb\u5316</li> </ul> </li> </ul> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%90%86%E8%AE%BA/%E6%9D%83%E9%87%8D%E5%88%9D%E5%A7%8B%E5%8C%96/#_2","title":"\u6982\u8ff0","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%90%86%E8%AE%BA/%E6%9D%83%E9%87%8D%E5%88%9D%E5%A7%8B%E5%8C%96/#_3","title":"\u4e0d\u540c\u521d\u59cb\u5316\u65b9\u5f0f\u4ecb\u7ecd","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%90%86%E8%AE%BA/%E6%9D%83%E9%87%8D%E5%88%9D%E5%A7%8B%E5%8C%96/#xavier","title":"Xavier\u521d\u59cb\u5316","text":"<ul> <li>\u5047\u5b9a\u6ca1\u6709\u975e\u7ebf\u6027\u7684\u5168\u8fde\u63a5\u5c42\uff0c\u8f93\u51fa\u4e3a\\(o_i\\)\uff0c\u8f93\u5165\u4e3a\\(x_j\\)\uff0c\u8f93\u5165\u7ef4\u5ea6\u4e3a\\(n_{in}\\)\uff0c\u6743\u91cd\u4e3a\\(w_{ij}\\)\uff0c\u6613\u77e5\\(O_i = \\sum_{j=1}^{n_{in}}w_{ij} x_j\\)\uff0c\u8fdb\u4e00\u6b65\u5047\u5b9a\\(w_{ij}\\)\u90fd\u662f\u4ece\u540c\u4e00\u5206\u5e03\u4e2d\u72ec\u7acb\u62bd\u53d6\uff0c\u5747\u503c\u4e3a0\uff0c\u65b9\u5dee\u4e3a\\(\\sigma ^ 2\\)\u3002\u540c\u65f6\u5047\u5b9a\\(x_j\\)\u5747\u503c\u4e5f\u4e3a0\uff0c\u65b9\u5dee\u4e3a\\(\\gamma ^2\\)\uff0c\u4e14\u4e0e\\(w_{ij}\\)\u76f8\u4e92\u72ec\u7acb\u3002\u5219\u53ef\u5f97\\(o_i\\)\u7684\u5747\u503c\u548c\u65b9\u5dee\u5206\u522b\u4e3a\uff1a     $$     \\begin{aligned}         E[o_i] &amp; = \\sum_{j=1}^{n_\\mathrm{in}} E[w_{ij} x_j] \\         &amp;= \\sum_{j=1}^{n_\\mathrm{in}} E[w_{ij}] E[x_j] \\         &amp;= 0, \\         \\mathrm{Var}[o_i] &amp; = E[o_i^2] - (E[o_i])^2 \\             &amp; = \\sum_{j=1}^{n_\\mathrm{in}} E[w^2_{ij} x^2_j] - 0 \\             &amp; = \\sum_{j=1}^{n_\\mathrm{in}} E[w^2_{ij}] E[x^2_j] \\             &amp; = n_\\mathrm{in} \\sigma^2 \\gamma^2.     \\end{aligned}     $$     \u56e0\u6b64\u82e5\u8981\u7ecf\u8fc7\u53d8\u6362\u4e4b\u540e\u5206\u5e03\u7684\u65b9\u5dee\u4e0d\u53d8\uff0c\u5219\u9700\u8981\u6ee1\u8db3\\(n_{in} \\gamma ^ 2 = 1\\)</li> <li>\u73b0\u5728\u8003\u8651\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\uff0c\u53ea\u6709\u5f53\\(n_{out} \\sigma ^ 2 = 1\\)\u65f6\uff0c\u68af\u5ea6\u7684\u65b9\u5dee\u624d\u4e0d\u4f1a\u8fdb\u4e00\u6b65\u589e\u5927\u3002\u4f46\u662f\u6211\u4eec\u65e0\u6cd5\u540c\u65f6\u6ee1\u8db3\u4e24\u4e2a\u6761\u4ef6\uff0cXavier\u521d\u59cb\u5316\u91c7\u53d6\u4e86\u4e00\u4e2a\u6298\u4e2d\u65b9\u6848\uff1a\u521d\u59cb\u5316\u6743\u91cd\u65b9\u5dee\u4e3a\\(\\sigma^2 = \\frac{2}{n_{in} + n_{out}}\\)\u3002\u4e00\u822c\u91c7\u7528\u9ad8\u65af\u5206\u5e03\u6216\u8005\u5747\u5300\u5206\u5e03\uff0c\u5176\u4e2d\u5747\u5300\u5206\u5e03\u503c\u57df\u4e3a\\(U(-\\sqrt{\\frac{6}{n_{in} + n_{out}}}, \\sqrt{\\frac{6}{n_{in} + n_{out}}})\\)</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%90%86%E8%AE%BA/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/","title":"\u7ebf\u6027\u56de\u5f52","text":"<ul> <li>\u7ebf\u6027\u56de\u5f52<ul> <li>\u5206\u6790\u89e3</li> <li>\u7ebf\u6027\u56de\u5f52\u548c\u9ad8\u65af\u5206\u5e03</li> </ul> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%90%86%E8%AE%BA/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/#_2","title":"\u5206\u6790\u89e3","text":"<p>Unlike most of the models that we will cover,</p> <p>linear regression presents us with</p> <p>a surprisingly easy optimization problem.</p> <p>In particular, we can find the optimal parameters</p> <p>(as assessed on the training data)</p> <p>analytically by applying a simple formula as follows.</p> <p>First, we can subsume the bias \\(b\\) into the parameter \\(\\mathbf{w}\\)</p> <p>by appending a column to the design matrix consisting of all 1s.</p> <p>Then our prediction problem is to minimize \\(\\|\\mathbf{y} - \\mathbf{X}\\mathbf{w}\\|^2\\).</p> <p>As long as the design matrix \\(\\mathbf{X}\\) has full rank</p> <p>(no feature is linearly dependent on the others),</p> <p>then there will be just one critical point on the loss surface</p> <p>and it corresponds to the minimum of the loss over the entire domain.</p> <p>Taking the derivative of the loss with respect to \\(\\mathbf{w}\\)</p> <p>and setting it equal to zero yields:</p> <p>$$\\begin{aligned}</p> <p>\\partial_{\\mathbf{w}} |\\mathbf{y} - \\mathbf{X}\\mathbf{w}|^2 =</p> <p>2 \\mathbf{X}^\\top (\\mathbf{X} \\mathbf{w} - \\mathbf{y}) = 0</p> <p>\\textrm{ and hence }</p> <p>\\mathbf{X}^\\top \\mathbf{y} = \\mathbf{X}^\\top \\mathbf{X} \\mathbf{w}.</p> <p>\\end{aligned}$$</p> <p>Solving for \\(\\mathbf{w}\\) provides us with the optimal solution</p> <p>for the optimization problem.</p> <p>Note that this solution </p> \\[\\mathbf{w}^* = (\\mathbf X^\\top \\mathbf X)^{-1}\\mathbf X^\\top \\mathbf{y}\\] <p>will only be unique</p> <p>when the matrix \\(\\mathbf X^\\top \\mathbf X\\) is invertible,</p> <p>i.e., when the columns of the design matrix</p> <p>are linearly independent :cite:<code>Golub.Van-Loan.1996</code>.</p>"},{"location":"%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%90%86%E8%AE%BA/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/#_3","title":"\u7ebf\u6027\u56de\u5f52\u548c\u9ad8\u65af\u5206\u5e03","text":"<p>One way to motivate linear regression with squared loss</p> <p>is to assume that observations arise from noisy measurements,</p> <p>where the noise \\(\\epsilon\\) follows the normal distribution </p> <p>\\(\\mathcal{N}(0, \\sigma^2)\\):</p> \\[y = \\mathbf{w}^\\top \\mathbf{x} + b + \\epsilon \\textrm{ where } \\epsilon \\sim \\mathcal{N}(0, \\sigma^2).\\] <p>Thus, we can now write out the *likelihood*</p> <p>of seeing a particular \\(y\\) for a given \\(\\mathbf{x}\\) via</p> \\[P(y \\mid \\mathbf{x}) = \\frac{1}{\\sqrt{2 \\pi \\sigma^2}} \\exp\\left(-\\frac{1}{2 \\sigma^2} (y - \\mathbf{w}^\\top \\mathbf{x} - b)^2\\right).\\] <p>As such, the likelihood factorizes.</p> <p>According to *the principle of maximum likelihood*,</p> <p>the best values of parameters \\(\\mathbf{w}\\) and \\(b\\) are those</p> <p>that maximize the *likelihood* of the entire dataset:</p> \\[P(\\mathbf y \\mid \\mathbf X) = \\prod_{i=1}^{n} p(y^{(i)} \\mid \\mathbf{x}^{(i)}).\\] <p>The equality follows since all pairs \\((\\mathbf{x}^{(i)}, y^{(i)})\\)</p> <p>were drawn independently of each other.</p> <p>Estimators chosen according to the principle of maximum likelihood</p> <p>are called *maximum likelihood estimators*.</p> <p>While, maximizing the product of many exponential functions,</p> <p>might look difficult,</p> <p>we can simplify things significantly, without changing the objective,</p> <p>by maximizing the logarithm of the likelihood instead.</p> <p>For historical reasons, optimizations are more often expressed</p> <p>as minimization rather than maximization.</p> <p>So, without changing anything,</p> <p>we can *minimize the negative log-likelihood*,</p> <p>which we can express as follows:</p> \\[-\\log P(\\mathbf y \\mid \\mathbf X) = \\sum_{i=1}^n \\frac{1}{2} \\log(2 \\pi \\sigma^2) + \\frac{1}{2 \\sigma^2} \\left(y^{(i)} - \\mathbf{w}^\\top \\mathbf{x}^{(i)} - b\\right)^2.\\] <p>If we assume that \\(\\sigma\\) is fixed,</p> <p>we can ignore the first term,</p> <p>because it does not depend on \\(\\mathbf{w}\\) or \\(b\\).</p> <p>The second term is identical</p> <p>to the squared error loss introduced earlier,</p> <p>except for the multiplicative constant \\(\\frac{1}{\\sigma^2}\\).</p> <p>Fortunately, the solution does not depend on \\(\\sigma\\) either.</p> <p>It follows that minimizing the mean squared error</p> <p>is equivalent to the maximum likelihood estimation</p> <p>of a linear model under the assumption of additive Gaussian noise.</p>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/Brain_Teaser/","title":"Brain Teaser","text":"<ul> <li>Brain Teaser<ul> <li>\u62c6\u5206\u95ee\u9898<ul> <li>\u8d2a\u5a6a\u7684\u6d77\u76d7</li> <li>\u8001\u864e\u548c\u7f8a</li> </ul> </li> <li>\u903b\u8f91\u63a8\u7406<ul> <li>\u8fc7\u6865\u95ee\u9898</li> <li>\u751f\u65e5\u95ee\u9898</li> <li>\u5361\u724c\u6e38\u620f</li> <li>\u70e7\u7ef3\u5b50</li> <li>\u4e0d\u540c\u7684\u7403</li> <li>\u672b\u5c3e0\u7684\u4e2a\u6570</li> <li>\u8d5b\u9a6c</li> <li>\u65e0\u9650\u5e8f\u5217</li> </ul> </li> <li>\u8df3\u51fa\u601d\u7ef4\u5b9a\u52bf<ul> <li>\u88c5\u957f\u6761</li> <li>\u7528\u9ab0\u5b50\u7ec4\u6210\u65e5\u671f</li> <li>\u600e\u4e48\u95ee\u53ea\u8bb2\u771f\u8bdd\u548c\u53ea\u8bb2\u5047\u8bdd\u7684\u4eba\u4e00\u4e2a\u95ee\u9898</li> <li>\u4fe1\u4ef6\u4e0a\u9501\u95ee\u9898</li> <li>\u6700\u540e\u4e00\u4e2a\u7403\u7684\u989c\u8272</li> <li>\u5224\u65ad\u706f\u7684\u5f00\u5173\u662f\u54ea\u4e00\u4e2a</li> <li>\u8ba1\u7b978\u4e2a\u4eba\u85aa\u8d44\u7684\u85aa\u6c34\u5747\u503c</li> </ul> </li> <li>\u5e94\u7528\u5bf9\u79f0<ul> <li>\u600e\u4e48\u5206\u4e00\u5806\u786c\u5e01\u4f7f\u5f97\u4e24\u5806\u4eba\u8138\u671d\u4e0a\u4e00\u9762\u7684\u6570\u76ee\u76f8\u540c</li> <li>\u600e\u4e48\u62bd\u53d6\u6700\u5c0f\u6b21\u6570\u786e\u5b9a\u4e09\u4e2a\u5b8c\u5168\u8d34\u9519\u6807\u7b7e\u7684\u5305</li> </ul> </li> <li>\u6a21\u8fd0\u7b97<ul> <li>\u53d8\u8272\u9f99</li> </ul> </li> </ul> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/Brain_Teaser/#_1","title":"\u62c6\u5206\u95ee\u9898","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/Brain_Teaser/#_2","title":"\u8d2a\u5a6a\u7684\u6d77\u76d7","text":"<p>5\u4e2a\u6d77\u76d7\u5206100\u4e2a\u91d1\u5e01\uff1a\u7531\u7b49\u7ea7\u6700\u9ad8\u7684\u6d77\u76d7\u63d0\u51fa\u4e00\u4e2a\u5206\u914d\u65b9\u6848\uff0c\u5982\u679c\u81f3\u5c1150%\u7684\u6d77\u76d7\u8d5e\u6210\uff0c\u90a3\u4e48\u65b9\u6848\u901a\u8fc7\uff1b\u5426\u52191\u53f7\u6d77\u76d7\u88ab\u6254\u8fdb\u6d77\u91cc\uff0c\u63a5\u4e0b\u6765\u7531\u7b49\u7ea7\u7b2c\u4e8c\u9ad8\u7684\u6d77\u76d7\u63d0\u51fa\u5206\u914d\u65b9\u6848\uff0c\u4ee5\u6b64\u7c7b\u63a8...\u3002\u5047\u5b9a\u6bcf\u4e2a\u6d77\u76d7\u90fd\u8db3\u591f\u51b7\u8840\uff0c\u5728\u83b7\u5f97\u76f8\u540c\u91d1\u5e01\u7684\u60c5\u51b5\u4e0b\uff0c\u4ed6\u4eec\u66f4\u5e0c\u671b\u5b58\u6d3b\u7684\u6d77\u76d7\u66f4\u5c11\u3002\u90a3\u4e481\u53f7\u6d77\u76d7\u5e94\u8be5\u63d0\u51fa\u4ec0\u4e48\u65b9\u6848\uff1f</p> <p>Solution:</p> <p>\u5047\u5b9a\u6d77\u76d7\u7b49\u7ea7\u6309\u7167\u6570\u5b57\u5927\u5c0f\u6392\u5217\uff0c\u5373\u6570\u5b57\u8d8a\u5927\u7b49\u7ea7\u8d8a\u9ad8\u3002</p> <p>\u5047\u5982\u67092\u4e2a\u6d77\u76d7\uff0c\u90a3\u4e482\u53f7\u6d77\u76d7\u4f1a\u628a\u6240\u6709\u91d1\u5e01\u7ed9\u81ea\u5df1\uff0c\u5373\u5206\u914d\u65b9\u6848\u4e3a\uff080\uff0c100\uff09</p> <p>\u5047\u5982\u67093\u4e2a\u6d77\u76d7\uff0c\u90a3\u4e483\u53f7\u6d77\u76d7\u4e3a\u4e86\u6d3b\u547d\u5fc5\u987b\u62c9\u62e21\u53f7\u6d77\u76d7\uff0c\u56e0\u4e3a\u5982\u679c3\u53f7\u7684\u65b9\u6848\u88ab\u5426\u51b3\uff0c\u90a3\u4e481\u53f7\u5c06\u4ec0\u4e48\u4e5f\u62ff\u4e0d\u5230\uff0c\u6240\u4ee5\u6b64\u65f6\u7684\u5206\u914d\u65b9\u6848\u662f\uff081\uff0c0\uff0c99\uff09</p> <p>\u5047\u5982\u67094\u4e2a\u6d77\u76d7\uff0c\u90a3\u4e484\u53f7\u6d77\u76d7\u4e3a\u4e86\u6d3b\u547d\u53ea\u9700\u8981\u7ed92\u53f7\u6d77\u76d7\u4e00\u679a\u91d1\u5e01\u5373\u53ef\uff0c\u5206\u914d\u65b9\u6848\u4e3a\uff080\uff0c1\uff0c0\uff0c99\uff09</p> <p>\u52a0\u5165\u67095\u4e2a\u6d77\u76d7\uff0c\u90a3\u4e485\u53f7\u6d77\u76d7\u9700\u8981\u62c9\u62e21\u53f7\u548c3\u53f7\u6d77\u76d7\uff0c\u56e0\u4e3a\u5982\u679c5\u53f7\u7684\u65b9\u6848\u88ab\u5426\u51b3\uff0c\u4e0b\u4e00\u8f6e1\u53f7\u548c3\u53f7\u53ef\u80fd\u4ec0\u4e48\u90fd\u62ff\u4e0d\u5230\uff0c\u6b64\u65f6\u5206\u914d\u65b9\u6848\u4e3a\uff081\uff0c0\uff0c1\uff0c0\uff0c98\uff09</p> <p>...</p> <p>\u53ef\u4ee5\u770b\u5230\u5982\u679c\u6709<code>2n+1\uff08n&lt;=100\uff09</code>\u4e2a\u6d77\u76d7\uff0c\u90a3\u4e48\u5206\u914d\u65b9\u6848\u662f<code>1\uff0c3\uff0c...\uff0c2n-1</code>\u53f7\u6d77\u76d7\u5404\u5f97\u4e00\u4e2a\u91d1\u5e01</p>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/Brain_Teaser/#_3","title":"\u8001\u864e\u548c\u7f8a","text":"<p>\u8349\u539f\u4e0a\u6709\u4e00\u767e\u53ea\u8001\u864e\u548c\u4e00\u53ea\u7f8a\uff0c\u5982\u679c\u4e00\u53ea\u8001\u864e\u628a\u7f8a\u5403\u6389\u4e86\uff0c\u90a3\u4e48\u5b83\u4f1a\u53d8\u6210\u7f8a\uff0c\u5047\u5b9a\u6bcf\u6b21\u53ea\u80fd\u7531\u4e00\u53ea\u8001\u864e\u5403\u6389\u4e00\u53ea\u7f8a\uff0c\u5e76\u4e14\u6240\u6709\u8001\u864e\u8db3\u591f\u7406\u6027\uff0c\u6700\u7ec8\u8fd9\u53ea\u7f8a\u4f1a\u88ab\u5403\u6389\u5417\uff1f</p> <p>Solution:</p> <p>\u5047\u5982\u67091\u53ea\u8001\u864e\uff0c\u90a3\u4e48\u8001\u864e\u4e00\u5b9a\u4f1a\u5403\u6389\u7f8a\uff1b</p> <p>\u5047\u5982\u67092\u53ea\u8001\u864e\uff0c\u90a3\u4e48\u8001\u864e\u4e00\u5b9a\u4e0d\u4f1a\u5403\u7f8a\uff1b</p> <p>\u5047\u5982\u67093\u53ea\u8001\u864e\uff0c\u90a3\u4e48\u5176\u4e2d\u4e00\u53ea\u8001\u864e\u4e00\u5b9a\u4f1a\u5403\u7f8a\uff1b</p> <p>\u5047\u5982\u67094\u53ea\u8001\u864e\uff0c\u90a3\u4e48\u5b83\u4eec\u90fd\u4e0d\u4f1a\u5403\u7f8a\uff1b</p> <p>...</p> <p>\u4f9d\u6b64\u7c7b\u63a8\uff0c\u5f53\u6709\u5076\u6570\u53ea\u8001\u864e\u65f6\uff0c\u7f8a\u4e0d\u4f1a\u88ab\u5403\u6389\u3002</p>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/Brain_Teaser/#_4","title":"\u903b\u8f91\u63a8\u7406","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/Brain_Teaser/#_5","title":"\u8fc7\u6865\u95ee\u9898","text":"<p>A,B,C,D\u4e2a\u4eba\u8fc7\u6865\uff0c\u8fc7\u6865\u9700\u8981\u624b\u7535\uff0c\u6bcf\u6b21\u6700\u591a\u53ea\u80fd\u8d70\u4e24\u4e2a\u4eba\uff0c\u53ea\u6709\u4e00\u4e2a\u624b\u7535\uff0c\u56db\u4e2a\u4eba\u8fc7\u6865\u6240\u9700\u65f6\u95f4\u5206\u522b\u4e3a10\uff0c5\uff0c2\uff0c1\u5206\u949f\uff0c\u4e24\u4e2a\u4eba\u4e00\u8d77\u8fc7\u6865\u8017\u65f6\u7531\u6240\u9700\u65f6\u95f4\u66f4\u4e45\u7684\u4eba\u51b3\u5b9a\uff0c\u95ee\u56db\u4e2a\u4eba\u5168\u90e8\u8fc7\u6865\u6700\u5c11\u9700\u8981\u591a\u5c11\u5206\u949f\uff1f</p> <p>Solution:</p> <p>==\u8017\u65f6\u6700\u4e45\u7684\u4e24\u4e2a\u4eba\u4e00\u5b9a\u8981\u540c\u65f6\u8fc7\u6865==\uff0c\u6240\u4ee5A,B\u4e00\u5b9a\u540c\u65f6\u8fc7\u6865\uff0c\u5e76\u4e14\u4ed6\u4eec\u4e0d\u80fd\u6700\u5148\u8fc7\u6865\uff0c\u56e0\u4e3a\u6b64\u65f6\u4ed6\u4eec\u8fd4\u56de\u4e5f\u5f88\u8017\u65f6\uff0c\u6240\u4ee5\u4e00\u5f00\u59cb\u4e00\u5b9a\u662fC,D\u5148\u8fc7\u6865\uff082 m\uff09\uff0c\u7136\u540eD\u56de\u6765\uff081 m\uff09\uff0c\u63a5\u4e0b\u6765A,B\u8fc7\u6865\uff0810 m\uff09,\u7136\u540eC\u56de\u6765\uff082 m\uff09\uff0c\u6700\u540eC,D\u4e00\u8d77\u8fc7\u6865\uff082 m\uff09\uff0c\u603b\u517117 m\u3002</p>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/Brain_Teaser/#_6","title":"\u751f\u65e5\u95ee\u9898","text":"<p>\u4f60\u548c\u540c\u4e8bA\u77e5\u9053\u8001\u677f\u7684\u751f\u65e5\u4e00\u5b9a\u662f\u4ee5\u4e0b\u65e5\u671f\u4e2d\u7684\u4e00\u4e2a\uff1a3.4\uff0c3.5\uff0c3.8\uff0c6.4\uff0c6.7\uff0c9.1\uff0c9.5\uff0c12.1\uff0c12.2\uff0c12.8\u3002\u4f60\u53ea\u77e5\u9053\u8001\u677f\u751f\u65e5\u7684\u6708\u4efd\uff0c\u4f60\u7684\u540c\u4e8bA\u53ea\u77e5\u9053\u65e5\u671f\u3002\u5728\u4f60\u8bf4\u5b8c\uff1a\u6211\u4e0d\u77e5\u9053\u8001\u677f\u7684\u751f\u65e5\uff0cA\u4e5f\u4e0d\u77e5\u9053\u4e4b\u540e\uff0c\u4f60\u7684\u540c\u4e8bA\u8bf4\uff1a\u6211\u4e4b\u524d\u4e0d\u77e5\u9053\uff0c\u4f46\u662f\u73b0\u5728\u77e5\u9053\u4e86\u3002\u542c\u5230\u8fd9\u4e4b\u540e\u4f60\u4e5f\u7b11\u7740\u8bf4\u4f60\u4e5f\u77e5\u9053\u4e86\u3002\u5f53\u53e6\u4e00\u4e2a\u540c\u4e8b\u770b\u5230\u8fd9\u4e2a\u4e9b\u65e5\u671f\u548c\u4f60\u4eec\u7684\u5bf9\u8bdd\u540e\uff0c\u53e6\u4e00\u4e2a\u540c\u4e8b\u731c\u51fa\u4e86\u8001\u677f\u7684\u751f\u65e5\uff0c\u8bf7\u95ee\u8001\u677f\u7684\u751f\u65e5\u662f\uff1f</p> <p>Solution:</p> <p>\u6309\u903b\u8f91\u6765\u3002\u9996\u5148\u6211\u786e\u4fe1A\u4e0d\u77e5\u9053\u5177\u4f53\u6708\u4efd\uff0c\u90a3\u4e48\u8bf4\u660eA\u77e5\u9053\u7684\u65e5\u671f\u4e00\u5b9a\u4e0d\u80fd\u53ea\u6709\u4e00\u4e2a\uff0c\u4e5f\u5c31\u662f7\u548c2\uff0c\u90a3\u4e48\u6708\u4efd\u4e00\u5b9a\u4e0d\u80fd\u662f6\u548c12\u6708\uff1b\u63a5\u4e0b\u6765A\u8bf4\u4ed6\u77e5\u9053\u65e5\u671f\u4e86\uff0c\u90a3\u4e48\u8bf4\u660e\u4ed6\u77e5\u9053\u7684\u65e5\u5b50\u4e00\u5b9a\u4e0d\u80fd\u662f5\u53f7\uff0c\u56e0\u4e3a\u5b58\u57283.5\u548c9.5\u4e24\u79cd\u53ef\u80fd\uff1b\u968f\u540e\u6211\u4e5f\u77e5\u9053\u4e86\u65e5\u671f\uff0c\u90a3\u4e48\u6211\u77e5\u9053\u7684\u6708\u4efd\u4e00\u5b9a\u662f9\u6708\uff0c\u6240\u4ee5\u65e5\u671f\u662f9.1\u3002</p>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/Brain_Teaser/#_7","title":"\u5361\u724c\u6e38\u620f","text":"<p>\u5e84\u5bb6\u63d0\u4f9b\u4e00\u79cd\u5361\u724c\u6e38\u620f\uff0c\u89c4\u5219\u662f\u4e0b\u5bb6\u4e0d\u65ad\u4ece52\u5f20\u724c\u91cc\u6478\u724c\uff0c\u6bcf\u6b21\u6478\u4e24\u5f20\uff0c\u5982\u679c\u90fd\u662f\u9ed1\u8272\u628a\u724c\u7ed9\u88c5\u7532\uff0c\u90fd\u662f\u7ea2\u8272\u5c31\u81ea\u5df1\u62ff\u8d70\uff0c\u4e00\u9ed1\u4e00\u7ea2\u5c31\u5f03\u6389\uff0c\u76f4\u5230\u6478\u5b8c\u4e00\u526f\u724c\u6e38\u620f\u7ed3\u675f\uff1b\u5982\u679c\u4e0b\u5bb6\u5f97\u5230\u7684\u724c\u6570\u591a\u4e8e\u5e84\u5bb6\u5219\u83b7\u5f97100\u5143\uff0c\u5426\u5219\u8d54\u6389\u672c\u94b1\uff0c\u95ee\u5e94\u8be5\u4e0b\u6ce8\u591a\u5c11\uff1f</p> <p>Solution:</p> <p>\u56e0\u4e3a\u4e22\u6389\u7684\u9ed1\u724c\u548c\u7ea2\u724c\u6570\u76ee\u76f8\u7b49\uff0c\u90a3\u4e48\u6700\u7ec8\u5e84\u5bb6\u548c\u4e0b\u5bb6\u624b\u4e2d\u724c\u6570\u4e00\u5b9a\u76f8\u540c\uff0c\u6240\u4ee5\u4e0b\u5bb6\u4e0d\u53ef\u80fd\u8d62\u3002</p>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/Brain_Teaser/#_8","title":"\u70e7\u7ef3\u5b50","text":"<p>\u6709\u4e24\u6839\u4e0d\u5747\u5300\u7684\u7ef3\u5b50\uff0c\u70e7\u5b8c\u5b83\u4eec\u5747\u9700\u89811 h\uff0c\u7528\u8fd9\u4e24\u6839\u7ef3\u5b50\u600e\u4e48\u6d4b\u91cf45 m\uff1f</p> <p>Solution:</p> <p>\u4e00\u6839\u7ef3\u5b50\u70e7\u5b8c\u8017\u65f61 h\uff0c\u628a\u7ef3\u5b50\u5bf9\u6298\u70e7\u5b8c\u4e00\u5b9a\u8017\u65f60.5 h\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u628a\u4e00\u6839\u7ef3\u5b50\u5bf9\u6298\uff0c\u7136\u540e\u540c\u65f6\u70e7\u5bf9\u6298\u7684\u548c\u4e0d\u5bf9\u6298\u7684\u7ef3\u5b50\uff0c\u534a\u5c0f\u65f6\u540e\u5bf9\u6298\u7684\u7ef3\u5b50\u70e7\u5b8c\u4e86\uff0c\u53e6\u4e00\u6839\u7ef3\u5b50\u8fd8\u80fd\u70e7\u534a\u5c0f\u65f6\uff0c\u6240\u4ee5\u53ea\u9700\u628a\u8fd9\u6839\u7ef3\u5b50\u518d\u6b21\u5bf9\u6298\uff0c\u5c31\u80fd\u5f97\u523015 m\u3002</p>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/Brain_Teaser/#_9","title":"\u4e0d\u540c\u7684\u7403","text":"<p>\u670912\u4e2a\u76f8\u540c\u7684\u7403\uff0c\u5176\u4e2d\u4e00\u4e2a\u6bd4\u5176\u4ed611\u4e2a\u66f4\u8f7b\u6216\u8005\u66f4\u91cd\uff0c\u53ea\u7528\u4e00\u4e2a\u6ca1\u6709\u523b\u5ea6\u7684\u5929\u5e73\u53ef\u4ee5\u57283\u6b21\u6d4b\u91cf\u7684\u60c5\u51b5\u4e0b\u627e\u5230\u8fd9\u4e2a\u4e0d\u540c\u7684\u7403\u5417\uff1f</p> <p>Solution:</p> <p>\u5982\u679c\u6309\u7167\u5e38\u89c4\u601d\u8def\uff0c\u6bcf\u6b21\u62ff\u51fa\u4e00\u534a\u7684\u7403\u6765\u79f0\u91cd\uff0c\u90a3\u4e48\u9700\u89814\u6b21\u79f0\u91cd\uff0c\u56e0\u4e3a\u6bcf\u6b21\u53ef\u4ee5\u6392\u9664\u4e00\u534a\uff0c4\u6b21\u6700\u591a\u53ef\u4ee5\u6392\u9664\\(2^4=16\\)\u4e2a\u7403\uff1b</p> <p>\u4f46\u662f\u5176\u5b9e\u5982\u679c\u628a\u7403\u5206\u6210\u4e09\u4efd\uff0c\u4e00\u6b21\u79f0\u91cd\u53ef\u4ee5\u6392\u96642/3\uff1b\u5982\u679c\u53ea\u9700\u8981\u627e\u5230\u8fd9\u4e2a\u4e0d\u540c\u7684\u7403\uff0c\u90a3\u4e48n\u6b21\u79f0\u91cd\u53ef\u4ee5\u6392\u9664\\(3^n\\)\u4e2a\u7403\uff1b\u4f46\u662f\u5982\u679c\u9700\u8981\u5224\u65ad\u8fd9\u4e2a\u7403\u662f\u66f4\u8f7b\u8fd8\u662f\u66f4\u91cd\uff0c\u5219n\u6b21\u79f0\u91cd\u6700\u591a\u53ea\u80fd\u6392\u9664\\(\\frac{3^n-3}{2}\\)\u4e2a\u7403\u3002</p> <p></p>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/Brain_Teaser/#0","title":"\u672b\u5c3e0\u7684\u4e2a\u6570","text":"<p>100\uff01\u672b\u5c3e\u6709\u591a\u5c11\u4e2a0\uff1f</p> <p>Solution:</p> <p>\u53ea\u6709\\(2 \\times 5\\) \u624d\u80fd\u5f97\u52300\uff0c\u663e\u800c\u6613\u89c1100\uff01\u4e2d\u80fd\u5206\u89e3\u51fa\u7684\u56e0\u65702\u7684\u4e2a\u6570\u6bd45\u66f4\u591a\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u5224\u65ad100\uff01\u80fd\u5206\u89e3\u51fa\u591a\u5c11\u4e2a\u56e0\u65705\u5c31\u884c\u30025\uff0c10\uff0c15\uff0c...\uff0c100,\u8fd9\u91cc\u603b\u5171\u670920\u4e2a\u6570\uff0c\u5b83\u4eec\u9664\u4ee55\u4e4b\u540e\u4e3a1\uff0c2\uff0c...\uff0c20\uff0c\u5176\u4e2d\u53c8\u67094\u4e2a\u6570\u5305\u542b5\u7684\u56e0\u5b50\uff0c\u5e76\u4e14\u518d\u7ee7\u7eed\u9664\u4e0b\u53bb\u6ca1\u6709\u5305\u542b\u56e0\u65705\u7684\u6570\u4e86\uff0c\u6240\u4ee5\u603b\u5171\u53ef\u4ee5\u5206\u89e3\u51fa24\u4e2a5\uff0c\u90a3\u4e48100\uff01\u672b\u5c3e\u4e00\u5171\u670924\u4e2a0\u3002</p>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/Brain_Teaser/#_10","title":"\u8d5b\u9a6c","text":"<p>\u670925\u5339\u9a6c\uff0c\u5b83\u4eec\u7684\u901f\u5ea6\u5404\u4e0d\u76f8\u540c\uff0c\u6bcf\u6b21\u53ea\u80fd\u8d5b5\u5339\uff0c\u600e\u4e48\u7528\u6700\u5c11\u7684\u6bd4\u8d5b\u6b21\u6570\u627e\u5230\u8dd1\u5f97\u6700\u5feb\u76843\u5339\u9a6c\uff0c\u6700\u5c11\u9700\u8981\u51e0\u573a\u6bd4\u8d5b\uff1f</p> <p>Solution:</p> <p>\u9996\u5148\u5c06\u9a6c\u5206\u62105\u7ec4\uff0c\u6bcf\u4e00\u7ec4\u8fdb\u884c\u4e00\u6b21\u6bd4\u8d5b\uff0c\u5047\u5b9a\u9a6c\u7684\u7f16\u53f7\u4e3a1-25\uff0c\u7b2c\u4e00\u7ec4\u9a6c\u7684\u7f16\u53f7\u4e3a1-5\uff0c\u7b2c\u4e8c\u7ec4\u4e3a6-10\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u5047\u5b9a\u6bcf\u4e00\u7ec4\u6700\u5feb\u7684\u9a6c\u5206\u522b\u662f1\uff0c6\uff0c11\uff0c16\uff0c21\uff0c\u90a3\u4e48\u6700\u5feb\u7684\u9a6c\u4e00\u5b9a\u5728\u8fd95\u5339\u9a6c\u4e2d\uff0c\u5bf9\u5b83\u4eec\u8fdb\u884c\u5f02\u5e38\u6bd4\u8d5b\uff0c\u5047\u5b9a\u6392\u540d\u987a\u5e8f\u4e3a1\uff0c6\uff0c11\uff0c16\uff0c21\uff0c\u90a3\u4e4816\uff0c21\u4e00\u5b9a\u4e0d\u5728\u524d3\u540d\u4e2d\uff0c\u7b2c\u4e8c\u540d\u548c\u7b2c\u4e09\u540d\u53ea\u53ef\u80fd\u57286\uff0c11\uff0c2\uff0c3\uff0c12\u8fd95\u5339\u9a6c\u4e2d\uff0c\u5bf9\u5b83\u4eec\u8fdb\u884c\u4e00\u573a\u6bd4\u8d5b\u5c31\u53ef\u4ee5\u627e\u5230\u7b2c2\uff0c3\u540d\uff0c\u6240\u4ee5\u603b\u5171\u9700\u89817\u573a\u6bd4\u8d5b\u3002</p>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/Brain_Teaser/#_11","title":"\u65e0\u9650\u5e8f\u5217","text":"<p>\u5982\u679c\\(x^{x^{x^{x^{...}}}}=2\\)\uff0cx\u7b49\u4e8e\u591a\u5c11\uff1f</p> <p>Solution:</p> <p>\u5047\u8bbe\\(y=x^{x^{x^{x^{...}}}}=2\\)\uff0c\u90a3\u4e48\\(x^y\\)\u4e5f\u7b49\u4e8e2\uff0c\u6240\u4ee5\u53ef\u77e5\\(x=\\sqrt2\\)\u3002</p>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/Brain_Teaser/#_12","title":"\u8df3\u51fa\u601d\u7ef4\u5b9a\u52bf","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/Brain_Teaser/#_13","title":"\u88c5\u957f\u6761","text":"<p>\u53ef\u4ee5\u628a53\u4e2a\\(1 \\times 1 \\times 4\\)\u7684\u957f\u6761\u653e\u5165\u4e00\u4e2a\\(6 \\times 6 \\times 6\\)\u7684\u76d2\u5b50\u4e2d\u5417\uff1f</p> <p>Solution:</p> <p>\u672c\u9898\u8fd8\u6709\u53e6\u5916\u4e00\u79cd\u53d8\u4f53\uff1a\u5728\u4e00\u4e2a\\(8 \\times 8\\)\u7684\u6b63\u65b9\u5f62\u4e2d\uff0c\u5176\u4e2d\u4e00\u6761\u5bf9\u89d2\u7ebf\u9876\u7aef\u6709\u4e24\u4e2a\u7a7a\u683c\uff0c\u80fd\u5426\u752831\u4e2a\\(1 \\times 2\\)\u7684\u77e9\u5f62\u586b\u6ee1\u8fd9\u4e2a\u6b63\u65b9\u5f62\uff1f</p> <p>\u5982\u679c\u628a\u4efb\u610f\u76f8\u90bb\u7684\u5c0f\u6b63\u65b9\u5f62\u5206\u522b\u6d82\u4e0a\u9ed1\u8272\u548c\u767d\u8272\uff0c\u6309\u7167\u8fd9\u79cd\u989c\u8272\u6d82\u53d6\u65b9\u5f0f\uff0c\u5bf9\u89d2\u7ebf\u4e0a\u9876\u70b9\u7684\u4e24\u4e2a\u7f51\u683c\u4e00\u5b9a\u989c\u8272\u76f8\u540c\uff1b\u5e76\u4e14\u6bcf\u4e2a\u5c0f\u77e9\u5f62\u4e00\u5b9a\u662f\u7531\u4e00\u4e2a\u9ed1\u8272\u548c\u4e00\u4e2a\u767d\u8272\u65b9\u683c\u7ec4\u6210\uff0c\u56e0\u4e3a\u53bb\u6389\u8fd9\u4e24\u4e2a\u9876\u70b9\u7684\u65b9\u683c\u4e4b\u540e\u9ed1\u8272\u65b9\u683c\u548c\u767d\u8272\u65b9\u683c\u6570\u76ee\u4e0d\u76f8\u7b49\uff0c\u6240\u4ee5\u4e0d\u80fd\u752831\u4e2a\\(1 \\times 2\\)\u7684\u77e9\u5f62\u586b\u6ee1\u8fd9\u4e2a\u6b63\u65b9\u5f62\u3002</p> <p>\u56de\u5230\u672c\u9898\uff0c\u53ef\u4ee5\u8003\u8651\u628a\u539f\u59cb\\(6 \\times 6 \\times 6\\)\u7684\u6b63\u65b9\u4f53\u62c6\u5206\u621027\u4e2a\\(2 \\times 2 \\times 2\\)\u7684\u5c0f\u6b63\u65b9\u4f53\uff0c\u5982\u679c\u5c06\u6bcf\u4e24\u4e2a\u76f8\u90bb\u7684\u5c0f\u6b63\u65b9\u4f53\u5206\u522b\u6d82\u4e0a\u9ed1\u8272\u548c\u767d\u8272\uff0c\u90a3\u4e48\\(1 \\times 1 \\times 4\\)\u7684\u957f\u6761\u4e00\u5b9a\u67092\u4e2a\u767d\u8272\u548c2\u4e2a\u9ed1\u8272\u65b9\u683c\u3002\u800c27\u4e2a\u5c0f\u6b63\u65b9\u4f53\u4e2d\u53ea\u53ef\u80fd\u670913\u4e2a\u9ed1\u8272\u6216\u800513\u4e2a\u767d\u8272\u5c0f\u6b63\u65b9\u4f53\uff0c\u56e0\u6b64\u76d2\u5b50\u4e2d\u6700\u591a\u53ea\u80fd\u653e\\(13 \\times 4 = 52\\)\u4e2a\u957f\u6761\u3002</p>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/Brain_Teaser/#_14","title":"\u7528\u9ab0\u5b50\u7ec4\u6210\u65e5\u671f","text":"<p>\u6709\u4e24\u4e2a\u9ab0\u5b50\uff0c\u600e\u4e48\u653e\u7f6e\u9ab0\u5b50\u4e0a\u7684\u6570\u5b57\u4f7f\u5f97\u4e24\u4e2a\u9ab0\u5b50\u53ef\u4ee5\u8868\u793a01-31\uff08\u5373\u65e5\u5386\u4e2d\u7684\u65e5\u671f\uff09\uff1f</p> <p>Solution:</p> <p>\u56e0\u4e3a01-31\u4e2d\u5305\u542b11\uff0c22\uff0c\u6240\u4ee5\u4e24\u4e2a\u9ab0\u5b50\u4e0a\u5fc5\u987b\u90fd\u8981\u67091\uff0c2\uff0c\u6b64\u5916\u56e0\u4e3a\u8981\u8868\u793a01-09\uff0c\u6240\u4ee5\u4e24\u4e2a\u9ab0\u5b50\u4e0a\u8fd8\u5fc5\u987b\u90fd\u67090\uff0c\u8fd9\u6837\u8fd8\u52696\u4e2a\u4f4d\u7f6e\uff0c\u4f46\u662f\u8fd8\u5269\u4e0b7\u4e2a\u6570\u5b57\uff083-9\uff09\uff1b==\u8003\u8651\u52306\u548c9\u53ef\u4ee5\u4e92\u76f8\u66ff\u4ee3==\uff0c\u6240\u4ee56\u548c9\u53ea\u9700\u8981\u4e00\u4e2a\u5c31\u884c\u3002</p>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/Brain_Teaser/#_15","title":"\u600e\u4e48\u95ee\u53ea\u8bb2\u771f\u8bdd\u548c\u53ea\u8bb2\u5047\u8bdd\u7684\u4eba\u4e00\u4e2a\u95ee\u9898","text":"<p>\u4e24\u6247\u95e8\u5206\u522b\u5bf9\u5e94\u6709\u5956\u54c1\u548c\u6ca1\u6709\u5956\u54c1\uff0c\u4e24\u6247\u95e8\u524d\u5206\u522b\u7ad9\u4e86\u4e24\u4e2a\u5b88\u536b\uff0c\u5176\u4e2d\u4e00\u4e2a\u53ea\u8bb2\u771f\u8bdd\uff0c\u4e00\u4e2a\u53ea\u8bb2\u5047\u8bdd\uff0c\u600e\u4e48\u53ea\u95ee\u4e00\u4e2a\u7b54\u6848\u4e3a\u662f\u6216\u5426\u7684\u95ee\u9898\u786e\u5b9a\u54ea\u6247\u95e8\u540e\u9762\u6709\u5956\u54c1\uff1f</p> <p>Solution:</p> <p>\u9996\u5148\u95ee\u7684\u95ee\u9898\u5fc5\u987b\u8981\u628a\u53e6\u4e00\u4e2a\u5b88\u536b\u4e5f\u5305\u62ec\u8fdb\u53bb\u624d\u884c\uff0c\u6bd4\u5982\u95ee\u4e00\u4e2a\u5b88\u536b\uff1a\u53e6\u4e00\u4e2a\u5b88\u536b\u4f1a\u8bf4\u4f60\u6240\u5728\u7684\u95e8\u540e\u9762\u6709\u5956\u54c1\u5417\uff1f\u7136\u540e\u5206\u6790\u4e00\u4e0b\u552f\u4e00\u6027\uff1a</p> <p>\u5047\u5b9a\u4f60\u95ee\u7684\u5b88\u536b\u95e8\u540e\u6709\u5956\u54c1\uff0c\u90a3\u4e48\u4ed6\u4e00\u5b9a\u4f1a\u56de\u7b54\u6ca1\u6709\uff08\u5426\uff09\uff0c\u65e0\u8bba\u4ed6\u662f\u53ea\u8bb2\u632f\u534e\u7684\u4eba\u8fd8\u662f\u53ea\u8bb2\u5047\u8bdd\u7684\u4eba\uff0c\u56e0\u4e3a1&amp;0=0\uff0c\u5982\u679c\u95ee\u7684\u5b88\u536b\u95e8\u540e\u6ca1\u6709\u5956\u54c1\uff0c\u540c\u7406\u4ed6\u4e00\u5b9a\u4f1a\u8bf4\u6709\uff08\u662f\uff09\uff0c\u6240\u4ee5\u5982\u679c\u5b88\u536b\u56de\u7b54\u662f\uff0c\u5c31\u9009\u53e6\u4e00\u6247\u95e8\uff0c\u5b88\u536b\u56de\u7b54\u5426\u5c31\u9009\u8fd9\u6247\u95e8\u3002</p>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/Brain_Teaser/#_16","title":"\u4fe1\u4ef6\u4e0a\u9501\u95ee\u9898","text":"<p>A\u8981\u901a\u8fc7\u90ae\u9012\u628a\u4fe1\u4ef6\u9001\u5230B\u5904\uff0c\u4fe1\u4ef6\u5fc5\u987b\u4e0a\u9501\uff0c\u600e\u4e48\u90ae\u9012\uff1f</p> <p>Solution:</p> <p>\u5173\u952e\u70b9\u5728\u4e8e\u4fe1\u4ef6\u53ef\u4ee5\u4e0a\u4e0d\u6b62\u4e00\u628a\u9501\u3002\u5982\u679cA\u76f4\u63a5\u90ae\u9012\u4e00\u5c01\u5e26\u9501\u7684\u4fe1\u4ef6\uff0c\u90a3\u4e48B\u6253\u4e0d\u5f00\uff0c\u6240\u4ee5B\u9700\u8981\u518d\u5c06\u8fd9\u5c01\u4e0a\u9501\u7684\u4fe1\u4ef6\u518d\u52a0\u4e00\u628a\u9501\u9001\u5230A\u5904\uff0cA\u5f00\u9501\u540e\u518d\u9001\u5230B\u5904\u3002</p>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/Brain_Teaser/#_17","title":"\u6700\u540e\u4e00\u4e2a\u7403\u7684\u989c\u8272","text":"<p>\u888b\u5b50\u91cc\u670920\u4e2a\u84dd\u8272\u7403\u548c14\u4e2a\u7ea2\u8272\u7403\uff0c\u6bcf\u6b21\u968f\u673a\u4e0d\u653e\u56de\u62ff\u51fa\u4e24\u4e2a\uff0c\u5982\u679c\u62ff\u51fa\u540c\u8272\u7403\u5219\u5411\u888b\u5b50\u4e2d\u52a0\u5165\u4e00\u4e2a\u84dd\u8272\u7403\uff1b\u5982\u679c\u4e0d\u540c\u8272\uff0c\u5219\u5411\u888b\u5b50\u4e2d\u52a0\u5165\u4e00\u4e2a\u7ea2\u8272\u7403\u3002\u91cd\u590d\u62ff\uff0c\u6700\u7ec8\u888b\u5b50\u4e2d\u4f1a\u662f\u4ec0\u4e48\u989c\u8272\u7684\u7403\uff1f\u5982\u679c20\u4e2a\u84dd\u8272\u548c13\u4e2a\u7ea2\u8272\u7684\u7403\u60c5\u51b5\u5982\u4f55\uff1f</p> <p>Solution:</p> <p>\u5206\u522b\u5206\u6790\u4e09\u79cd\u60c5\u51b5\uff1a</p> <p>\u62ff\u51fa\u4e24\u4e2a\u84dd\u8272\u7403\\(\\rightarrow\\)\u62ff\u51fa\u4e00\u84dd\uff1b</p> <p>\u62ff\u51fa\u4e24\u4e2a\u7ea2\u8272\u7403\\(\\rightarrow\\)\u62ff\u51fa\u4e24\u7ea2\uff1b\u653e\u56de\u4e00\u84dd\uff1b</p> <p>\u62ff\u51fa\u4e00\u84dd\u4e00\u7ea2\\(\\rightarrow\\)\u62ff\u51fa\u4e00\u84dd\uff1b</p> <p>\u53ef\u4ee5\u770b\u5230\u4e09\u79cd\u64cd\u4f5c\u7ea2\u7403\u6309\u7167\u5076\u6570\u53d8\u5316\uff0c\u84dd\u7403\u5219\u6309\u5947\u6570\u53d8\u5316\uff0c\u6240\u4ee5\u5728\u84dd\u7403\u548c\u7ea2\u7403\u90fd\u662f\u5076\u6570\u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u7ec8\u5269\u4e0b\u7684\u7403\u4e00\u5b9a\u662f\u84dd\u7403\uff1b\u5982\u679c\u84dd\u7403\u662f\u5076\u6570\uff0c\u7ea2\u7403\u662f\u5947\u6570\uff0c\u90a3\u4e48\u5269\u4e0b\u7684\u4e00\u5b9a\u662f\u7ea2\u7403\u3002</p>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/Brain_Teaser/#_18","title":"\u5224\u65ad\u706f\u7684\u5f00\u5173\u662f\u54ea\u4e00\u4e2a","text":"<p>\u57fa\u7840\u7248\uff1a\u623f\u95f4\u5916\u67093\u4e2a\u5f00\u5173\uff0c\u5206\u522b\u5bf9\u5e94\u623f\u4ef7\u5185\u90e8\u76843\u76cf\u706f\uff0c\u600e\u4e48\u53ea\u8fdb\u5165\u623f\u95f4\u4e00\u6b21\u5224\u65ad\u5f00\u5173\u7684\u5bf9\u5e94\u5173\u7cfb\uff1f</p> <p>\u5347\u7ea7\u7248\uff1a\u623f\u95f4\u5916\u9762\u67094\u4e2a\u5f00\u5173\uff0c\u5176\u4e2d\u4e00\u4e2a\u80fd\u6253\u5f00\u623f\u4ef7\u5185\u7684\u706f\uff0c\u600e\u4e48\u53ea\u8fdb\u5165\u4e00\u6b21\u623f\u95f4\u627e\u5230\u5f00\u5173\uff1f</p> <p>Solution:</p> <p>\u76f4\u63a5\u4ece\u706f\u6ce1\u662f\u4eae\u8fd8\u662f\u706d\u7684\u53ea\u80fd\u5224\u65ad\u4e24\u4e2a\u5f00\u5173\uff0c\u5fc5\u987b\u501f\u52a9\u53e6\u4e00\u4e2a\u4e8c\u8fdb\u5236\u91cf\u5f97\u5230\u53e6\u59162\u4e2a\u5224\u65ad\u3002</p> <p>\u57fa\u7840\uff1a\u6253\u5f00\u5f00\u5173A\uff0c\u4e00\u6bb5\u65f6\u95f4\u540e\u5173\u6389\uff0c\u7136\u540e\u6253\u5f00\u5f00\u5173B\u518d\u8fdb\u5165\u623f\u95f4\uff1b</p> <p>\u5347\u7ea7\uff1a\u6253\u5f00\u5f00\u5173A\uff0cB\uff0c\u4e00\u6bb5\u65f6\u95f4\u540e\u5173\u6389B\uff0c\u6253\u5f00\u5f00\u5173C\uff0c\u7136\u540e\u8fdb\u5165\u623f\u95f4\u3002</p>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/Brain_Teaser/#8","title":"\u8ba1\u7b978\u4e2a\u4eba\u85aa\u8d44\u7684\u85aa\u6c34\u5747\u503c","text":"<p>8\u4e2a\u4eba\u805a\u5728\u4e00\u8d77\uff0c\u4ed6\u4eec\u90fd\u60f3\u77e5\u90538\u4e2a\u4eba\u7684\u5e73\u5747\u85aa\u8d44\uff0c\u4f46\u662f\u90fd\u4e0d\u613f\u610f\u628a\u81ea\u5df1\u7684\u771f\u5b9e\u85aa\u8d44\u544a\u8bc9\u5176\u4ed6\u4eba\uff0c\u600e\u4e48\u8bbe\u8ba1\u65b9\u6848\u5b9e\u73b0\u8fd9\u4e2a\u76ee\u6807\uff1f</p> <p>Solution:</p> <p>\u5c068\u4e2a\u4eba\u7f16\u53f7\u4e3a1-8\uff0c1\u53f7\u5c06\u81ea\u5df1\u7684\u85aa\u8d44\u52a0\u4e0a\u4e00\u4e2a\u968f\u673a\u6570\u544a\u8bc92\u53f7\uff0c2\u53f7\u628a\u81ea\u5df1\u7684\u85aa\u8d44\u52a0\u4e0a1\u53f7\u7684\u7ed3\u679c\u518d\u544a\u8bc9\u4e09\u53f7\uff0c\u4f9d\u6b64\u7c7b\u63a8\uff0c\u5f538\u53f7\u628a\u7ed3\u679c\u544a\u8bc91\u53f7\u65f6\uff0c\u4ed6\u51cf\u53bb\u968f\u673a\u6570\u5c31\u53ef\u4ee5\u5f97\u5230\u5e73\u5747\u85aa\u8d44\u3002</p>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/Brain_Teaser/#_19","title":"\u5e94\u7528\u5bf9\u79f0","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/Brain_Teaser/#_20","title":"\u600e\u4e48\u5206\u4e00\u5806\u786c\u5e01\u4f7f\u5f97\u4e24\u5806\u4eba\u8138\u671d\u4e0a\u4e00\u9762\u7684\u6570\u76ee\u76f8\u540c","text":"<p>\u623f\u95f4\u91cc\u67091000\u679a\u786c\u5e01\uff0c\u5176\u4e2d20\u679a\u4eba\u8138\u671d\u4e0a\uff0c\u5176\u4ed6\u7684\u5b57\u671d\u4e0a\uff0c\u786c\u5e01\u53ef\u4ee5\u7ffb\u8f6c\uff0c\u600e\u4e48\u628a\u786c\u5e01\u5206\u6210\u4e24\u5806\u4f7f\u5f97\u8fd9\u4e24\u5806\u4eba\u8138\u671d\u4e0a\u7684\u6570\u76ee\u76f8\u540c\uff1f</p> <p>Solution:</p> <p>\u5047\u8bbe\u5c06\u786c\u5e01\u5206\u6210\u4e24\u5806\uff0c\u4e00\u5806\u4e2a\u6570\u4e3am\uff0c\u53e6\u4e00\u5806\u4e3a1000-m\uff0c\u5047\u8bbem\u4e2a\u786c\u5e01\u4e2d\u6709a\u4e2a\u4eba\u8138\u671d\u4e0a\uff0c\u90a3\u4e48\u53e6\u4e00\u5806\u4eba\u8138\u671d\u4e0a\u7684\u4e2a\u6570\u4e3a20-a\uff1b\u56e0\u4e3a\u7b2c\u4e00\u5806\u4e2d\u53cd\u9762\uff08\u5b57\uff09\u671d\u4e0a\u7684\u4e2a\u6570\u4e3am-a\uff0c\u5982\u679c\u5c06\u7b2c\u4e00\u5806\u4e2d\u6240\u6709\u786c\u5e01\u7ffb\u8f6c\uff0c\u90a3\u4e48\u4eba\u8138\u671d\u4e0a\u7684\u4e2a\u6570\u5c31\u7b49\u4e8em-a\uff0c\u53ea\u9700\u8981m=20\uff0c\u5c31\u4e00\u5b9a\u53ef\u4ee5\u6ee1\u8db3\u6761\u4ef6\u3002\u4e5f\u5373\u968f\u673a\u900920\u4e2a\u786c\u5e01\u7ffb\u8f6c\uff0c\u8fd920\u4e2a\u786c\u5e01\u7684\u4eba\u8138\u671d\u4e0a\u4e2a\u6570\u4e00\u5b9a\u548c\u5269\u4f59\u786c\u5e01\u4eba\u8138\u671d\u4e0a\u4e2a\u6570\u76f8\u540c\u3002</p>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/Brain_Teaser/#_21","title":"\u600e\u4e48\u62bd\u53d6\u6700\u5c0f\u6b21\u6570\u786e\u5b9a\u4e09\u4e2a\u5b8c\u5168\u8d34\u9519\u6807\u7b7e\u7684\u5305","text":"<p>\u4e09\u4e2a\u5305\u5206\u522b\u88c5\u6709A\uff0cB\uff0cA\u548cB\uff0c\u4f46\u662f\u5b83\u4eec\u7684\u6807\u7b7e\u5b8c\u5168\u9519\u4e86\uff0c\u600e\u4e48\u62bd\u53d6\u6700\u5c0f\u6570\u91cf\u7684\u7269\u54c1\u786e\u5b9a\u6807\u7b7e\uff1f</p> <p>Solution:</p> <p>\u6807\u7b7e\u5b8c\u5168\u8d34\u9519\u8bf4\u660e\u6807\u7b7e\u548c\u7269\u54c1\u7684\u5bf9\u5e94\u5173\u7cfb\u53ea\u6709\u4e24\u79cd\u3002\u62bd\u53d6\u65f6\u53ef\u4ee5\u4ece\u6807\u7b7e\u4e3aA\u6216\u8005B\u4ee5\u53ca\u6df7\u5408\u6807\u7b7e\u7684\u5305\u4e2d\u62bd\u53d6\uff0c\u56e0\u4e3a\u65e0\u8bba\u4ece\u6807\u7b7e\u4e3aA\u8fd8\u662fB\u7684\u5305\u4e2d\u62bd\u53d6\u5747\u65e0\u6cd5\u786e\u5b9a\u5305\u91cc\u9762\u7684\u7269\u54c1\uff0c\u6240\u4ee5\u8bf4\u660e\u8981\u4ece\u6807\u7b7e\u4e3a\u6df7\u5408\u7684\u5305\u4e2d\u62bd\u53d6\uff0c\u5047\u8bbe\u62bd\u53d6\u7269\u54c1\u4e3aA\uff0c\u90a3\u4e48\u6807\u7b7e\u4e3aA\u7684\u5305\u91cc\u9762\u88c5\u7684\u4e00\u5b9a\u662fB\uff0c\u6807\u7b7e\u4e3aB\u7684\u5305\u4e2d\u4e3a\u6df7\u5408\u7269\u54c1\u3002</p>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/Brain_Teaser/#_22","title":"\u6a21\u8fd0\u7b97","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/Brain_Teaser/#_23","title":"\u53d8\u8272\u9f99","text":"<p>\u4e00\u4e2a\u5c9b\u4e0a\u6709\u4e09\u79cd\u989c\u8272\u7684\u53d8\u8272\u9f99\uff0c\u5206\u522b\u4e3a13\u6761\u7ea2\u8272\uff0c15\u6761\u84dd\u8272\uff0c17\u6761\u7eff\u8272\uff0c\u5047\u8bbe\u4efb\u610f\u4e24\u79cd\u4e0d\u540c\u989c\u8272\u7684\u53d8\u8272\u9f99\u76f8\u9047\u540e\u90fd\u4f1a\u53d8\u6210\u53e6\u4e00\u79cd\u989c\u8272\uff0c\u76f8\u540c\u989c\u8272\u53d8\u8272\u9f99\u76f8\u9047\u989c\u8272\u4e0d\u53d8\uff0c\u8bf7\u95ee\u6700\u7ec8\u53d8\u8272\u9f99\u4f1a\u53d8\u4e3a\u540c\u4e00\u79cd\u989c\u8272\u5417\uff1f</p> <p>Solution:</p> <p>:one:\u7b80\u5355\u89e3\u6cd5\uff1a\u6613\u77e5\u6570\u76ee\u7ec4\u5408\u4e3a(x,y,z)\u7684\u53d8\u8272\u9f99\u548c\u6570\u76ee\u7ec4\u5408\u4e3a(x+1,y+1,z+1)\u7684\u60c5\u5f62\u662f\u76f8\u540c\u7684\uff0c\u90a3\u4e48\u9898\u76ee\u4e2d\u7684\u7ea2\u3001\u84dd\u3001\u7eff\u53d8\u8272\u9f99\u7ec4\u5408\u7b49\u4ef7\u4e8e(0,2,4)\uff0c\u989c\u8272\u7ec4\u5408\u4e3a(0,2,4)\u7684\u53d8\u8272\u9f99\u53ef\u4ee5\u5f97\u5230\u7684\u989c\u8272\u7ec4\u5408\u4e3a(1,2,3)\u548c(0,1,5)\uff0c\u65e0\u6cd5\u53d8\u6210\u540c\u4e00\u79cd\u989c\u8272\uff1b</p> <p>:two:\u901a\u7528\u89e3\u6cd5\uff1a\u5047\u5b9aa,b,c\u8868\u793a\u4e09\u79cd\u4e0d\u540c\u989c\u8272\u7684\u53d8\u8272\u9f99\u7684\u6570\u76ee\uff0c\u5982\u679c\\(a-n=b+2n\\)\uff0c\u90a3\u4e48\u6700\u7ec8\u53d8\u8272\u9f99\u5c06\u53ef\u4ee5\u540c\u8272\uff0c\u8fd9\u8981\u6c42a,b\u7684\u5dee\u4e3a3\u7684\u500d\u6570\uff0c\u4e14c\u4e0d\u5c0f\u4e8e\u6b64\u5dee\u503c\u7684\\(\\frac{1}{3}\\)\u3002</p>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/HR%E9%9D%A2/","title":"HR\u9762","text":"<ul> <li>\u63cf\u8ff0\u81ea\u5df1\u6700\u7a81\u51fa\u76843\u4e2a\u7279\u70b9</li> <li>\u6700\u559c\u6b22\u54ea\u6bb5\u5b9e\u4e60</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-python%E6%98%93%E7%8A%AF%E9%94%99%E8%AF%AF/","title":"\u4ee3\u7801-python\u6613\u72af\u9519\u8bef","text":"<ul> <li>\u4ee3\u7801-python\u6613\u72af\u9519\u8bef</li> </ul> <ul> <li>abs\u51fd\u6570\u4e0d\u652f\u6301list</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E4%BA%8C%E5%88%86%E6%B3%95/","title":"\u4ee3\u7801-\u4e8c\u5206\u6cd5","text":"<ul> <li>\u4ee3\u7801-\u4e8c\u5206\u6cd5<ul> <li>\u9898\u76ee\u4ecb\u7ecd</li> <li>\u9898\u76ee<ul> <li>704. \u4e8c\u5206\u67e5\u627e</li> <li>35. \u641c\u7d22\u63d2\u5165\u4f4d\u7f6e</li> <li>34. \u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e</li> <li>69. x \u7684\u5e73\u65b9\u6839</li> <li>367. \u6709\u6548\u7684\u5b8c\u5168\u5e73\u65b9\u6570</li> </ul> </li> </ul> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E4%BA%8C%E5%88%86%E6%B3%95/#_1","title":"\u9898\u76ee\u4ecb\u7ecd","text":"<p>\u9898\u76ee\u5173\u952e\u8bcd\uff1a\u5347\u5e8f\u6570\u7ec4\uff0c\u662f\u5426\u6709\u91cd\u590d\u6570\u5b57</p> <p>(1) \u9009\u62e9\u5de6\u95ed\u53f3\u95ed\u533a\u95f4<code>left=0,right=n-1</code>\u5219\u5faa\u73af\u7ec8\u6b62\u6761\u4ef6\u4e3a<code>left&gt;right</code>\uff0c\u5373\u5faa\u73af\u6761\u4ef6\u4e3a<code>while left&lt;=right</code>;</p> <p>(2) \u9009\u62e9\u5de6\u95ed\u53f3\u5f00\u533a\u95f4<code>left=0,right=n</code>\u5219\u5faa\u73af\u7ec8\u6b62\u6761\u4ef6\u4e3a<code>left&gt;=right</code>\uff0c\u5373\u5faa\u73af\u6761\u4ef6\u4e3a<code>while left&lt;right</code>\uff0c\u5e76\u4e14mid\u7684\u66f4\u6539\u4e5f\u9700\u8981\u66f4\u6539;</p> <p>==\u59cb\u7ec8\u9009\u62e9(1)\u5de6\u95ed\u53f3\u5f00\u533a\u95f4\u7684\u505a\u6cd5\uff01\u6bd4\u8f83\u7b26\u5408\u76f4\u89c9==</p> <ol> <li>\u7b80\u5355\u4e8c\u5206\u67e5\u627e\uff1a\u5206\u4e09\u79cd\u60c5\u51b5\uff0c=\uff0c&gt;\uff0c&lt;</li> <li>\u627e\u5230\u5347\u5e8f\u6570\u7ec4\u4e2d\u5927\u4e8e\u7b49\u4e8etarget\u7684\u6700\u5c0f\u5143\u7d20\u4e0b\u6807\uff08\u6ce8\u610f\u53ef\u80fd\u5b58\u5728\u76f8\u540c\u5143\u7d20\u7684\u60c5\u51b5\uff09\uff1a&gt;\uff0c&lt;\u60c5\u51b5\u4e0d\u53d8\uff0c\u4f46\u662f=\u60c5\u51b5\u4e0d\u540c\uff0c\u6b64\u65f6\u5e94\u8be5right=mid-1\uff08\u56e0\u4e3a\u53ef\u80fd\u5b58\u5728\u76f8\u540c\u5143\u7d20\uff0c\u76f8\u7b49\u65f6\u8fd8\u9700\u8981\u5728\u5de6\u8fb9\u7ee7\u7eed\u67e5\u627e\uff09</li> </ol> <p>\u9996\u5148\u4e8c\u5206\u6cd5\u9002\u7528\u7684\u4e00\u5b9a\u662f\u6392\u5e8f\u6570\u7ec4\uff0c\u5f53\u6570\u7ec4\u53ef\u80fd\u5b58\u5728\u91cd\u590d\u5143\u7d20\u65f6\u9700\u8981\u4f7f\u7528\u627e\u5927\u4e8e\u7b49\u4e8etarget\u7684\u6700\u5c0f\u8fb9\u754c\uff0c\u5f53\u6570\u7ec4\u4e0d\u5b58\u5728\u91cd\u590d\u5143\u7d20\u65f6\u76f4\u63a5\u4e09\u4e2a\u6761\u4ef6\u5224\u65ad\u5c31\u53ef\u4ee5\uff0c\u6ce8\u610f\u8fd4\u56de\u503c\u53ef\u80fd\u662fleft\u4e5f\u53ef\u80fd\u662fright\uff0c\u53d6\u51b3\u4e8e\u9700\u8981\u627e\u5927\u4e8e\u8fd8\u662f\u5c0f\u4e8etarget\u7684\u4e0b\u6807\uff0c==\u4e0d\u5b58\u5728\u7b49\u5f0f\u6210\u7acb\u7684\u4e0b\u6807\u65f6\uff0c\u603b\u662f\u6709left&gt;target,right&lt;target==</p>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E4%BA%8C%E5%88%86%E6%B3%95/#_2","title":"\u9898\u76ee","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E4%BA%8C%E5%88%86%E6%B3%95/#704","title":"704. \u4e8c\u5206\u67e5\u627e","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u7b80\u5355\u4e8c\u5206\u67e5\u627e\uff0c\u5206\u4e09\u79cd\u60c5\u51b5</li> </ul> <pre><code>class Solution:\n  def search(self, nums: List[int], target: int) -&gt; int:\n      left_id = 0\n      right_id = len(nums) - 1\n      while left_id &lt;= right_id:\n          mid_id = (right_id - left_id) // 2 + left_id\n          if target &gt; nums[mid_id]:\n              left_id = mid_id + 1\n          elif target &lt; nums[mid_id]:\n              right_id = mid_id - 1\n          else:\n              return mid_id\n    return -1\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E4%BA%8C%E5%88%86%E6%B3%95/#35","title":"35. \u641c\u7d22\u63d2\u5165\u4f4d\u7f6e","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u5206\u4e09\u79cd\u60c5\u51b5\uff0c\u76f8\u7b49\u65f6\u8fd4\u56demid\uff0c\u5426\u5219right\u6216left\u6539\u53d8\uff0c\u6700\u7ec8\u8fd4\u56deleft\uff08\u56e0\u4e3a\u7ec8\u6b62\u6761\u4ef6\u662fleft&gt;right\uff0c\u5e76\u4e14==\u6700\u7ec8\u4e00\u5b9a\u662f\u9700\u8981\u63d2\u5165\u5143\u7d20\u4f4d\u4e8e<code>[nums[right]], nums[left]]</code>\u4e4b\u95f4\uff0c\u5373\u4f7f\u76ee\u6807\u4f4d\u4e8e\u6240\u6709\u5143\u7d20\u4e4b\u524d\u6216\u8005\u4e4b\u540e\uff0c\u6b64\u6761\u4ef6\u90fd\u6ee1\u8db3==\u3002</li> </ul> <pre><code>class Solution:\n  def searchInsert(self, nums: List[int], target: int) -&gt; int:\n          left_id = 0\n          right_id = len(nums) - 1\n          while left_id &lt;= right_id:\n              mid_id = left_id + (right_id - left_id) // 2\n          if nums[mid_id] &gt; target:\n              right_id = mid_id - 1 \n          elif nums[mid_id] &lt; target:\n              left_id = mid_id + 1\n          else:\n              return mid_id\n          return right_id + 1\n</code></pre> <ul> <li>\u5206\u4e24\u79cd\u60c5\u51b5\uff0c\u5c06\u7b49\u4e8e\u7684\u65f6\u5019right=mid-1\u5408\u5e76\uff08\u8fd9\u79cd\u65b9\u5f0f\u5bf9\u4e8e\u6709\u91cd\u590d\u5143\u7d20\u7684\u60c5\u51b5\u4ecd\u7136\u9002\u7528\uff0c\u56e0\u4e3a\u76f8\u7b49\u65f6\u4ecd\u7136\u9700\u8981\u5230\u5de6\u8fb9\u67e5\u627e\u662f\u5426\u5b58\u5728\u76f8\u7b49\u5143\u7d20\uff09\uff0c==\u7b49\u4ef7\u4e8e\u627e\u5927\u4e8e\u7b49\u4e8e\u76ee\u6807\u503c\u7684\u6700\u5c0f\u4e0b\u6807==</li> </ul> <pre><code>class Solution:\n  def searchInsert(self, nums: List[int], target: int) -&gt; int:\n      left_id = 0\n      right_id = len(nums) - 1\n      while left_id &lt;= right_id:\n          mid_id = left_id + (right_id - left_id) // 2\n          if nums[mid_id] &gt;= target:\n              right_id = mid_id - 1 \n          elif nums[mid_id] &lt; target:\n              left_id = mid_id + 1\n      return right_id + 1\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E4%BA%8C%E5%88%86%E6%B3%95/#34","title":"34. \u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u672c\u9898\u9700\u8981\u8f6c\u5316\u4e3a\u627e\u5230\u5927\u4e8e\u7b49\u4e8e\u76ee\u6807\u503c\u7684\u7b2c\u4e00\u4e2a\u4e0b\u6807\uff0c\u4ee5\u53ca\u5927\u4e8e\u7b49\u4e8e\u76ee\u6807\u503c\u52a0\u4e00\u7684\u7b2c\u4e00\u4e2a\u4e0b\u6807\u3002\u53e6\u4e00\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u70b9\u662f\u76ee\u6807\u4e0d\u5728\u6570\u7ec4\u4e2d\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u9a8c\u8bc1\u65e0\u8bba\u76ee\u6807\u6bd4\u6570\u7ec4\u6240\u6709\u6570\u5b57\u90fd\u5c0f\u6216\u8005\u90fd\u5927\u65f6\uff0c\u5f97\u5230\u7684<code>left_id</code>\u5747\u5c0f\u4e8e<code>right_id</code>\uff0c\u800c\u5f53\u76ee\u6807\u4ec5\u6709\u4e00\u4e2a\u65f6\uff0c<code>left_id=right_id</code>\uff0c\u76ee\u6807\u6709\u591a\u4e2a\u65f6\uff0c<code>left_id&lt;right_id</code>\u3002</li> </ul> <pre><code>class Solution:\n    def searchRange(self, nums: List[int], target: int) -&gt; List[int]:\n        def binarySearch(nums, target):\n            left, right = 0, len(nums) - 1\n            while left &lt;= right:\n                mid = (left + right) // 2\n                if nums[mid] &gt;= target:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            return left\n        left_id = binarySearch(nums, target)\n        right_id = binarySearch(nums, target + 1) - 1\n        return [left_id, right_id] if left_id &lt;= right_id else [-1, -1]\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E4%BA%8C%E5%88%86%E6%B3%95/#69-x","title":"69. x \u7684\u5e73\u65b9\u6839","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>==\u8fd9\u9053\u9898\u8001\u662f\u51fa\u9519==\uff0c\u5176\u5b9e\u8fd9\u9053\u9898\u548c\u5bfb\u627e\u5347\u5e8f\u6570\u7ec4\u4e2d\u5927\u4e8e\u7b49\u4e8e\u67d0\u4e2a\u6570\u7684\u7b2c\u4e00\u4e2a\u6570\u7c7b\u4f3c\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u6ee1\u8db3\u7b49\u5f0f\u7684mid\uff0c\u6b64\u65f6\u6700\u7ec8\u5faa\u73af\u7ec8\u6b62\u6761\u4ef6\u90fd\u662fleft&gt;target\uff0cright&lt;target\uff0c\u5bf9\u5e94\u5230\u672c\u9898\u5c31\u662f<code>left*left&gt;target, right*right&lt;target</code>\uff0c\u53ea\u4e0d\u8fc7\u672c\u9898\u9700\u8981\u8fd4\u56deright\u3002</li> </ul> <pre><code>class Solution:\n    def mySqrt(self, x: int) -&gt; int:\n        left, right = 0, x\n        while left &lt;= right:\n            mid = (left + right) // 2\n            if mid * mid &gt; x:\n                right = mid - 1\n            elif mid * mid &lt; x:\n                left = mid + 1\n            else:\n                return mid\n        return right\n</code></pre> <ul> <li>\u725b\u987f\u6cd5\uff1a\u8fd9\u4e2a\u95ee\u9898\u5176\u5b9e\u5c31\u662f\u6c42\\(f(x)=num - x ^ 2\\)\u7684\u96f6\u70b9\u3002\u5df2\u77e5\u725b\u987f\u6cd5\u9012\u63a8\u516c\u5f0f\uff1a\\(X_{n+1} = X_n - f(X_n)/f'(X_n)\\).\u5e26\u5165\\(f'(x) = -2x\\). \u5f97\uff1a \\(X_{n+1} = X_n +(num - X_n ^ 2)/2X_n = (num + X_n ^ 2) / 2X_n = (num / X_n + X_n) / 2\\).\u7528\u4ee3\u7801\u8868\u793a\u5219\u4e3a\\(num = (num + x / num) / 2\\).</li> </ul> <pre><code>class Solution(object):\n    def mySqrt(self, x):\n        num = x\n        while num * num &gt; x:\n            num = (num + x // num) // 2\n        return num\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E4%BA%8C%E5%88%86%E6%B3%95/#367","title":"367. \u6709\u6548\u7684\u5b8c\u5168\u5e73\u65b9\u6570","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u8ddf69. x \u7684\u5e73\u65b9\u6839 \u601d\u8def\u4e00\u6837\u3002</li> </ul> <pre><code>class Solution:\n    def isPerfectSquare(self, num: int) -&gt; bool:\n        left, right = 1, num\n        while left &lt;= right:\n            mid = (left + right) // 2\n            if mid * mid &lt; num:\n                left = mid + 1\n            elif mid * mid &gt; num:\n                right = mid - 1\n            else:\n                return True\n        return False\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E4%BA%8C%E5%8F%89%E6%A0%91/","title":"\u4ee3\u7801-\u4e8c\u53c9\u6811","text":"<ul> <li>\u4ee3\u7801-\u4e8c\u53c9\u6811<ul> <li>\u6982\u8ff0<ul> <li>\u91cd\u70b9</li> <li>\u4e8c\u53c9\u6811\u9898\u76ee\u6613\u9519\u70b9</li> <li>\u4e8c\u53c9\u6811\u7684\u79cd\u7c7b</li> <li>\u4e8c\u53c9\u6811\u7684\u5b58\u50a8\u65b9\u5f0f</li> <li>\u4e8c\u53c9\u6811\u7684\u904d\u5386\u65b9\u5f0f</li> </ul> </li> <li>\u9898\u76ee<ul> <li>144. \u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386<ul> <li>\u524d\u5e8f\u76f4\u63a5\u9012\u5f52</li> <li>\u524d\u5e8f\u4f7f\u7528dfs\u9012\u5f52</li> <li>\u524d\u5e8f\u4e0d\u4f7f\u7528\u6307\u9488\u8fed\u4ee3</li> <li>\u524d\u5e8f\u4f7f\u7528\u6307\u9488\u8fed\u4ee3</li> </ul> </li> <li>145. \u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386<ul> <li>\u540e\u5e8f\u76f4\u63a5\u9012\u5f52</li> <li>\u540e\u5e8f\u4f7f\u7528dfs\u9012\u5f52</li> <li>\u540e\u5e8f\u4e0d\u4f7f\u7528\u6307\u9488\u8fed\u4ee3</li> <li>\u540e\u5e8f\u4f7f\u7528\u6307\u9488\u8fed\u4ee3</li> </ul> </li> <li>94. \u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386<ul> <li>\u4e2d\u5e8f\u76f4\u63a5\u9012\u5f52</li> <li>\u4e2d\u5e8f\u4f7f\u7528dfs\u9012\u5f52</li> <li>\u4e2d\u5e8f\u4f7f\u7528\u6307\u9488\u8fed\u4ee3</li> </ul> </li> <li>102. \u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386<ul> <li>\u5c42\u5e8f\u9012\u5f52</li> <li>\u5c42\u5e8f\u8fed\u4ee3</li> </ul> </li> <li>199.\u4e8c\u53c9\u6811\u7684\u53f3\u89c6\u56fe</li> <li>637.\u4e8c\u53c9\u6811\u7684\u5c42\u5e73\u5747\u503c</li> <li>429. N\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386</li> <li>515. \u5728\u6bcf\u4e2a\u6811\u884c\u4e2d\u627e\u6700\u5927\u503c</li> </ul> </li> </ul> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E4%BA%8C%E5%8F%89%E6%A0%91/#_1","title":"\u6982\u8ff0","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E4%BA%8C%E5%8F%89%E6%A0%91/#_2","title":"\u91cd\u70b9","text":"<ul> <li>\u9700\u8981\u8bb0\u4f4f\u7684\u904d\u5386\u65b9\u5f0f\uff1a</li> </ul> \u524d\u5e8f\u904d\u5386 \u540e\u5e8f\u904d\u5386 \u4e2d\u5e8f\u904d\u5386 \u5c42\u5e8f\u904d\u5386 \u9012\u5f52 \u76f4\u63a5\u9012\u5f52\u4f7f\u7528<code>dfs</code>\u51fd\u6570\u9012\u5f52 \u76f4\u63a5\u9012\u5f52\u4f7f\u7528<code>dfs</code>\u51fd\u6570\u9012\u5f52 \u76f4\u63a5\u9012\u5f52\u4f7f\u7528<code>dfs</code>\u51fd\u6570\u9012\u5f52 \u4f7f\u7528<code>bfs</code>\u51fd\u6570\u9012\u5f52 \u8fed\u4ee3 \u4e0d\u4f7f\u7528\u6307\u9488\u4f7f\u7528\u6307\u9488\u7684\u901a\u7528\u6a21\u677f \u4e0d\u4f7f\u7528\u6307\u9488\u4f7f\u7528\u6307\u9488\u7684\u901a\u7528\u6a21\u677f \u4f7f\u7528\u6307\u9488\u7684\u901a\u7528\u6a21\u677f \u4f7f\u7528<code>deque/list</code>\u8fed\u4ee3"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E4%BA%8C%E5%8F%89%E6%A0%91/#_3","title":"\u4e8c\u53c9\u6811\u9898\u76ee\u6613\u9519\u70b9","text":"<ul> <li>\u9700\u8981\u6ce8\u610f\u4e8c\u53c9\u6811\u8282\u70b9\u6570\u76ee\u662f\u5426\u53ef\u80fd\u4e3a0\uff0c\u5982\u679c\u8282\u70b9\u6570\u76ee\u4e3a0\u5f80\u5f80\u9700\u8981\u5355\u72ec\u5224\u65ad\uff1b</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E4%BA%8C%E5%8F%89%E6%A0%91/#_4","title":"\u4e8c\u53c9\u6811\u7684\u79cd\u7c7b","text":"<ul> <li>\u6ee1\u4e8c\u53c9\u6811\uff1a\u9664\u4e86\u6700\u540e\u4e00\u5c42\u5916\u5176\u4ed6\u5c42\u6240\u6709\u8282\u70b9\u90fd\u5305\u542b\u4e24\u4e2a\u5b50\u8282\u70b9\uff0c\u4e14\u6700\u540e\u4e00\u5c42\u6240\u6709\u8282\u70b9\u90fd\u6ca1\u6709\u5b50\u8282\u70b9\uff08\u6df1\u5ea6\u4e3ak\u7684\u6ee1\u4e8c\u53c9\u6811\u5305\u542b\\(2^k-1\\)\u4e2a\u8282\u70b9\uff09</li> <li>\u5b8c\u5168\u4e8c\u53c9\u6811\uff1a\u5728\u5b8c\u5168\u4e8c\u53c9\u6811\u4e2d\uff0c\u9664\u4e86\u6700\u5e95\u5c42\u8282\u70b9\u53ef\u80fd\u6ca1\u586b\u6ee1\u5916\uff0c\u5176\u4f59\u6bcf\u5c42\u8282\u70b9\u6570\u90fd\u8fbe\u5230\u6700\u5927\u503c\uff0c\u5e76\u4e14\u6700\u4e0b\u9762\u4e00\u5c42\u7684\u8282\u70b9\u90fd\u96c6\u4e2d\u5728\u8be5\u5c42\u6700\u5de6\u8fb9\u7684\u82e5\u5e72\u4f4d\u7f6e\u3002\u82e5\u6700\u5e95\u5c42\u4e3a\u7b2c h \u5c42\uff0c\u5219\u8be5\u5c42\u5305\u542b \\([1, 2^{h-1}]\\) \u4e2a\u8282\u70b9\u3002</li> <li>\u4e8c\u53c9\u641c\u7d22\u6811\uff1a\u82e5\u5b83\u7684\u5de6\u5b50\u6811\u4e0d\u7a7a\uff0c\u5219\u5de6\u5b50\u6811\u4e0a\u6240\u6709\u7ed3\u70b9\u7684\u503c\u5747\u5c0f\u4e8e\u5b83\u7684\u6839\u7ed3\u70b9\u7684\u503c\uff1b\u82e5\u5b83\u7684\u53f3\u5b50\u6811\u4e0d\u7a7a\uff0c\u5219\u53f3\u5b50\u6811\u4e0a\u6240\u6709\u7ed3\u70b9\u7684\u503c\u5747\u5927\u4e8e\u5b83\u7684\u6839\u7ed3\u70b9\u7684\u503c\uff1b\u5b83\u7684\u5de6\u3001\u53f3\u5b50\u6811\u4e5f\u5206\u522b\u4e3a\u4e8c\u53c9\u6392\u5e8f\u6811</li> <li>\u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811\uff1a\u5b83\u662f\u4e00\u68f5\u7a7a\u6811\u6216\u5b83\u7684\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc71\uff0c\u5e76\u4e14\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u90fd\u662f\u4e00\u68f5\u5e73\u8861\u4e8c\u53c9\u6811</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E4%BA%8C%E5%8F%89%E6%A0%91/#_5","title":"\u4e8c\u53c9\u6811\u7684\u5b58\u50a8\u65b9\u5f0f","text":"<ul> <li>\u94fe\u5f0f\u5b58\u50a8\uff1a\u7c7b\u4f3c\u4e8e\u94fe\u8868\uff0cpython\u5b9a\u4e49\u4e8c\u53c9\u6811\uff1a</li> </ul> <pre><code>class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n</code></pre> <ul> <li>\u987a\u5e8f\u5b58\u50a8\uff1a\u7b49\u4ef7\u4e8e\u5c42\u5e8f\u904d\u5386\uff0c\u5bf9\u4e8e\u6ee1\u4e8c\u53c9\u6811\uff0c\u6b64\u65f6\u5982\u679c\u7236\u8282\u70b9\u7684\u6570\u7ec4\u4e0b\u6807\u662f<code>i</code>\uff0c\u90a3\u4e48\u5de6\u53f3\u5b50\u8282\u70b9\u7684\u4e0b\u6807\u5206\u522b\u662f<code>2i+1</code>\u548c<code>2i+2</code></li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E4%BA%8C%E5%8F%89%E6%A0%91/#_6","title":"\u4e8c\u53c9\u6811\u7684\u904d\u5386\u65b9\u5f0f","text":"<ul> <li> <p>\u4e8c\u53c9\u6811\u7684\u904d\u5386\u65b9\u5f0f\u53ef\u4ee5\u5206\u4e3a<code>\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff08depth-first search,DFS\uff09</code>\u548c<code>\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff08breadth-first search,BFS\uff09</code>\u4e24\u79cd\uff0c\u5176\u4e2d\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u5305\u542b\u524d/\u4e2d/\u540e\u5e8f\u904d\u5386\uff0c\u8fd9\u91cc\u524d/\u4e2d/\u540e\u5e8f\u904d\u5386\u90fd\u662f\u6307\u7236\u8282\u70b9\u76f8\u5bf9\u5de6\u53f3\u5b50\u8282\u70b9\u7684\u4f4d\u7f6e\u800c\u8a00\uff0c\u4f8b\u5982\u524d\u5e8f\u5bf9\u5e94<code>\u4e2d\u5de6\u53f3</code>\uff1b\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u79f0\u4e3a\u5c42\u5e8f\u904d\u5386\uff1b\u9996\u5148\u524d/\u4e2d/\u540e\u5e8f\u904d\u5386\u53ef\u4ee5\u91c7\u7528\u9012\u5f52\u548c\u8fed\u4ee3\u7684\u65b9\u5f0f\u5b9e\u73b0\uff0c\u5176\u4e2d\u9012\u5f52\u5b9e\u73b0\u65f6\u4e09\u79cd\u904d\u5386\u4ee3\u7801\u5f62\u5f0f\u7c7b\u4f3c\uff0c\u800c\u91c7\u7528\u8fed\u4ee3\u65f6\u6709\u4e0d\u540c\u7684\u5b9e\u73b0\u65b9\u5f0f\uff1b\u5c42\u5e8f\u904d\u5386\u540c\u6837\u4e5f\u53ef\u4ee5\u91c7\u7528\u9012\u5f52\u548c\u8fed\u4ee3\u4e24\u79cd\u65b9\u5f0f\u5b9e\u73b0\u3002</p> </li> <li> <p>\u524d/\u4e2d/\u540e\u5e8f\u904d\u5386</p> </li> <li> <p>\u9012\u5f52\u5b9e\u73b0\uff1a\u7528\u76f8\u4f3c\u7684\u9012\u5f52\u4ee3\u7801\u5f62\u5f0f\u53ef\u4ee5\u5b9e\u73b0\u524d/\u4e2d/\u540e\u5e8f\u904d\u5386\u3002\u5f53\u78b0\u5230\u7a7a\u8282\u70b9\u65f6\u8fd4\u56de\uff0c\u5426\u5219\u5206\u522b\u5bf9\u5de6\u5b50\u8282\u70b9\u548c\u53f3\u5b50\u8282\u70b9\u8fdb\u884c\u904d\u5386\uff0c\u6309\u7167\u904d\u5386\u987a\u5e8f\u8fd4\u56de\u7ed3\u679c</p> <pre><code># \u7b2c\u4e00\u79cd\n# \u524d\u5e8f\u904d\u5386\nclass Solution:\n    def preorderTraversal(self, root: Optional[TreeNode]) -&gt; List[int]:\n        if not root:\n            return []\n        left = self.preorderTraversal(root.left)\n        right = self.preorderTraversal(root.right)\n        return [root.val] + left + right\n\n# \u4e2d\u5e8f\u904d\u5386\nclass Solution:\n    def inorderTraversal(self, root: Optional[TreeNode]) -&gt; List[int]:\n        if not root:\n            return []\n        left = self.inorderTraversal(root.left)\n        right = self.inorderTraversal(root.right)\n        return left + [root.val] + right\n\n# \u540e\u5e8f\u904d\u5386\nclass Solution:\n    def postorderTraversal(self, root: Optional[TreeNode]) -&gt; List[int]:\n        if not root:\n            return []\n        left = self.postorderTraversal(root.left)\n        right = self.postorderTraversal(root.right)\n        return left + right + [root.val]\n\n# \u7b2c\u4e8c\u79cd\n# \u524d\u5e8f\u904d\u5386\nclass Solution:\n    def preorderTraversal(self, root: Optional[TreeNode]) -&gt; List[int]:\n        def dfs(node):\n            nonlocal res\n            if not node:\n                return\n            res.append(node.val)\n            dfs(node.left)\n            dfs(node.right)\n        res = []\n        dfs(root)\n        return res\n\n# \u8003\u8651python\u7684\u8bed\u8a00\u7279\u6027,\u51fd\u6570\u4f20\u53c2\u8fc7\u7a0b\u4e2d\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4f1a\u88ab\u66f4\u6539\nclass Solution:\n    def preorderTraversal(self, root: Optional[TreeNode]) -&gt; List[int]:\n        def dfs(node, res):\n            if not node:\n                return\n            res.append(node.val)\n            dfs(node.left, res)\n            dfs(node.right, res)\n\n        res = []\n        dfs(root, res)\n        return res\n\n# \u4e2d\u5e8f\u904d\u5386\nclass Solution:\n    def inorderTraversal(self, root: Optional[TreeNode]) -&gt; List[int]:\n        def dfs(node):\n            nonlocal res\n            if not node:\n                return\n            dfs(node.left)\n            res.append(node.val)\n            dfs(node.right)\n        res = []\n        dfs(root)\n        return res\n\n# \u8003\u8651python\u7684\u8bed\u8a00\u7279\u6027,\u51fd\u6570\u4f20\u53c2\u8fc7\u7a0b\u4e2d\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4f1a\u88ab\u66f4\u6539\nclass Solution:\n    def inorderTraversal(self, root: Optional[TreeNode]) -&gt; List[int]:\n        def dfs(node, res):\n            if not node:\n                return\n            dfs(node.left, res)\n            res.append(node.val)\n            dfs(node.right, res)\n\n        res = []\n        dfs(root, res)\n        return res\n\n# \u540e\u5e8f\u904d\u5386\nclass Solution:\n    def postorderTraversal(self, root: Optional[TreeNode]) -&gt; List[int]:\n        def dfs(node):\n            nonlocal res\n            if not node:\n                return\n            dfs(node.left)\n            dfs(node.right)\n            res.append(node.val)\n        res = []\n        dfs(root)\n        return res\n\n# \u8003\u8651python\u7684\u8bed\u8a00\u7279\u6027,\u51fd\u6570\u4f20\u53c2\u8fc7\u7a0b\u4e2d\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4f1a\u88ab\u66f4\u6539\nclass Solution:\n    def postorderTraversal(self, root: Optional[TreeNode]) -&gt; List[int]:\n        def dfs(node, res):\n            if not node:\n                return\n            dfs(node.left, res)\n            dfs(node.right, res)\n            res.append(node.val)\n\n        res = []\n        dfs(root, res)\n        return res\n</code></pre> </li> <li> <p>\u8fed\u4ee3\u5b9e\u73b01\uff1a\u524d\u5e8f\u548c\u540e\u7eed\u4ee3\u7801\u5f62\u5f0f\u7c7b\u4f3c\uff0c\u6ca1\u6709\u7c7b\u4f3c\u5f62\u5f0f\u7684\u4e2d\u5e8f\u904d\u5386\uff08\u56e0\u4e3a\u540e\u5e8f\u76f8\u6bd4\u524d\u5e8f\u5c31\u662f\u5de6\u53f3\u8282\u70b9\u5165\u6808\u987a\u5e8f\u6539\u53d8\uff0c\u7136\u540e\u5bf9\u8fd4\u56de\u5217\u8868\u7ffb\u8f6c\uff09\u3002\u5bf9\u4e8e\u524d\u5e8f\u904d\u5386\uff0c\u6bcf\u6b21\u5c06\u5f53\u524d\u8282\u70b9\u6dfb\u52a0\u5230\u7ed3\u679c\u5217\u8868\u4e2d\uff0c\u7136\u540e\u6309\u7167\u5148\u52a0\u5165\u53f3\u5b50\u8282\u70b9\u518d\u5de6\u5b50\u8282\u70b9\u7684\u65b9\u5f0f\u5c06\u5b50\u8282\u70b9\u52a0\u5165\u5230\u6808\u4e2d\u3002\u5bf9\u4e8e\u540e\u7eed\u904d\u5386\uff0c\u6bcf\u6b21\u5c06\u5f53\u524d\u8282\u70b9\u6dfb\u52a0\u5230\u7ed3\u679c\u5217\u8868\u4e2d\uff0c\u7136\u540e\u6309\u7167\u5148\u52a0\u5165\u5de6\u5b50\u8282\u70b9\u518d\u53f3\u5b50\u8282\u70b9\u7684\u65b9\u5f0f\u5c06\u5b50\u8282\u70b9\u52a0\u5165\u5230\u6808\u4e2d\uff0c\u6700\u540e\u8f93\u51fa\u5217\u8868\u7ffb\u8f6c\u3002</p> <pre><code># \u524d\u5e8f\u904d\u5386\nclass Solution:\n    def preorderTraversal(self, root: Optional[TreeNode]) -&gt; List[int]:\n        if not root:\n            return []\n        res = []\n        stk = [root]\n        while stk:\n            node = stk.pop()\n            res.append(node.val)\n            if node.right:\n                stk.append(node.right)\n            if node.left:\n                stk.append(node.left)\n        return res\n\n# \u540e\u7eed\u904d\u5386\nclass Solution:\n    def postorderTraversal(self, root: Optional[TreeNode]) -&gt; List[int]:\n        if not root:\n            return []\n        res = []\n        stk = [root]\n        while stk:\n            node = stk.pop()\n            res.append(node.val)\n            if cur.left:\n                stk.append(node.left)\n            if node.right:\n                stk.append(node.right)\n        return res[::-1]\n</code></pre> </li> <li> <p>\u8fed\u4ee3\u5b9e\u73b02\uff1a\u7528\u76f8\u4f3c\u7684\u4ee3\u7801\u5f62\u5f0f\u5b9e\u73b0\u524d/\u4e2d/\u540e\u5e8f\u904d\u5386\u3002==\u5229\u7528\u6307\u9488==\u3002\u5bf9\u4e8e\u524d\u5e8f\u904d\u5386\uff0c\u5982\u679c\u6307\u9488\u975e\u7a7a\uff0c\u5219\u4e0d\u65ad\u628a\u5934\u8282\u70b9\u52a0\u5165\u7ed3\u679c\u5217\u8868\u4e2d\uff0c\u5e76\u4f7f\u6307\u9488\u6307\u5411\u5de6\u5b50\u8282\u70b9\uff1b\u5f53\u6307\u9488\u6307\u5411\u7a7a\u8282\u70b9\u65f6\uff0c\u6307\u9488\u56de\u9000\u5230\u5934\u8282\u70b9\uff0c\u5e76\u6307\u5411\u53f3\u5b50\u8282\u70b9\uff1b\u5f53\u6808\u548c\u6307\u9488\u90fd\u975e\u7a7a\u7684\u65f6\u5019\uff0c\u6301\u7eed\u4e0a\u8ff0\u5faa\u73af\u3002\u540e\u5e8f\u904d\u5386\u6ce8\u610f\u9700\u8981\u7ffb\u8f6c\u5217\u8868\uff0c\u4e14\u5b50\u8282\u70b9\u5165\u6808\u987a\u5e8f\u4e0e\u524d\u5e8f\u904d\u5386\u76f8\u53cd\u3002==\u8bb0\u4e0b\u6765\uff08\u5b9e\u5728\u60f3\u4e0d\u51fa\u6765\uff09==</p> <pre><code># \u524d\u5e8f\u904d\u5386\nclass Solution:\n    def preorderTraversal(self, root: Optional[TreeNode]) -&gt; List[int]:\n        res = []\n        stack = []\n        cur = root\n        while stack or cur:\n            while cur:\n                res.append(cur.val)\n                stack.append(cur)\n                cur = cur.left\n            cur = stack.pop()\n            cur = cur.right\n        return res\n\n# \u4e2d\u5e8f\u904d\u5386\nclass Solution:\n    def inorderTraversal(self, root: Optional[TreeNode]) -&gt; List[int]:\n        res = []\n        stack = []\n        cur = root\n        while stack or cur:\n            while cur:\n                stack.append(cur)\n                cur = cur.left\n            cur = stack.pop()\n            res.append(cur.val)\n            cur = cur.right\n        return res\n\n# \u540e\u5e8f\u904d\u5386\nclass Solution:\n    def postorderTraversal(self, root: Optional[TreeNode]) -&gt; List[int]:\n        res = []\n        stack = []\n        cur = root\n        while stack or cur:\n            while cur:\n                res.append(cur.val)\n                stack.append(cur)\n                cur = cur.right\n            cur = stack.pop()\n            cur = cur.left\n        return res[::-1]\n</code></pre> </li> <li> <p>\u8fed\u4ee3\u5b9e\u73b03\uff1a\u7528\u76f8\u4f3c\u7684\u4ee3\u7801\u5f62\u5f0f\u5b9e\u73b0\u524d/\u4e2d/\u540e\u5e8f\u904d\u5386\u3002\u4e0d\u4f7f\u7528\u6307\u9488\uff0c\u5728\u9047\u5230\u5934\u8282\u70b9\u540e\u5c06None\u5165\u6808\uff0c\u6548\u679c\u7c7b\u4f3c\u4e8e\u6307\u9488\u3002==\u4e5f\u60f3\u4e0d\u51fa\u6765\uff0c\u4e0d\u7528\u8bb0==</p> <pre><code># \u524d\u5e8f\u904d\u5386\nclass Solution:\n    def preorderTraversal(self, root: TreeNode) -&gt; List[int]:\n        res = []\n        stk = []\n        if root:\n            stk.append(root)\n        while stk:\n            node = stk.pop()\n            if node != None:\n                if node.right: \n                    stk.append(node.right)\n                if node.left: \n                    stk.append(node.left)\n                stk.append(node) \n                stk.append(None)\n            else:\n                node = stk.pop()\n                res.append(node.val)\n        return res\n\n# \u4e2d\u5e8f\u904d\u5386\nclass Solution:\n    def inorderTraversal(self, root: TreeNode) -&gt; List[int]:\n        result = []\n        st = []\n        if root:\n            st.append(root)\n        while st:\n            node = st.pop()\n            if node != None:\n                if node.right: #\u6dfb\u52a0\u53f3\u8282\u70b9\uff08\u7a7a\u8282\u70b9\u4e0d\u5165\u6808\uff09\n                    st.append(node.right)\n\n                st.append(node) #\u6dfb\u52a0\u4e2d\u8282\u70b9\n                st.append(None) #\u4e2d\u8282\u70b9\u8bbf\u95ee\u8fc7\uff0c\u4f46\u662f\u8fd8\u6ca1\u6709\u5904\u7406\uff0c\u52a0\u5165\u7a7a\u8282\u70b9\u505a\u4e3a\u6807\u8bb0\u3002\n\n                if node.left: #\u6dfb\u52a0\u5de6\u8282\u70b9\uff08\u7a7a\u8282\u70b9\u4e0d\u5165\u6808\uff09\n                    st.append(node.left)\n            else: #\u53ea\u6709\u9047\u5230\u7a7a\u8282\u70b9\u7684\u65f6\u5019\uff0c\u624d\u5c06\u4e0b\u4e00\u4e2a\u8282\u70b9\u653e\u8fdb\u7ed3\u679c\u96c6\n                node = st.pop() #\u91cd\u65b0\u53d6\u51fa\u6808\u4e2d\u5143\u7d20\n                result.append(node.val) #\u52a0\u5165\u5230\u7ed3\u679c\u96c6\n        return result\n\n# \u540e\u5e8f\u904d\u5386\nclass Solution:\n    def postorderTraversal(self, root: TreeNode) -&gt; List[int]:\n        result = []\n        st = []\n        if root:\n            st.append(root)\n        while st:\n            node = st.pop()\n            if node != None:\n                st.append(node) #\u4e2d\n                st.append(None)\n\n                if node.right: #\u53f3\n                    st.append(node.right)\n                if node.left: #\u5de6\n                    st.append(node.left)\n            else:\n                node = st.pop()\n                result.append(node.val)\n        return result\n</code></pre> </li> <li> <p>\u5c42\u5e8f\u904d\u5386</p> </li> <li> <p>\u9012\u5f52\u5b9e\u73b0\uff1a</p> <pre><code>class Solution:\n    def levelOrder(self, root: Optional[TreeNode]) -&gt; List[List[int]]:\n        levels = []\n        self.bfs(root, 0, levels)\n        return levels\n\n    def bfs(self, node, level, levels):\n        if not node:\n            return\n        if len(levels) == level:\n            levels.append([])\n        levels[level].append(node.val)\n        self.bfs(node.left, level + 1, levels)\n        self.bfs(node.right, level + 1, levels)\n</code></pre> </li> <li> <p>\u8fed\u4ee3\u5b9e\u73b01\uff1a\u4f7f\u7528\u961f\u5217</p> <pre><code>class Solution:\n    def levelOrder(self, root: Optional[TreeNode]) -&gt; List[List[int]]:\n        if not root:\n            return []\n        queue = deque([root])\n        result = []\n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                cur = queue.popleft()\n                level.append(cur.val)\n                if cur.left:\n                    queue.append(cur.left)\n                if cur.right:\n                    queue.append(cur.right)\n            result.append(level)\n        return result\n</code></pre> </li> <li> <p>\u8fed\u4ee3\u5b9e\u73b02\uff1a\u4f7f\u7528\u6808</p> <pre><code>class Solution:\n    def levelOrder(self, root: TreeNode) -&gt; List[List[int]]:\n        if not root:\n            return []\n        cur_lay, res = [root], []\n        while cur_lay:\n            lay, layval = [], []\n            for node in cur_lay:\n                layval.append(node.val)\n                if node.left: \n                    lay.append(node.left)\n                if node.right: \n                    lay.append(node.right)\n            cur_lay = lay\n            res.append(layval)\n        return res\n</code></pre> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E4%BA%8C%E5%8F%89%E6%A0%91/#_7","title":"\u9898\u76ee","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E4%BA%8C%E5%8F%89%E6%A0%91/#144","title":"144. \u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E4%BA%8C%E5%8F%89%E6%A0%91/#_8","title":"\u524d\u5e8f\u76f4\u63a5\u9012\u5f52","text":"<pre><code>class Solution:\n    def preorderTraversal(self, root: Optional[TreeNode]) -&gt; List[int]:\n        if not root:\n            return []\n        left = self.preorderTraversal(root.left)\n        right = self.preorderTraversal(root.right)\n        return [root.val] + left + right\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E4%BA%8C%E5%8F%89%E6%A0%91/#dfs","title":"\u524d\u5e8f\u4f7f\u7528<code>dfs</code>\u9012\u5f52","text":"<pre><code># \u501f\u52a9python\u51fd\u6570\u4f20\u53c2\u7279\u6027\nclass Solution:\n    def preorderTraversal(self, root: Optional[TreeNode]) -&gt; List[int]:\n        def dfs(node, res):\n            if not node:\n                return\n            res.append(node.val)\n            dfs(node.left, res)\n            dfs(node.right, res)\n        res = []\n        dfs(root, res)\n        return res\n\n# \u5229\u7528nonlocal\u5173\u952e\u5b57\nclass Solution:\n    def preorderTraversal(self, root: Optional[TreeNode]) -&gt; List[int]:\n        def dfs(node):\n            nonlocal res\n            if not node:\n                return\n            res.append(node.val)\n            dfs(node.left)\n            dfs(node.right)\n        res = []\n        dfs(root)\n        return res\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E4%BA%8C%E5%8F%89%E6%A0%91/#_9","title":"\u524d\u5e8f\u4e0d\u4f7f\u7528\u6307\u9488\u8fed\u4ee3","text":"<pre><code>class Solution:\n    def preorderTraversal(self, root: Optional[TreeNode]) -&gt; List[int]:\n        if not root:\n            return []\n        stk, res = [root], []\n        while stk:\n            node = stk.pop()\n            res.append(node.val)\n            if node.right:\n                stk.append(node.right)\n            if node.left:\n                stk.append(node.left)\n        return res\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E4%BA%8C%E5%8F%89%E6%A0%91/#_10","title":"\u524d\u5e8f\u4f7f\u7528\u6307\u9488\u8fed\u4ee3","text":"<pre><code>class Solution:\n    def preorderTraversal(self, root: Optional[TreeNode]) -&gt; List[int]:\n        if not root:\n            return []\n        cur, stk, res = root, [], []\n        while cur or stk:\n            while cur:\n                stk.append(cur)\n                res.append(cur.val)\n                cur = cur.left\n            cur = stk.pop()\n            cur = cur.right\n        return res\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E4%BA%8C%E5%8F%89%E6%A0%91/#145","title":"145. \u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E4%BA%8C%E5%8F%89%E6%A0%91/#_11","title":"\u540e\u5e8f\u76f4\u63a5\u9012\u5f52","text":"<pre><code>class Solution:\n    def postorderTraversal(self, root: Optional[TreeNode]) -&gt; List[int]:\n        if not root:\n            return []\n        left = self.postorderTraversal(root.left)\n        right = self.postorderTraversal(root.right)\n        return left + right + [root.val]\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E4%BA%8C%E5%8F%89%E6%A0%91/#dfs_1","title":"\u540e\u5e8f\u4f7f\u7528<code>dfs</code>\u9012\u5f52","text":"<pre><code># \u501f\u52a9python\u51fd\u6570\u4f20\u53c2\u7279\u6027\nclass Solution:\n    def postorderTraversal(self, root: Optional[TreeNode]) -&gt; List[int]:\n        def dfs(node, res):\n            if not node:\n                return\n            res.append(node.val)\n            dfs(node.right, res)\n            dfs(node.left, res)\n        res = []\n        dfs(root, res)\n        return res[::-1]\n\n# \u5229\u7528nonlocal\u5173\u952e\u5b57\nclass Solution:\n    def postorderTraversal(self, root: Optional[TreeNode]) -&gt; List[int]:\n        def dfs(node):\n            nonlocal res\n            if not node:\n                return\n            res.append(node.val)\n            dfs(node.right)\n            dfs(node.left)\n        res = []\n        dfs(root)\n        return res[::-1]\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E4%BA%8C%E5%8F%89%E6%A0%91/#_12","title":"\u540e\u5e8f\u4e0d\u4f7f\u7528\u6307\u9488\u8fed\u4ee3","text":"<pre><code>class Solution:\n    def postorderTraversal(self, root: Optional[TreeNode]) -&gt; List[int]:\n        if not root:\n            return []\n        stk, res = [root], []\n        while stk:\n            node = stk.pop()\n            res.append(node.val)\n            if node.left:\n                stk.append(node.left)\n            if node.right:\n                stk.append(node.right)\n        return res[::-1]\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E4%BA%8C%E5%8F%89%E6%A0%91/#_13","title":"\u540e\u5e8f\u4f7f\u7528\u6307\u9488\u8fed\u4ee3","text":"<pre><code>class Solution:\n    def postorderTraversal(self, root: Optional[TreeNode]) -&gt; List[int]:\n        if not root:\n            return []\n        cur, stk, res = root, [], []\n        while cur or stk:\n            while cur:\n                stk.append(cur)\n                res.append(cur.val)\n                cur = cur.right\n            cur = stk.pop()\n            cur = cur.left\n        return res[::-1]\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E4%BA%8C%E5%8F%89%E6%A0%91/#94","title":"94. \u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E4%BA%8C%E5%8F%89%E6%A0%91/#_14","title":"\u4e2d\u5e8f\u76f4\u63a5\u9012\u5f52","text":"<pre><code>class Solution:\n    def inorderTraversal(self, root: Optional[TreeNode]) -&gt; List[int]:\n        if not root:\n            return []\n        left = self.inorderTraversal(root.left)\n        right = self.inorderTraversal(root.right)\n        return left + [root.val] + right\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E4%BA%8C%E5%8F%89%E6%A0%91/#dfs_2","title":"\u4e2d\u5e8f\u4f7f\u7528<code>dfs</code>\u9012\u5f52","text":"<pre><code># \u501f\u52a9python\u51fd\u6570\u4f20\u53c2\u7279\u6027\nclass Solution:\n    def inorderTraversal(self, root: Optional[TreeNode]) -&gt; List[int]:\n        def dfs(node, res):\n            if not node:\n                return \n            dfs(node.left, res)\n            res.append(node.val)\n            dfs(node.right, res)\n        res = []\n        dfs(root, res)\n        return res\n\n# \u5229\u7528nonlocal\u5173\u952e\u5b57\nclass Solution:\n    def inorderTraversal(self, root: Optional[TreeNode]) -&gt; List[int]:\n        def dfs(node):\n            nonlocal res\n            if not node:\n                return \n            dfs(node.left)\n            res.append(node.val)\n            dfs(node.right)\n        res = []\n        dfs(root)\n        return res\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E4%BA%8C%E5%8F%89%E6%A0%91/#_15","title":"\u4e2d\u5e8f\u4f7f\u7528\u6307\u9488\u8fed\u4ee3","text":"<pre><code>class Solution:\n    def inorderTraversal(self, root: Optional[TreeNode]) -&gt; List[int]:\n        cur, stk, res = root, [], []\n        while cur or stk:\n            while cur:\n                stk.append(cur)\n                cur = cur.left\n            cur = stk.pop()\n            res.append(cur.val)\n            cur = cur.right\n        return res\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E4%BA%8C%E5%8F%89%E6%A0%91/#102","title":"102. \u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E4%BA%8C%E5%8F%89%E6%A0%91/#_16","title":"\u5c42\u5e8f\u9012\u5f52","text":"<pre><code>class Solution:\n    def levelOrder(self, root: Optional[TreeNode]) -&gt; List[List[int]]:\n        def bfs(node, level, levels):\n            if not node:\n                return \n            if len(levels) == level:\n                levels.append([])\n            levels[level].append(node.val)\n            bfs(node.left, level+1, levels)\n            bfs(node.right, level+1, levels)\n        res = []\n        bfs(root, 0, res)\n        return res\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E4%BA%8C%E5%8F%89%E6%A0%91/#_17","title":"\u5c42\u5e8f\u8fed\u4ee3","text":"<pre><code># \u4f7f\u7528deque\nclass Solution:\n    def levelOrder(self, root: Optional[TreeNode]) -&gt; List[List[int]]:\n        if not root:\n            return []\n        que, res = deque([root]), []\n        while que:\n            len_que = len(que)\n            level = []\n            for _ in range(len_que):\n                cur = que.popleft()\n                level.append(cur.val)\n                if cur.left:\n                    que.append(cur.left)\n                if cur.right:\n                    que.append(cur.right)\n            res.append(level)\n        return res\n\n# \u4f7f\u7528\u5217\u8868\nclass Solution:\n    def levelOrder(self, root: TreeNode) -&gt; List[List[int]]:\n        if not root:\n            return []\n        cur_level, res = [root], []\n        while cur_level:\n            level, level_val = [], []\n            for node in cur_level:\n                level_val.append(node.val)\n                if node.left: \n                    level.append(node.left)\n                if node.right: \n                    level.append(node.right)\n            cur_level = level\n            res.append(level_val)\n        return res\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E4%BA%8C%E5%8F%89%E6%A0%91/#199","title":"199.\u4e8c\u53c9\u6811\u7684\u53f3\u89c6\u56fe","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u663e\u7136\u5c42\u5e8f\u904d\u5386\u53d6\u6bcf\u5c42\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u5373\u53ef</li> </ul> <pre><code>class Solution:\n    def rightSideView(self, root: Optional[TreeNode]) -&gt; List[int]:\n        if not root:\n            return []\n        res, que = [], deque([root])\n        while que:\n            len_que = len(que)\n            for i in range(len(que)):\n                cur = que.popleft()\n                if cur.left:\n                    que.append(cur.left)\n                if cur.right:\n                    que.append(cur.right)\n                if i == len_que - 1:\n                    res.append(cur.val)\n        return res\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E4%BA%8C%E5%8F%89%E6%A0%91/#637","title":"637.\u4e8c\u53c9\u6811\u7684\u5c42\u5e73\u5747\u503c","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u663e\u7136\u5c42\u5e8f\u904d\u5386\u6c42\u6bcf\u5c42\u5747\u503c\u5373\u53ef</li> </ul> <pre><code>class Solution:\n    def averageOfLevels(self, root: Optional[TreeNode]) -&gt; List[float]:\n        res, que, = [], deque([root])\n        while que:\n            level = []\n            for _ in range(len(que)):\n                cur = que.popleft()\n                level.append(cur.val)\n                if cur.left:\n                    que.append(cur.left)\n                if cur.right:\n                    que.append(cur.right)\n            res.append(sum(level) / len(level))\n        return res\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E4%BA%8C%E5%8F%89%E6%A0%91/#429-n","title":"429. N\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u7c7b\u4f3c\u4e8e\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u91cc\u6bcf\u4e2a\u8282\u70b9\u52a0\u5165\u7684\u662f\u5b50\u8282\u70b9\uff0c\u800c\u4e8c\u53c9\u6811\u5206\u522b\u52a0\u5165\u5de6\u53f3\u8282\u70b9</li> </ul> <pre><code>\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children\n\"\"\"\n\nclass Solution:\n    def levelOrder(self, root: 'Node') -&gt; List[List[int]]:\n        if not root:\n            return []\n        res, que = [], deque([root])\n        while que:\n            level = []\n            for _ in range(len(que)):\n                cur = que.popleft()\n                level.append(cur.val)\n                for child in cur.children:\n                    que.append(child)\n            res.append(level)\n        return res\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E4%BA%8C%E5%8F%89%E6%A0%91/#515","title":"515. \u5728\u6bcf\u4e2a\u6811\u884c\u4e2d\u627e\u6700\u5927\u503c","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u5c42\u5e8f\u904d\u5386\u5e76\u8fd4\u56de\u6bcf\u4e00\u5c42\u7684\u6700\u5927\u503c</li> </ul> <pre><code># \u4f7f\u7528\u8fed\u4ee3\nclass Solution:\n    def largestValues(self, root: Optional[TreeNode]) -&gt; List[int]:\n        if not root:\n            return []\n        res, que = [], deque([root])\n        while que:\n            level = []\n            for _ in range(len(que)):\n                cur = que.popleft()\n                level.append(cur.val)\n                if cur.left:\n                    que.append(cur.left)\n                if cur.right:\n                    que.append(cur.right)\n            res.append(max(level))\n        return res\n\n# \u4f7f\u7528\u9012\u5f52\nclass Solution:\n    def largestValues(self, root: Optional[TreeNode]) -&gt; List[int]:\n        res = []\n        def bfs(root, h):\n            if root:\n                if h &gt;= len(res):\n                    res.append(root.val)\n                else:\n                    res[h] = max(res[h], root.val)\n                bfs(root.left, h + 1)\n                bfs(root.right, h + 1)\n        bfs(root, 0)\n        return res\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/","title":"\u4ee3\u7801-\u52a8\u6001\u89c4\u5212","text":"<ul> <li>\u4ee3\u7801-\u52a8\u6001\u89c4\u5212<ul> <li>\u52a8\u89c4\u89e3\u9898\u601d\u8def</li> <li>\u9898\u76ee<ul> <li>62. \u4e0d\u540c\u8def\u5f84</li> <li>63. \u4e0d\u540c\u8def\u5f84 II</li> <li>343. \u6574\u6570\u62c6\u5206</li> <li>96. \u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811</li> <li>125 \u00b7 \u80cc\u5305\u95ee\u9898\uff08\u4e8c\uff09</li> <li>53. \u6700\u5927\u5b50\u6570\u7ec4\u548c</li> <li>1049. \u6700\u540e\u4e00\u5757\u77f3\u5934\u7684\u91cd\u91cf II</li> <li>416. \u5206\u5272\u7b49\u548c\u5b50\u96c6</li> <li>494.\u76ee\u6807\u548c</li> <li>474.\u4e00\u548c\u96f6</li> <li>440.\u80cc\u5305\u95ee\u9898\uff08\u4e09\uff09</li> <li>518.\u96f6\u94b1\u5151\u6362||</li> <li>377.\u7ec4\u5408\u7efc\u5408VI</li> <li>322.\u96f6\u94b1\u5151\u6362</li> <li>279.\u5b8c\u5168\u5e73\u65b9\u6570</li> <li>139.\u5355\u8bcd\u62c6\u5206</li> <li>198.\u6253\u5bb6\u52ab\u820d</li> <li>122.\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673aII</li> </ul> </li> </ul> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_1","title":"\u52a8\u89c4\u89e3\u9898\u601d\u8def","text":"<ul> <li>\u52a8\u89c4\u9898\u76ee\u56db\u4e2a\u5173\u952e\uff1a\uff081\uff09<code>dp</code>\u6570\u7ec4\u542b\u4e49\uff1b\uff082\uff09\u9012\u63a8\u516c\u5f0f\uff1b\uff083\uff09\u521d\u59cb\u5316\u65b9\u5f0f\uff1b\uff084\uff09\u904d\u5386\u987a\u5e8f</li> <li>\u80cc\u5305\u95ee\u9898\u51e0\u4e2a\u5173\u952e\u70b9\uff1a</li> <li>01\u80cc\u5305\uff08\u6bcf\u4e2a\u7269\u54c1\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\uff09\u548c\u5b8c\u5168\u80cc\u5305\uff08\u7269\u54c1\u53ef\u591a\u6b21\u4f7f\u7528\uff09\u5728\u91c7\u7528\u4e00\u7ef4<code>dp</code>\u6570\u7ec4\u65f6\u904d\u5386\u987a\u5e8f\u4e0d\u540c\uff0c01\u80cc\u5305\u4e3a\u4e86\u4fdd\u8bc1\u7269\u54c1\u4e0d\u91cd\u590d\u4f7f\u7528\uff0c\u9700\u8981\u5012\u5e8f\u904d\u5386\u80cc\u5305\uff1b\u800c\u5b8c\u5168\u80cc\u5305\u5219\u9700\u8981\u6b63\u5e8f\u904d\u5386\uff1b==01\u80cc\u5305&gt;&gt;\u5012\u53d9\u904d\u5386\u80cc\u5305\uff1b\u5b8c\u5168\u80cc\u5305&gt;&gt;\u6b63\u5411\u904d\u5386\u80cc\u5305==</li> <li>\u6c42\u6392\u5217\u6570\u548c\u7ec4\u5408\u6570\u65f6\u904d\u5386\u80cc\u5305\u548c\u7269\u54c1\u7684\u987a\u5e8f\u4e0d\u540c\uff0c\u5982\u679c\u5148\u904d\u5386\u7269\u54c1\uff0c\u90a3\u4e48\u4ea7\u751f\u7ec4\u5408\u6570\uff08\u5047\u8bbe\u524d\u4e24\u4e2a\u5143\u7d20\u662fa,b,\u90a3\u4e48\u904d\u5386\u53ea\u80fd\u4ea7\u751fa,b\u8fd9\u6837\u987a\u5e8f\u7684\u7ec4\u5408\uff09\uff1b\u800c\u5982\u679c\u5148\u904d\u5386\u80cc\u5305\uff0c\u90a3\u4e48\u5219\u4ea7\u751f\u6392\u5217\u6570\u3002\u6b64\u5916\uff0c\u6c42\u6392\u5217\u6570\u548c\u7ec4\u5408\u6570\u65f6<code>dp[0]</code>\u90fd\u9700\u8981\u521d\u59cb\u5316\u4e3a1\u3002==\u6392\u5217&gt;&gt;\u5148\u904d\u5386\u80cc\u5305\uff1b\u7ec4\u5408&gt;&gt;\u5148\u904d\u5386\u7269\u54c1==</li> <li>\u521d\u59cb\u5316\u65b9\u5f0f\u9700\u8981\u6839\u636e\u9012\u63a8\u516c\u5f0f\u4ee5\u53ca\u9898\u76ee\u6765\u786e\u5b9a\uff0c\u9996\u5148\u9664\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e4b\u5916\u7684\u5143\u7d20\u7684\u521d\u59cb\u5316\u9700\u8981\u6839\u636e\u9012\u63a8\u516c\u5f0f\u6765\u5224\u65ad\uff0c\u5982\u679c\u9012\u63a8\u516c\u5f0f\u5305\u542bmin/max\uff0c\u5219\u521d\u59cb\u5316\u4e3ainf/-inf\uff1b\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u521d\u59cb\u5316\u5219\u9700\u8981\u5177\u4f53\u95ee\u9898\u5177\u4f53\u5206\u6790\uff0c\u4e0d\u4e00\u5b9a\u6709\u5f88\u597d\u89e3\u91ca\u7684\u610f\u4e49\u3002</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#_2","title":"\u9898\u76ee","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#62","title":"62. \u4e0d\u540c\u8def\u5f84","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u8fd9\u9053\u9898<code>dp</code>\u6570\u7ec4\u542b\u4e49\u4ee5\u53ca\u9012\u63a8\u516c\u5f0f\u90fd\u5f88\u5bb9\u6613\u6c42\u5f97\uff0c\u5173\u952e\u5728\u4e8e<code>dp</code>\u6570\u7ec4\u7684\u521d\u59cb\u5316\u65b9\u5f0f,\u56e0\u4e3a\u7b2c\u4e00\u884c\u548c\u7b2c\u4e00\u5217\u90fd\u9700\u8981\u7b49\u4e8e1\uff0c\u6240\u4ee5\u8fd9\u91cc\u521d\u59cb\u5316\u4e3a\u51681\u6570\u7ec4\u3002</li> </ul> <pre><code>class Solution:\n    def uniquePaths(self, m: int, n: int) -&gt; int:\n        dp = [[1] * n for _ in range(m)]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i][j-1] + dp[i-1][j]\n        return dp[m-1][n-1]\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#63-ii","title":"63. \u4e0d\u540c\u8def\u5f84 II","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u8fd9\u9053\u9898\u7684\u5173\u952e\u5728\u4e8e\u521d\u59cb\u5316\u65b9\u5f0f\uff0c\u7b2c\u4e00\u884c\u548c\u7b2c\u4e00\u5217\u5728\u6ca1\u6709\u9047\u5230\u969c\u788d\u7269\u4e4b\u524d<code>dp</code>\u6570\u7ec4\u5e94\u8be5\u4e3a1\uff0c\u4f46\u662f\u9047\u5230\u4e4b\u540e\u5e94\u8be5\u7b49\u4e8e0\uff08\u53e6\u5916\u8981\u6ce8\u610f\u7684\u662fpython\u4e2d\u6570\u7ec4\u7528\u5217\u8868\u8868\u793a\u65f6\u4e0d\u80fd\u6309\u7167\u7d22\u5f15\u540c\u65f6\u4fee\u6539\u591a\u4e2a\u5b50\u5217\u8868\uff0c\u4f8b\u5982<code>dp[1:][0]=0</code>\u662f\u4e0d\u884c\u7684\uff09</li> </ul> <pre><code>class Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -&gt; int:\n        m, n = len(obstacleGrid), len(obstacleGrid[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(n):\n            if obstacleGrid[0][i] == 0:\n                dp[0][i] = 1\n            else:\n                break\n        for i in range(m):\n            if obstacleGrid[i][0] == 0:                \n                dp[i][0] = 1\n            else:\n                break\n        for i in range(1, m):\n            for j in range(1, n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        return dp[-1][-1]\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#343","title":"343. \u6574\u6570\u62c6\u5206","text":"<p>\u9898\u89e3:</p> <ul> <li>\u8fd9\u9053\u9898\u7684\u5173\u952e\u662f\u627e\u5230\u9012\u63a8\u516c\u5f0f\uff0c<code>dp[i]</code>\u8868\u793a\u6574\u6570i\u5206\u89e3\u4e4b\u540e\u4e58\u79ef\u7684\u6700\u5927\u503c\uff0c\u90a3\u4e48\u904d\u5386i\uff0c\u5219i\u53ef\u4ee5\u5212\u5206\u6210j\u548ci-j\u4e24\u90e8\u5206\uff0c\u4e58\u79ef\u53ef\u4ee5\u8868\u793a\u6210<code>j*(i-j)</code>\u6216\u8005<code>j*dp[i-j]</code>\uff0c\u5176\u4e2d\u524d\u8005\u8868\u793a\u62c6\u6210\u4e24\u4e2a\u6570\uff0c\u540e\u8005\u8868\u793a\u62c6\u62103\u4e2a\u4ee5\u4e0a\u7684\u6570\uff0c\u90a3\u4e48\u9012\u63a8\u516c\u5f0f\u5c31\u53ef\u4ee5\u8868\u793a\u6210<code>dp[i]=max(dp[i],j*(i-j),j*dp[i-j])</code></li> <li>\u8fd9\u91cc\u4e00\u5f00\u59cb\u6211\u5199\u7684\u9012\u63a8\u516c\u5f0f\u662f<code>dp[i] = max(dp[i], dp[j] * dp[i-j], dp[j] * (i-j), j * dp[i-j], j * (i-j))</code></li> <li>\u53e6\u5916j\u7684\u53d6\u503c\u8303\u56f4\u53ef\u4ee5\u5199\u6210\u5230<code>i//2+1</code></li> </ul> <pre><code>class Solution:\n        # \u5047\u8bbe\u5bf9\u6b63\u6574\u6570 i \u62c6\u5206\u51fa\u7684\u7b2c\u4e00\u4e2a\u6b63\u6574\u6570\u662f j\uff081 &lt;= j &lt; i\uff09\uff0c\u5219\u6709\u4ee5\u4e0b\u4e24\u79cd\u65b9\u6848\uff1a\n        # 1) \u5c06 i \u62c6\u5206\u6210 j \u548c i\u2212j \u7684\u548c\uff0c\u4e14 i\u2212j \u4e0d\u518d\u62c6\u5206\u6210\u591a\u4e2a\u6b63\u6574\u6570\uff0c\u6b64\u65f6\u7684\u4e58\u79ef\u662f j * (i-j)\n        # 2) \u5c06 i \u62c6\u5206\u6210 j \u548c i\u2212j \u7684\u548c\uff0c\u4e14 i\u2212j \u7ee7\u7eed\u62c6\u5206\u6210\u591a\u4e2a\u6b63\u6574\u6570\uff0c\u6b64\u65f6\u7684\u4e58\u79ef\u662f j * dp[i-j]\n    def integerBreak(self, n):\n        dp = [0] * (n + 1)   # \u521b\u5efa\u4e00\u4e2a\u5927\u5c0f\u4e3an+1\u7684\u6570\u7ec4\u6765\u5b58\u50a8\u8ba1\u7b97\u7ed3\u679c\n        dp[2] = 1  # \u521d\u59cb\u5316dp[2]\u4e3a1\uff0c\u56e0\u4e3a\u5f53n=2\u65f6\uff0c\u53ea\u6709\u4e00\u4e2a\u5207\u5272\u65b9\u5f0f1+1=2\uff0c\u4e58\u79ef\u4e3a1\n\n        # \u4ece3\u5f00\u59cb\u8ba1\u7b97\uff0c\u76f4\u5230n\n        for i in range(3, n + 1):\n            # \u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u5207\u5272\u70b9\n            for j in range(1, i // 2 + 1):\n\n                # \u8ba1\u7b97\u5207\u5272\u70b9j\u548c\u5269\u4f59\u90e8\u5206(i-j)\u7684\u4e58\u79ef\uff0c\u5e76\u4e0e\u4e4b\u524d\u7684\u7ed3\u679c\u8fdb\u884c\u6bd4\u8f83\u53d6\u8f83\u5927\u503c\n\n                dp[i] = max(dp[i], max((i - j) * j, dp[i - j] * j))\n\n        return dp[n]  # \u8fd4\u56de\u6700\u7ec8\u7684\u8ba1\u7b97\u7ed3\u679c\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#96","title":"96. \u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u5173\u952e\u662f\u8981\u627e\u5230\u9012\u63a8\u516c\u5f0f\u3002\u9996\u5148\u5b9a\u4e49<code>dp</code>\u6570\u7ec4\u8868\u793a1-n\u4e2a\u6570\u5b57\u53ef\u7ec4\u6210\u7684\u641c\u7d22\u4e8c\u53c9\u6811\u7684\u6570\u76ee\uff08\u5176\u5b9e==\u7b49\u4ef7\u4e8en\u4e2a\u4e0d\u7528\u7684\u6570\u53ef\u7ec4\u6210\u7684\u641c\u7d22\u4e8c\u53c9\u6811\u6570\u76ee==\uff09\u8003\u8651\u4e00\u822c\u60c5\u51b5\uff0c\u5bf9\u4e8e\u6574\u6570i\uff0c\u5982\u679c\u4ee5j\u4e3a\u5934\u8282\u70b9\uff0c\u90a3\u4e48\u5de6\u5b50\u6811\u5305\u542bj-1\u4e2a\u6570\u5b57\uff0c\u53f3\u5b50\u6811\u5305\u542bi-j\u4e2a\u6570\u5b57\uff0c\u90a3\u4e48\u5bb9\u6613\u63a8\u51fa\u9012\u63a8\u516c\u5f0f\u4e3a\uff1a<code>dp[i]+=dp[j-1]*dp[i-j]</code></li> </ul> <pre><code>class Solution:\n    def numTrees(self, n: int) -&gt; int:\n        dp = [0] * (n+1)\n        dp[0] = 1\n        for i in range(1, n+1):\n            for j in range(1, i+1):\n                dp[i] += dp[j-1] * dp[i-j]\n        return dp[-1]\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#125","title":"125 \u00b7 \u80cc\u5305\u95ee\u9898\uff08\u4e8c\uff09","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u9996\u5148\u8003\u8651\u4e8c\u7ef4<code>dp</code>\u6570\u7ec4\u7684\u60c5\u5f62\uff0c\u6b64\u65f6<code>dp[i][j]</code>\u8868\u793a\u4ece\u524di\u4e2a\u7269\u54c1\u4e2d\u9009\u62e9\uff0c\u80cc\u5305\u5bb9\u91cf\u4e3aj\u65f6\u7684\u6700\u5927\u4ef7\u503c\uff1b\u9012\u63a8\u516c\u5f0f\u5bb9\u6613\u63a8\u5f97\u4e3a<code>dp[i][j]=max(dp[i-1][j], dp[i-1][j-A[i]]+V[i])</code></li> <li>\u56e0\u4e3a\u5728\u4e8c\u7ef4\u60c5\u51b5\u4e0b<code>dp</code>\u6570\u7ec4\u7b2ci\u884c\u53ea\u4e0e\u7b2ci-1\u884c\u6709\u5173\uff0c\u56e0\u6b64\u53ef\u4ee5\u7528\u4e00\u7ef4<code>dp</code>\u6570\u7ec4\u8868\u793a\uff0c\u4e5f\u5c31\u662f==\u6bcf\u4e00\u8f6ei\u5bf9\u5e94\u4e00\u7ec4\u4e00\u7ef4<code>dp</code>==\uff0c\u4e5f\u5c31\u662f\u8bf4\u5f53\u66f4\u65b0\u5230\u65b0\u4e00\u8f6ei\u7684\u65f6\u5019\uff0c<code>dp</code>\u4fdd\u5b58\u7684\u662fi-1\u65f6\u7684\u7ed3\u679c\uff0c\u6b64\u65f6\u5982\u679c\u987a\u5e8f\u904d\u5386j\uff0c\u5219\u66f4\u5c0f\u7684j\u5df2\u7ecf\u88ab\u66f4\u65b0\u4e86\uff0c\u4e0d\u518d\u662fi-1\u7684\u7ed3\u679c\u4e86\uff0c\u7ed3\u5408<code>dp</code>\u6570\u7ec4\u5b9a\u4e49\u53ef\u77e5\u987a\u5e8f\u904d\u5386\u65f6\u6709\u53ef\u80fd\u80cc\u5305\u4e3aj-1\u65f6\u5c31\u5df2\u7ecf\u4f7f\u7528\u4e86\u7269\u54c1i\uff08\u6216\u8005\u66f4\u5c0f\u7684\u80cc\u5305\u5c31\u5df2\u7ecf\u4f7f\u7528\u4e86\uff09,\u5f53\u80cc\u5305\u4e3aj\u65f6\u53ef\u80fd\u53c8\u518d\u6b21\u4f7f\u7528\u7269\u54c1i\uff0c\u6240\u4ee5\u4e0d\u6ee1\u8db3\u6bcf\u79cd\u7269\u54c1\u53ea\u4f7f\u7528\u4e00\u6b21\u7684\u6761\u4ef6\uff0c\u8fd9\u4e5f\u662f01\u80cc\u5305\u548c\u5b8c\u5168\u80cc\u5305\u7684\u533a\u522b\uff0c\u537301\u80cc\u5305\u9700\u8981\u9006\u5e8f\u904d\u5386\u3002\u9012\u63a8\u516c\u5f0f\u4e3a<code>dp[j]=max(dp[j], dp[j-A[i]]+V[i])</code></li> <li>\u53c2\u8003https://www.acwing.com/solution/content/116859/</li> </ul> <pre><code># \u4e8c\u7ef4dp\u6570\u7ec4\u60c5\u51b5\nclass Solution:\n    \"\"\"\n    @param m: An integer m denotes the size of a backpack\n    @param a: Given n items with size A[i]\n    @param v: Given n items with value V[i]\n    @return: The maximum value\n    \"\"\"\n    def back_pack_i_i(self, m: int, a: List[int], v: List[int]) -&gt; int:\n        # write your code here\n        dp = [[0] * (m+1) for _ in range(len(a))]\n        # \u5148\u521d\u59cb\u5316\u7b2c\u4e00\u884c,\u56e0\u4e3adp\u6570\u7ec4\u66f4\u65b0\u8981\u6c42\u5df2\u77e5\u524d\u4e00\u884c\n        for j in range(m+1):\n            if j &gt;= a[0]:\n                dp[0][j] = v[0]\n        for i in range(1, len(a)):\n            for j in range(1, m+1):\n                if j &gt;= a[i]:\n                    dp[i][j] = max(dp[i-1][j], dp[i-1][j-a[i]]+v[i])\n                else:\n                    dp[i][j] = dp[i-1][j]\n        return dp[-1][-1]\n\n# \u4e00\u7ef4dp\u6570\u7ec4\u60c5\u51b5\nclass Solution:\n    \"\"\"\n    @param m: An integer m denotes the size of a backpack\n    @param a: Given n items with size A[i]\n    @param v: Given n items with value V[i]\n    @return: The maximum value\n    \"\"\"\n    def back_pack_i_i(self, m: int, a: List[int], v: List[int]) -&gt; int:\n        # write your code here\n        dp = [0] * (m+1)\n        # \u8fd9\u91cc\u4e0d\u7528\u521d\u59cb\u5316\u7b2c\u4e00\u884c,\u56e0\u4e3a\u8fd9\u91cc\u7684\u9012\u63a8\u516c\u5f0f\u5c31\u5305\u542b\u4e86\u7b2c\u4e00\u884c\u521d\u59cb\u5316\u7684\u903b\u8f91\n        for i in range(len(a)):\n            for j in range(m, a[i]-1, -1): # \u9006\u5e8f\u904d\u5386\u80cc\u5305\n                dp[j] = max(dp[j], dp[j-a[i]]+v[i])\n        return dp[-1]\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#53","title":"53. \u6700\u5927\u5b50\u6570\u7ec4\u548c","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u52a8\u6001\u89c4\u5212\u5f88\u597d\u7406\u89e3\uff1a</li> </ul> <p><code>dp</code>\u6570\u7ec4\u5143\u7d20<code>dp[i]</code>\u5b9a\u4e49\u4e3a\u4ee5<code>nums[i]</code>\u7ed3\u5c3e\u7684\u6700\u5927\u8fde\u7eed\u5b50\u6570\u7ec4\uff0c\u5f53<code>dp[i-1]&lt;0</code>\u65f6,<code>dp[i]=nums[i]</code>; \u5f53<code>dp[i-1]&gt;=0</code>\u65f6\uff0c<code>dp[i]=dp[i-1]+nums[i]</code>\u3002\u521d\u59cb\u5316\u65b9\u5f0f\u4e3a<code>dp[0]=nums[0]</code>\u3002</p> <p>==\u7531\u4e8e<code>dp[i]</code>\u53ea\u4e0e<code>dp[i-1]</code>\u548c<code>nums[i]</code>\u76f8\u5173\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539<code>nums[i]</code>==</p> <pre><code># \u57fa\u7840dp\nclass Solution:\n    def maxSubArray(self, nums: List[int]) -&gt; int:\n        n = len(nums)\n        dp = [0] * n\n        dp[0] = nums[0]\n        for i in range(1, n):\n            if dp[i-1] &gt; 0:\n                dp[i] = dp[i-1] + nums[i]\n            else:\n                dp[i] = nums[i]\n        return max(dp)\n\n# dp\u8fdb\u4e00\u6b65\u4f18\u5316\nclass Solution:\n    def maxSubArray(self, nums: List[int]) -&gt; int:\n        for i in range(1, len(nums)):\n            nums[i] += max(nums[i - 1], 0)\n        return max(nums)\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#1049-ii","title":"1049. \u6700\u540e\u4e00\u5757\u77f3\u5934\u7684\u91cd\u91cf II","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u9996\u5148\u6839\u636e\u9898\u610f\u53ef\u4ee5\u505a\u5982\u4e0b\u62bd\u8c61\uff1a\\(\\sum_{i=0}^{n-1} k_i*stones[i], k_i \\sub \\{ -1, 1\\}\\)\u4e2d\u7684\u5408\u7406\u7ec4\u5408\u53ef\u4ee5\u8868\u793a\u6700\u7ec8\u77f3\u5934\u7684\u91cd\u91cf\u3002\u4e0b\u9762\u8bc1\u660e\u6b64\u5047\u8bbe(\u6458\u5f55\u81ea<code>leetcode</code>\u5b98\u65b9\u9898\u89e3)\uff1a</li> </ul> <p>\u5047\u8bbe\u5b58\u5728\u4e00\u7ec4\\(\\sum_{i=0}^{n-1} k_i*stones[i], k_i \\sub \\{ -1, 1\\}\\)\u4f7f\u5f97\u6700\u7ec8\u7559\u4e0b\u7684\u77f3\u5934\u91cd\u91cf\u6700\u5c0f\uff0c\u4e5f\u5c31\u662f\u8bf4\u660e\u5f53\u5c06\u77f3\u5934\u5206\u6210\\(k_i\\)\u5206\u522b\u4e3a-1\uff0c1\u4e24\u7c7b\u540e\uff0c\u4e00\u5b9a\u53ef\u4ee5\u627e\u5230\u4e00\u79cd\u5206\u89e3\u65b9\u5f0f\u4f7f\u5f97\u6700\u7ec8\u7559\u4e0b\u7684\u77f3\u5934\u91cd\u91cf\u6700\u5c0f\u3002</p> <p>\u5047\u8bbe\\(k_i=1\\)\u548c\\(k_i=-1\\)\u7684\u4e24\u7ec4\u77f3\u5934\u5206\u522b\u4e3aA\uff0cB\uff0c\uff08A\uff0cB\u8d28\u91cf\u548c\u7684\u5dee\u503c\u7b49\u4e8e<code>diff</code>\uff09\u6bcf\u6b21\u4eceA\u4e2d\u62ff\u51fa\u6700\u5927\u7684\u4e00\u5757\u77f3\u5934\u548cB\u4e2d\u4efb\u610f\u4e00\u5757\u78b0\u649e\uff0c\u90a3\u4e48\u7ed3\u679c\u662f\u4e24\u7ec4\u77f3\u5934\u91cd\u91cf\u540c\u65f6\u51cf\u5c11\uff0c\u5c06\u5269\u4e0b\u7684\u77f3\u5934\u653e\u5165A\u4e2d\u5e76\u7ee7\u7eed\u6b64\u6d41\u7a0b\uff0c\u6700\u7ec8\u5269\u4e0b\u7684\u77f3\u5934\u91cd\u91cf\u5c31\u4e3a<code>diff</code>\u3002</p> <ul> <li>\u6839\u636e\u4e0a\u8ff0\u5408\u7406\u6027\u8bc1\u660e\uff0c\u5047\u8bbeA,B\u4e24\u7ec4\u7684\u91cd\u91cf\u5206\u522b\u4e3aa\uff0cb=sum-a\uff0c\u90a3\u4e48\u5b83\u4eec\u4e4b\u95f4\u7684\u8d28\u91cf\u5dee\u4e3a<code>diff=|a-(sum-a)|=|2a-sum|</code>\uff0c\u6240\u4ee5\u6b64\u9898\u7b49\u4ef7\u4e8e\u627e\u5230\u4e00\u79cd\u5206\u89e3\u65b9\u5f0f\uff0c\u4f7f\u5f97\u4e00\u7ec4\u77f3\u5934\u91cd\u91cf\u63a5\u8fd1\u603b\u91cd\u91cf\u7684\u4e00\u534a\u3002\u8fd9\u5c31\u53ef\u4ee5\u5229\u752801\u80cc\u5305\u95ee\u9898\u6c42\u89e3\uff0c\u5176\u4e2d\u80cc\u5305\u91cd\u91cf\u7b49\u4e8e\u77f3\u5934\u603b\u91cd\u91cf\u7684\u4e00\u534a\u3002</li> </ul> <pre><code>class Solution:\n    def lastStoneWeightII(self, stones: List[int]) -&gt; int:\n        s = sum(stones)\n        target = s // 2\n        dp = [0] * (target + 1)\n        for stone in stones:\n            for j in range(target, stone-1, -1):\n                dp[j] = max(dp[j], dp[j-stone]+stone)\n        return s - dp[-1] * 2\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#416","title":"416. \u5206\u5272\u7b49\u548c\u5b50\u96c6","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u9996\u5148\u660e\u786e\u672c\u9898\u4e3a\u80cc\u5305\u95ee\u9898\uff0c\u80cc\u5305\u6700\u5927\u53ef\u88c5\u7269\u54c1\u91cd\u91cf\u4e3a\u6570\u7ec4\u548c\u7684\u4e00\u534a\uff0c\u7269\u54c1\u91cd\u91cf\u548c\u4ef7\u503c\u90fd\u7b49\u4e8e\u6570\u7ec4\u5143\u7d20\u6570\u503c\u3002</li> </ul> <pre><code>class Solution:\n    def canPartition(self, nums: List[int]) -&gt; bool:\n        n = len(nums)\n        target = sum(nums) // 2\n        if target * 2 != sum(nums):\n            return False\n        dp = [0] * (target + 1)\n        for i in range(n):\n            for j in range(target, nums[i]-1, -1):\n                dp[j] = max(dp[j], dp[j-nums[i]]+nums[i])\n        if dp[-1] == target:\n            return True\n        return False\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#494","title":"494.\u76ee\u6807\u548c","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li> <p>\u5047\u8bbe\u6dfb\u52a0<code>+</code>\u53f7\u7684\u5143\u7d20\u548c\u4e3a<code>l</code>,\u6dfb\u52a0\u8d1f\u53f7\u7684\u5143\u7d20\u548c\u4e3a<code>r</code>\uff0c\u53ef\u4ee5\u8ba1\u7b97\u5f97\u5230<code>r=(s-target)/2</code>\u3002\u90a3\u4e48\u672c\u9898\u5c31\u8f6c\u5316\u4e3a\u53ef\u4ee5\u627e\u5230\u591a\u5c11\u7ec4\u6570\u4f7f\u5f97\u548c\u7b49\u4e8e<code>r</code>\uff0c\u6bcf\u4e2a\u6570\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\uff0c\u8fd9\u7b49\u4ef7\u4e8e01\u80cc\u5305\u95ee\u9898\u3002\u4f46\u662f<code>dp</code>\u6570\u7ec4\u542b\u4e49\u7565\u6709\u4e0d\u540c\uff0c\u8fd9\u91cc<code>dp</code>\u6570\u7ec4\u5143\u7d20\u8868\u793a\u80cc\u5305\u5927\u5c0f\u4e3aj\u65f6\uff0c\u6709\u591a\u5c11\u79cd\u7ec4\u5408\u65b9\u5f0f\u53ef\u4ee5\u88c5\u6ee1\u80cc\u5305\u3002\u9012\u63a8\u516c\u5f0f\u4e3a\uff1a<code>dp[j]+=dp[j-num]</code></p> </li> <li> <p>\u521d\u59cb\u5316\u65b9\u5f0f\uff1a<code>dp[0]=1,</code>\u5176\u4ed6<code>dp</code>\u6570\u7ec4\u5143\u7d20\u521d\u59cb\u5316\u4e3a0\u3002<code>dp[0]=1</code>\u6709\u4e24\u79cd\u89e3\u91ca\uff1a</p> </li> <li> <p>\u76f4\u63a5\u4ece<code>dp</code>\u6570\u7ec4\u542b\u4e49\u89d2\u5ea6\uff0c0\u4e2a\u5143\u7d20\u88c5\u6ee1\u80cc\u5305\u5927\u5c0f\u4e3a0\u67091\u79cd\u7ec4\u5408\u65b9\u5f0f\uff1b</p> </li> <li>\u5982\u679c\u6709\u4e00\u4e2a\u5143\u7d20\u53ef\u4ee5\u9009\u62e9\uff0c\u5143\u7d20\u4e3ak\uff0c\u90a3\u4e48\u88c5\u6ee1k\u7684\u80cc\u5305\u6709\u51e0\u79cd\u7ec4\u5408\uff1f\u6309\u7167\u9012\u63a8\u516c\u5f0f\uff0c\u5e94\u8be5\u6709<code>dp[k]+dp[0]</code>\u79cd\u65b9\u5f0f\uff0c\u53ef\u4ee5\u770b\u51fa<code>dp[0]</code>\u5e94\u8be5\u521d\u59cb\u5316\u4e3a1\u3002==\u53e6\u5916\uff0c\u5982\u679c<code>dp[0]=0</code>,\u90a3\u4e48\u6240\u6709<code>dp</code>\u6570\u7ec4\u7684\u5143\u7d20\u90fd\u5c06\u662f0==</li> </ul> <p>\u8fd9\u79cd\u95ee\u9898\u53eb\u7ec4\u5408\u7c7b\u80cc\u5305\u95ee\u9898\uff0c<code>dp</code>\u6570\u7ec4\u548c\u9012\u63a8\u516c\u5f0f\u4e0e\u539f\u59cb01\u80cc\u5305\u95ee\u9898\u4e0d\u540c\u3002</p> <pre><code>class Solution:\n    def findTargetSumWays(self, nums: List[int], target: int) -&gt; int:\n        s = sum(nums)\n        if target &gt; s:\n            return 0\n        r = (s - target) // 2\n        if r * 2 != s - target:\n            return 0\n        dp = [0] * (r + 1)\n        dp[0] = 1\n        for num in nums:\n            for i in range(r, num-1, -1):\n                dp[i] += dp[i-num]\n        return dp[-1]\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#474","title":"474.\u4e00\u548c\u96f6","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u672c\u989801\u80cc\u5305\u7684\u7ef4\u5ea6\u6709\u4e24\u7ef4</li> </ul> <pre><code>class Solution:\n    def findMaxForm(self, strs: List[str], m: int, n: int) -&gt; int:\n        dp = [[0] * (n+1) for _ in range(m+1)]\n        for s in strs:\n            n_zero = s.count('0')\n            n_one = len(s) - n_zero\n            for i in range(m, n_zero-1, -1):\n                for j in range(n, n_one-1, -1):\n                    dp[i][j] = max(dp[i][j], dp[i-n_zero][j-n_one]+1)\n        return dp[-1][-1]\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#440","title":"440.\u80cc\u5305\u95ee\u9898\uff08\u4e09\uff09","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u672c\u9898\u5c5e\u4e8e==\u5b8c\u5168\u80cc\u5305\u95ee\u9898==\uff0c\u5373\u6bcf\u4e2a\u7269\u54c1\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\uff1b\u91c7\u7528\u4e00\u7ef4<code>dp</code>\u6570\u7ec4\u65f6\uff0c\u5b8c\u5168\u80cc\u5305\u95ee\u9898\u548c01\u80cc\u5305\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u5f0f\u552f\u4e00\u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u80cc\u5305\u7684\u904d\u5386\u987a\u5e8f\u3002</li> <li>\u91c7\u7528\u4e8c\u7ef4<code>dp</code>\u6570\u7ec4\u65f6\uff0c\u5219\u5b58\u5728\u4e24\u70b9\u4e0d\u540c\u4e4b\u5904\uff0c\u4e00\u4e2a\u662f\u521d\u59cb\u5316\u7684\u65b9\u5f0f\uff0c\u53e6\u4e00\u4e2a\u5c31\u662f\u9012\u63a8\u516c\u5f0f\u3002</li> </ul> <pre><code># \u4e8c\u7ef4dp\u6570\u7ec4\nclass Solution:\n    \"\"\"\n    @param a: an integer array\n    @param v: an integer array\n    @param m: An integer\n    @return: an array\n    \"\"\"\n    def back_pack_i_i_i(self, a: List[int], v: List[int], m: int) -&gt; int:\n        # write your code here\n        n = len(a)\n        if n == 0:\n            return 0\n        dp = [[0] * (m+1) for _ in range(n)]\n        for j in range(m+1):\n            if j &gt;= a[0]:\n                dp[0][j] = dp[0][j-a[0]]+v[0] # \u4e0d\u540c\u4e8e01\u80cc\u5305\u7684\u521d\u59cb\u5316\n        for i in range(1, n):\n            for j in range(m+1):\n                if j &gt;= a[i]:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-a[i]]+v[i]) # \u4e0d\u540c\u4e8e01\u80cc\u5305\u7684\u9012\u63a8\u516c\u5f0f\n                else:\n                    dp[i][j] = dp[i-1][j]\n        return dp[-1][-1]\n\n# \u4e00\u7ef4dp\u6570\u7ec4\nclass Solution:\n    \"\"\"\n    @param a: an integer array\n    @param v: an integer array\n    @param m: An integer\n    @return: an array\n    \"\"\"\n    def back_pack_i_i_i(self, a: List[int], v: List[int], m: int) -&gt; int:\n        # write your code here\n        dp = [0] * (m+1)\n        n = len(a)\n        for i in range(n):\n            for j in range(a[i], m+1):\n                dp[j] = max(dp[j], dp[j-a[i]]+v[i])\n        return dp[-1]\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#518","title":"518.\u96f6\u94b1\u5151\u6362||","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u5b8c\u5168\u80cc\u5305\u95ee\u9898\uff1b\u7ec4\u5408\u95ee\u9898\uff1b</li> <li><code>dp[i]</code>\u8868\u793a\u7ec4\u5408\u6210<code>i</code>\u7684\u7ec4\u5408\u6570\uff1b<code>dp[0]</code>\u521d\u59cb\u5316\u4e3a1\uff0c\u5176\u4ed6\u521d\u59cb\u5316\u4e3a0\uff1b\u9012\u63a8\u516c\u5f0f\uff1a<code>dp[i]+=dp[i-coin]</code>;\u5148\u904d\u5386\u7269\u54c1\uff0c\u518d\u904d\u5386\u80cc\u5305\uff1b\u6b63\u5411\u904d\u5386\u80cc\u5305</li> </ul> <pre><code>class Solution:\n    def change(self, amount: int, coins: List[int]) -&gt; int:\n        dp = [0] * (amount + 1)\n        dp[0] = 1\n        for coin in coins:\n            for i in range(coin, amount+1):\n                dp[i] += dp[i-coin]\n        return dp[-1]\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#377vi","title":"377.\u7ec4\u5408\u7efc\u5408VI","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u5b8c\u5168\u80cc\u5305\uff1b\u6392\u5217\u95ee\u9898</li> <li><code>dp[i]</code>\u8868\u793a\u76ee\u6807\u4e3a<code>i</code>\u65f6\u7684\u7ec4\u5408\u4e2a\u6570\uff1b\u9012\u63a8\u516c\u5f0f\uff1a<code>dp[i]+=dp[i-num]</code>;<code>dp[0]=0</code>\uff0c\u5176\u4ed6\u5143\u7d20\u521d\u59cb\u5316\u4e3a0\uff1b\u6b63\u5411\u904d\u5386\u80cc\u5305\uff1b\u5148\u904d\u5386\u80cc\u5305\uff0c\u518d\u904d\u5386\u7269\u54c1</li> <li>\u672c\u9898\u53ef\u4ee5\u4ece\u722c\u697c\u68af\u95ee\u9898\u8fdb\u9636\u5f97\u5230\uff1a\u722c\u697c\u68af\uff0c\u6bcf\u6b21\u53ef\u4ee5\u8d701\uff0c2\uff0c...\uff0cm\u6b65\uff0c\u603b\u5171n\u6b65\uff0c\u95ee\u6709\u591a\u5c11\u79cd\u8d70\u6cd5\uff1f</li> </ul> <pre><code>class Solution:\n    def combinationSum4(self, nums: List[int], target: int) -&gt; int:\n        dp = [0] * (target + 1)\n        dp[0] = 1\n        for i in range(1, target + 1):\n            for num in nums:\n                if i &gt;= num:\n                    dp[i] += dp[i-num]\n        return dp[-1]\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#322","title":"322.\u96f6\u94b1\u5151\u6362","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u5b8c\u5168\u80cc\u5305\uff1b</li> <li><code>dp[i]</code>\u8868\u793a\u51d1\u8db3\u603b\u91d1\u989d\u4e3ai\u6240\u9700\u7684\u6700\u5c0f\u786c\u5e01\u4e2a\u6570\uff1b\u9012\u63a8\u516c\u5f0f\uff1a<code>dp[i]=min(dp[i],dp[i-coin]+1)</code>;\u521d\u59cb\u5316\u65b9\u5f0f\uff1a<code>dp[0]=0</code>\u5176\u4ed6\u5143\u7d20\u521d\u59cb\u5316\u4e3a\u65e0\u7a77\u5927\uff08\u7531\u4e8e\u9012\u63a8\u516c\u5f0f\u5305\u542b\u6700\u5c0f\u7684\u6bd4\u8f83\uff09\uff1b\u80cc\u5305\u6b63\u5411\u904d\u5386\uff1b\u80cc\u5305\u548c\u7269\u54c1\u4e4b\u95f4\u7684\u904d\u5386\u987a\u5e8f\u6ca1\u6709\u9650\u5236</li> </ul> <pre><code>class Solution:\n    def coinChange(self, coins: List[int], amount: int) -&gt; int:\n        dp = [float('inf')] * (amount + 1)\n        dp[0] = 0\n        for coin in coins:\n            for i in range(coin, amount + 1):\n                dp[i] = min(dp[i], dp[i - coin] + 1)\n        return dp[-1] if dp[-1] != float('inf') else -1\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#279","title":"279.\u5b8c\u5168\u5e73\u65b9\u6570","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u5b8c\u5168\u80cc\u5305\u95ee\u9898\uff1b</li> <li><code>dp[j]</code>\u8868\u793a\u548c\u4e3a<code>j</code>\u7684\u5b8c\u5168\u5e73\u65b9\u6570\u7684\u6700\u5c0f\u6570\u91cf\uff1b\u9012\u63a8\u516c\u5f0f\uff1a<code>dp[j] = min(dp[j], dp[j - i * i] + 1)</code>;\u521d\u59cb\u5316\uff1a\u9012\u63a8\u516c\u5f0f\u6d89\u53camin\uff0c\u6240\u4ee5\u521d\u59cb\u5316\u4e3a\u65e0\u7a77\u5927<code>dp = [float('inf')] * (n + 1)</code>\uff0c<code>dp[0]</code>\u521d\u59cb\u5316\u4e3a0\uff0c\u8868\u793a\u548c\u4e3a0\u7684\u5b8c\u5168\u5e73\u65b9\u6570\u4e3a0\uff1b\u904d\u5386\u987a\u5e8f\uff1a\u975e\u7ec4\u5408/\u6392\u5217\u95ee\u9898<code>-&gt;</code>\u5148\u904d\u5386\u80cc\u5305\u8fd8\u662f\u7269\u54c1\u90fd\u884c\uff0c\u5b8c\u5168\u80cc\u5305<code>-&gt;</code>\u6b63\u5411\u904d\u5386\u80cc\u5305\u3002</li> </ul> <pre><code>class Solution:\n    def numSquares(self, n: int) -&gt; int:\n        target = int(n ** 0.5) \n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n        for i in range(1, target + 1):\n            for j in range(i * i, n + 1):\n                dp[j] = min(dp[j], dp[j - i * i] + 1)\n        return dp[-1]\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#139","title":"139.\u5355\u8bcd\u62c6\u5206","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u5b8c\u5168\u80cc\u5305\uff1b\u6392\u5217\u95ee\u9898</li> <li><code>dp[i]</code>\u8868\u793a\u5b57\u7b26\u4e32\u7684\u524di\u4e2a\u5143\u7d20\u662f\u5426\u53ef\u4ee5\u88ab\u5355\u8bcd\u5b57\u5178\u7ec4\u6210\uff1b\u9012\u63a8\u516c\u5f0f\uff1a\u5982\u679c<code>s[j-i:i]</code>\u5728\u5355\u8bcd\u5b57\u5178\u4e2d\uff0c\u5e76\u4e14<code>dp[j]</code>\u4e3a\u771f\uff0c\u90a3\u4e48<code>dp[i]</code>\u4e3a\u771f\uff1b\u521d\u59cb\u5316\uff1a<code>dp[0]=True</code>\uff08\u5982\u679c\u4e3aFalse\uff0c\u5219\u6240\u6709\u5143\u7d20\u90fd\u662fFalse\uff09\uff0c\u5176\u4ed6\u5143\u7d20\u521d\u59cb\u5316\u4e3aFalse\uff1b\u904d\u5386\u987a\u5e8f\uff1a\u6392\u5217\u95ee\u9898<code>-&gt;</code>\u5148\u904d\u5386\u80cc\u5305</li> <li>==\u672c\u9898\u9700\u8981\u6ce8\u610f<code>dp</code>\u6570\u7ec4\u548c\u5b57\u7b26\u4e32\u957f\u5ea6\u4e0d\u4e00\u6837\uff0c\u9700\u8981\u6ce8\u610f\u4e0b\u6807\u5bf9\u9f50\u7684\u95ee\u9898==</li> </ul> <pre><code>class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -&gt; bool:\n        n = len(s)\n        dp = [False] * (n + 1)\n        dp[0] = True\n        for i in range(1, n + 1):\n            for word in wordDict:\n                if i &gt;= len(word) and (dp[i - len(word)] and word == s[i - len(word) : i]):\n                    dp[i] = True\n        return dp[-1]\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#198","title":"198.\u6253\u5bb6\u52ab\u820d","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li><code>dp[i]</code>\u8868\u793a\u524di\u5bb6\u53ef\u4ee5\u5077\u7a83\u5f97\u5230\u7684\u6700\u9ad8\u91d1\u989d\uff1b\u9012\u63a8\u516c\u5f0f\uff1a\u5982\u679c\u5077\u7b2ci\u5bb6\uff0c\u90a3\u4e48\u6700\u9ad8\u91d1\u989d\u4e3a<code>nums[i]+dp[i-2]</code>,\u5982\u679c\u4e0d\u5077\u7b2ci\u5bb6\uff0c\u5219\u4e3a<code>dp[i-1]</code>,\u6240\u4ee5\u9012\u63a8\u516c\u5f0f\u4e3a<code>dp[i]=max(dp[i-1],nums[i]+dp[i-2])</code>;\u521d\u59cb\u5316\uff1a<code>dp[0]=nums[0],dp[1]=max(dp[0],dp[1])</code>,\u5176\u4ed6\u5143\u7d20\u521d\u59cb\u5316\u4e3a-inf</li> </ul> <pre><code>class Solution:\n    def rob(self, nums: List[int]) -&gt; int:\n        n = len(nums)\n        if n &lt; 3:\n            return max(nums)\n        dp = [-float('inf')] * n\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n        for i in range(2, n):\n            dp[i] = max(dp[i-1], dp[i-2] + nums[i])\n        return dp[-1] \n\n# \u7531\u4e8edp\u6570\u7ec4\u4e4b\u548cnums[i]\u4ee5\u53cadp[i-1],dp[i-2]\u76f8\u5173,\u56e0\u6b64\u6709\u4e24\u79cd\u7a7a\u95f4\u4f18\u5316\u65b9\u5f0f\uff1a\n# 1. \u53ea\u8bb0\u5f55dp[i-1],dp[i-2]\u4e24\u4e2a\u91cf\n# 2. \u53ea\u66f4\u65b0nums\nclass Solution:\n    def rob(self, nums: List[int]) -&gt; int:\n        n = len(nums)\n        if n &lt; 3:\n            return max(nums)\n        nums[1] = max(nums[0], nums[1])  \n        for i in range(2, len(nums)):\n            nums[i] = max(nums[i - 2] + nums[i], nums[i - 1])\n        return nums[-1]  \n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#122ii","title":"122.\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673aII","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li> <p>\u52a8\u6001\u89c4\u5212\uff1a</p> </li> <li> <p>\u8d2a\u5fc3\uff1a\u7531\u4e8e\u672c\u9898\u53ef\u4ee5\u591a\u6b21\u4e70\u5356\uff0c\u56e0\u6b64\u76f4\u63a5\u8ba1\u7b97\u6b63\u5229\u6da6\u4e4b\u548c\u5c31\u884c</p> </li> </ul> <pre><code>class Solution:\n    def maxProfit(self, prices: List[int]) -&gt; int:\n        res = 0 \n        for i in range(1, len(prices)):\n            if prices[i] - prices[i - 1] &gt; 0:\n                res += prices[i] - prices[i - 1]\n        return res\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%8D%95%E8%B0%83%E6%A0%88/","title":"\u5355\u8c03\u6808","text":"<ul> <li>\u5355\u8c03\u6808<ul> <li>\u5355\u8c03\u6808\u9898\u76ee\u8bf4\u660e</li> <li>\u9898\u76ee<ul> <li>739.\u6bcf\u65e5\u6e29\u5ea6</li> </ul> </li> </ul> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%8D%95%E8%B0%83%E6%A0%88/#_2","title":"\u5355\u8c03\u6808\u9898\u76ee\u8bf4\u660e","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%8D%95%E8%B0%83%E6%A0%88/#_3","title":"\u9898\u76ee","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%8D%95%E8%B0%83%E6%A0%88/#739","title":"739.\u6bcf\u65e5\u6e29\u5ea6","text":"<p>\u9898\u89e3\uff1a</p>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%8F%8C%E6%8C%87%E9%92%88/","title":"\u4ee3\u7801-\u53cc\u6307\u9488","text":"<ul> <li>\u4ee3\u7801-\u53cc\u6307\u9488<ul> <li>\u6982\u8ff0</li> <li>\u9898\u76ee<ul> <li>27. \u79fb\u9664\u5143\u7d20</li> <li>26. \u5220\u9664\u6709\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879</li> <li>283. \u79fb\u52a8\u96f6</li> <li>844. \u6bd4\u8f83\u542b\u9000\u683c\u7684\u5b57\u7b26\u4e32</li> <li>977. \u6709\u5e8f\u6570\u7ec4\u7684\u5e73\u65b9</li> <li>209. \u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4</li> <li>904. \u6c34\u679c\u6210\u7bee</li> <li>76. \u6700\u5c0f\u8986\u76d6\u5b50\u4e32</li> </ul> </li> </ul> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%8F%8C%E6%8C%87%E9%92%88/#_1","title":"\u6982\u8ff0","text":"<ul> <li>\u5e38\u89c1\u7684\u53cc\u6307\u9488\u95ee\u9898\u662f\u4e3a\u4e86==\u5c06\u6570\u7ec4\u4e2d\u7279\u5b9a\u5143\u7d20\u539f\u5730\u5220\u9664==\uff0c\u6839\u636e\u9898\u610f\u5269\u4e0b\u7684\u5143\u7d20\u53ef\u80fd\u4fdd\u6301\u539f\u6765\u7684\u987a\u5e8f\uff0c\u4e5f\u53ef\u80fd\u4e0d\u9700\u8981\u4fdd\u6301\u539f\u6709\u987a\u5e8f\uff0c\u5feb\u6162\u6307\u9488\u53ef\u4ee5\u4fdd\u6301\u5269\u4e0b\u5143\u7d20\u7684\u987a\u5e8f\uff0c\u5982\u679c\u5728\u66f4\u65b0\u6162\u6307\u9488\u7684\u8fc7\u7a0b\u4e2d\u4ea4\u6362\u5feb\u6162\u6307\u9488\u7684\u987a\u5e8f\uff0c\u8fd8\u80fd\u505a\u5230\u5c06\u6307\u5b9a\u5143\u7d20\u79fb\u5230\u6570\u7ec4\u672b\u5c3e\uff1b\u53cc\u5411\u6307\u9488\u4e0d\u4e00\u5b9a\u80fd\u4fdd\u6301\u5269\u4e0b\u5143\u7d20\u7684\u987a\u5e8f\uff1b\u5176\u4ed6\u9700\u8981\u7528\u5230\u53cc\u6307\u9488\u7684\u9898\u76ee\u4e00\u822c\u662f\u6839\u636e\u9898\u76ee\u9700\u8981\u7528\u4e24\u4e2a\u4f4d\u7f6e\u4fe1\u606f\u904d\u5386\u6570\u7ec4\u3002</li> <li>\u53e6\u4e00\u7c7b\u53cc\u6307\u9488\u95ee\u9898\u4e5f\u53ef\u4ee5\u79f0\u4f5c\u6ed1\u52a8\u6570\u7ec4\u95ee\u9898\uff0c\u601d\u60f3\u7c7b\u4f3c\u4e8e\u5feb\u6162\u6307\u9488\uff0c\u53ea\u662f\u6b64\u65f6\u9700\u8981\u505a\u4e00\u4e9b\u4e0d\u4ec5\u4ec5\u79fb\u52a8\u6570\u7ec4\u5143\u7d20\u7684\u64cd\u4f5c\u3002</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%8F%8C%E6%8C%87%E9%92%88/#_2","title":"\u9898\u76ee","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%8F%8C%E6%8C%87%E9%92%88/#27","title":"27. \u79fb\u9664\u5143\u7d20","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u5feb\u6162\u6307\u9488\uff1a\u5feb\u6307\u9488\u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u4e0d\u80fd\u653e\u5165\u65b0\u6570\u7ec4\u7684\u5143\u7d20\uff0c\u6162\u6307\u9488\u628a\u6ee1\u8db3\u6761\u4ef6\u7684\u5143\u7d20\u653e\u5165\u65b0\u6570\u7ec4\uff1b==\u5feb\u6162\u6307\u9488\u7684\u7ed3\u679c\u662f\u65b0\u6570\u7ec4\u524d\u9762\u7684\u5143\u7d20\u987a\u5e8f\u4e0d\u6539\u53d8\uff0c\u800c\u65b0\u6570\u7ec4\u540e\u7eed\u90e8\u5206\u5143\u7d20\u5219\u4e0d\u786e\u5b9a==</li> </ul> <pre><code>class Solution:\n    def removeElement(self, nums: List[int], val: int) -&gt; int:\n        slow = 0\n        fast = 0\n        while fast &lt; len(nums):\n            if nums[fast] != val:\n                nums[slow] = nums[fast]\n                slow += 1\n            fast += 1\n        return slow\n</code></pre> <ul> <li>\u76f8\u5411\u53cc\u6307\u9488\uff1a\u5de6\u6307\u9488\u8bb0\u5f55\u662f\u5426\u9047\u5230\u76ee\u6807\uff0c\u5982\u679c\u9047\u5230\u76ee\u6807\u5219\u4e0e\u53f3\u6307\u9488\u4ea4\u6362\uff0c\u5426\u5219\u4ec5\u6709\u5de6\u6307\u9488\u524d\u8fdb\uff1b==\u76f8\u5411\u53cc\u6307\u9488\u7684\u7ed3\u679c\u662f\u76ee\u6807\u88ab\u79fb\u5230\u6570\u7ec4\u7684\u672b\u5c3e\uff0c\u800c\u524d\u9762\u7684\u6570\u5b57\u987a\u5e8f\u53ef\u80fd\u53d1\u751f\u6539\u53d8==</li> </ul> <pre><code>class Solution:\n    def removeElement(self, nums: List[int], val: int) -&gt; int:\n        # \u76f8\u5411\u53cc\u6307\u9488\n        left = 0\n        right = len(nums) - 1\n        while left &lt;= right:\n            # left \u7528\u6765\u8bb0\u5f55\u8fb9\u754c\n            if nums[left] == val: \n                if nums[right] != val:\n                    nums[left], nums[right] = nums[right], nums[left]\n                    left += 1\n                right -= 1  # \u5982\u679cnums[right] \u4e0d\u662fval,\u90a3\u4e48\u8981\u4ea4\u6362\u4f4d\u7f6e\uff0c\u7136\u540eright-1\uff0c\u5982\u679c\u662fval,\u90a3\u6b63\u597d\uff0c\u662f\u8981\u53bb\u6389\u7684\u5bf9\u8c61\uff0c\u4e5f\u8981right-1\n            else:\n                left += 1 # \u6ca1\u627e\u5230val,left\u5c31\u4e00\u76f4\u524d\u8fdb\n        return left\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%8F%8C%E6%8C%87%E9%92%88/#26","title":"26. \u5220\u9664\u6709\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u672c\u9898\u8981\u6c42\u4e0d\u6539\u53d8\u5143\u7d20\u987a\u5e8f\u5220\u9664\u539f\u5730\u5220\u9664\u7279\u5b9a\u5143\u7d20\uff0c\u56e0\u6b64\u60f3\u5230\u7528\u5feb\u6162\u6307\u9488\u6c42\u89e3</li> </ul> <pre><code>class Solution:\n    def removeDuplicates(self, nums: List[int]) -&gt; int:\n        slow, fast = 1, 1\n        while fast &lt; len(nums):\n            if nums[fast] != nums[fast - 1]:\n                nums[slow] = nums[fast]\n                slow += 1\n            fast += 1\n        return slow\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%8F%8C%E6%8C%87%E9%92%88/#283","title":"283. \u79fb\u52a8\u96f6","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u9996\u5148\u9898\u76ee\u8981\u6c42\u5c06\u4e0d\u4e3a0\u7684\u5143\u7d20\u653e\u5728\u6570\u7ec4\u524d\u9762\uff0c\u4e14\u4e0d\u6539\u53d8\u5143\u7d20\u76f8\u5bf9\u4f4d\u7f6e\uff0c\u5219\u8003\u8651\u4f7f\u7528\u5feb\u6162\u6307\u9488\uff1b\u53c8\u56e0\u4e3a\u9898\u76ee\u8981\u6c42\u672b\u5c3e\u5143\u7d20\u9700\u8981\u90fd\u662f0\uff0c\u90a3\u4e48\u4e0d\u540c\u4e8e27. \u79fb\u9664\u5143\u7d20\uff0c\u4e0d\u80fd\u4ec5\u4ec5\u662f\u5c06\u6162\u6307\u9488\u66f4\u65b0\u4e3a\u5feb\u6307\u9488\u4f4d\u7f6e\u7684\u6570\u503c\uff0c\u800c\u9700\u8981\u5c06\u5feb\u6307\u9488\u4e5f\u66f4\u65b0\u4e3a\u6162\u6307\u9488\u5bf9\u5e94\u6570\u503c\uff0c\u8fd9\u6837\u7684\u6548\u679c\u7b49\u4ef7\u4e8e0\u4e00\u76f4\u540e\u79fb\u3002\u53e6\u4e00\u79cd\u65b9\u5f0f\u5219\u662f\u6309\u7167\u539f\u59cb\u5feb\u6162\u6307\u9488\u7684\u65b9\u5f0f\u5f97\u5230\u65b0\u6570\u7ec4\u957f\u5ea6\uff0c\u7136\u540e\u5c06\u6570\u7ec4\u672b\u5c3e\u7f6e\u4e3a\u51680\uff1b</li> </ul> <pre><code># 1\nclass Solution:\n    def moveZeroes(self, nums: List[int]) -&gt; None:     \n        slow, fast = 0, 0\n        while fast &lt; len(nums):\n            if nums[fast] != 0:\n                nums[slow], nums[fast] = nums[fast], nums[slow]\n                slow += 1\n            fast += 1\n        return nums\n\n# 2\nclass Solution:\n    def moveZeroes(self, nums: List[int]) -&gt; None:\n        fast, slow = 0, 0\n        while fast &lt; len(nums):\n            if nums[fast] != 0:\n                nums[slow] = nums[fast]\n                slow += 1\n            fast += 1\n        nums[slow:] = [0] * (len(nums) - slow)\n        return nums\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%8F%8C%E6%8C%87%E9%92%88/#844","title":"844. \u6bd4\u8f83\u542b\u9000\u683c\u7684\u5b57\u7b26\u4e32","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u9996\u5148\u9898\u76ee\u53ef\u4ee5\u62bd\u8c61\u6210\u539f\u5730\u5220\u9664\u6ee1\u8db3\u7279\u5b9a\u6761\u4ef6\u7684\u6570\u7ec4\u5143\u7d20\uff0c\u4e14\u4fdd\u6301\u6570\u7ec4\u5143\u7d20\u4f4d\u7f6e\u4e0d\u53d8\uff0c\u90a3\u4e48\u8fd9\u5c31\u60f3\u5230\u5feb\u6162\u6307\u9488\uff1b\u76f8\u6bd427. \u79fb\u9664\u5143\u7d20\uff0c\u672c\u9898\u7684\u533a\u522b\u5728\u4e8e\u5f53\u5feb\u6307\u9488\u6307\u5411\u7279\u5b9a\u5143\u7d20\u65f6\uff0c\u6162\u6307\u9488\u9700\u8981\u540e\u9000\u4e00\u6b65\uff1b</li> </ul> <pre><code>class Solution:\n    def backspaceCompare(self, s: str, t: str) -&gt; bool:\n        def delBackspace(s):\n            s = list(s)\n            slow, fast = 0, 0\n            while fast &lt; len(s):\n                if s[fast] != '#':\n                    s[slow] = s[fast]\n                    slow += 1\n                else:\n                    if slow &gt;= 1:\n                        slow -= 1\n                fast += 1\n            return s[:slow]\n        return delBackspace(s) == delBackspace(t)\n</code></pre> <ul> <li>\u672c\u9898\u7528\u6808\u66f4\u5bb9\u6613\u7406\u89e3\uff1a\u9996\u5148\u521b\u5efa\u7a7a\u6808\uff0c\u9047\u5230\u975e#\u53f7\u5c31\u5165\u6808\uff0c\u5426\u5219pop\u6808\u9876\u5143\u7d20</li> </ul> <pre><code>class Solution:\n    def backspaceCompare(self, s: str, t: str) -&gt; bool:\n        # \u501f\u7528\u6808\u64cd\u4f5c\u66f4\u5bb9\u6613\u7406\u89e3\n        def delBackspace(s: str):\n            ls = []\n            for c in s:\n                if c == '#':\n                    if ls:\n                        ls.pop()\n                else:\n                    ls.append(c)\n            return ls\n        return delBackspace(s) == delBackspace(t)\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%8F%8C%E6%8C%87%E9%92%88/#977","title":"977. \u6709\u5e8f\u6570\u7ec4\u7684\u5e73\u65b9","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u672c\u9898\u4e0e\u524d\u9762\u7684\u53cc\u6307\u9488\u95ee\u9898\u662f\u4e3a\u4e86\u5c06\u7279\u5b9a\u5143\u7d20\u539f\u5730\u5220\u9664/\u79fb\u4f4d\u7f6e\u4e0d\u540c\uff0c\u53ea\u662f\u56e0\u4e3a\u6570\u7ec4\u4e24\u7aef\u5143\u7d20\u66f4\u5927\uff0c\u6240\u4ee5\u60f3\u5230\u9700\u8981\u7528\u53cc\u5411\u6307\u9488\uff1b\u540c\u65f6\u8fd8\u6709\u4e00\u70b9\u662f\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u4ece\u540e\u5411\u524d\u904d\u5386\u7684\u6570\u7ec4\u7528\u4e8e\u4fdd\u5b58\u7ed3\u679c\u3002</li> </ul> <pre><code>class Solution:\n    def sortedSquares(self, nums: List[int]) -&gt; List[int]:\n        n = len(nums)\n        left, right = 0, n - 1\n        res = [0] * n\n        idx = n - 1\n        while left &lt;= right:\n            if abs(nums[left]) &gt; abs(nums[right]):\n                res[idx] = nums[left] ** 2\n                left += 1\n            else:\n                res[idx] = nums[right] ** 2\n                right -= 1\n            idx -= 1\n        return res\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%8F%8C%E6%8C%87%E9%92%88/#209","title":"209. \u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u9996\u5148\u60f3\u5230\u5e94\u8be5\u7528\u4e24\u4e2a\u6307\u9488\u6765\u66f4\u65b0\u8fde\u7eed\u5b50\u6570\u7ec4\uff0c\u5176\u4e2d\u53f3\u6307\u9488\u904d\u5386\u6570\u7ec4\uff0c\u5de6\u6307\u9488\u53ea\u6709\u5728\u76ee\u524d\u7684\u5b50\u6570\u7ec4\u6ee1\u8db3\u6761\u4ef6\u65f6\u624d\u66f4\u65b0\uff08\u9700\u8981\u6ce8\u610f\u4f7f\u7528while\uff0c\u800c\u4e0d\u662fif\uff0c\u56e0\u4e3a\u53ef\u80fd\u66f4\u65b0\u4e00\u4e2a\u503c\u4e4b\u540e\u4ecd\u7136\u6ee1\u8db3\u6761\u4ef6\uff09</li> </ul> <pre><code>class Solution:\n    def minSubArrayLen(self, s: int, nums: List[int]) -&gt; int:\n        sub_sum = 0\n        left = 0\n        res = float('inf')\n        for right in range(len(nums)):\n            sub_sum += nums[right]\n            while sub_sum &gt;= s:\n                res = min(res, right - left + 1)\n                sub_sum -= nums[left]\n                left += 1\n        return res if res != float('inf') else 0\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%8F%8C%E6%8C%87%E9%92%88/#904","title":"904. \u6c34\u679c\u6210\u7bee","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u672c\u9898\u5f88\u5bb9\u6613\u53ef\u4ee5\u60f3\u5230\u7528\u53cc\u6307\u9488/\u6ed1\u52a8\u7a97\u53e3\uff0c\u96be\u70b9\u662f\u600e\u4e48\u8bb0\u5f55\u72b6\u6001\uff0c\u56e0\u4e3a\u4e0d\u4ec5\u8981\u8bb0\u5f55\u7c7b\u522b\u4e2a\u6570\uff0c\u8fd8\u8981\u8bb0\u5f55\u4e0d\u540c\u6c34\u679c\u7684\u4e2a\u6570\uff0c\u56e0\u6b64\u8003\u8651\u4f7f\u7528\u5b57\u5178\u6765\u8bb0\u5f55\u4e0d\u540c\u6c34\u679c\u4e2a\u6570\uff0c\u56e0\u4e3a<code>python</code>\u9ed8\u8ba4\u5b57\u5178\u4e0d\u652f\u6301\u7d22\u5f15\u4e0d\u5b58\u5728\u7684\u952e\uff0c\u56e0\u6b64\u4f7f\u7528<code>collections</code>\u5e93\u4e2d\u7684<code>defaultdict</code>\u6216\u8005<code>Counter</code>\u66f4\u65b9\u4fbf\uff0c\u524d\u8005\u53ef\u4ee5\u7d22\u5f15\u4e0d\u5b58\u5728\u7684\u952e\uff08\u8fd4\u56de0\uff09</li> </ul> <pre><code># \u4f7f\u7528\u5b57\u5178\nclass Solution:\n    def totalFruit(self, fruits: List[int]) -&gt; int:\n        left = 0\n        res = 0\n        class_cnt = 0\n        class_map = {}\n        for right in range(len(fruits)):\n            if (fruits[right] not in class_map) or (class_map[fruits[right]] == 0):\n                class_cnt += 1\n                class_map[fruits[right]] = 1\n            else:\n                class_map[fruits[right]] += 1\n\n            while class_cnt &gt; 2:\n                if class_map[fruits[left]] == 1:\n                    class_cnt -= 1\n                class_map[fruits[left]] -= 1\n                left += 1\n\n            res = max(res, right - left + 1)\n        return res\n\n# \u4f7f\u7528defaultdict\nclass Solution:\n    def totalFruit(self, fruits: List[int]) -&gt; int:\n        left = 0\n        res = 0\n        class_cnt = 0\n        class_map = defaultdict(int)\n        for right in range(len(fruits)):\n            if class_map[fruits[right]] == 0:\n                class_cnt += 1\n            class_map[fruits[right]] += 1\n            while class_cnt &gt; 2:\n                if class_map[fruits[left]] == 1:\n                    class_cnt -= 1\n                class_map[fruits[left]] -= 1\n                left += 1\n            res = max(res, right - left + 1)\n        return res\n\n# \u4f7f\u7528Counter\nclass Solution:\n    def totalFruit(self, fruits: List[int]) -&gt; int:\n        cnt = Counter()\n        left = ans = 0\n        for right, x in enumerate(fruits):\n            cnt[x] += 1\n            while len(cnt) &gt; 2:\n                cnt[fruits[left]] -= 1\n                if cnt[fruits[left]] == 0:\n                    cnt.pop(fruits[left])\n                left += 1\n            ans = max(ans, right - left + 1)\n        return ans\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%8F%8C%E6%8C%87%E9%92%88/#76","title":"76. \u6700\u5c0f\u8986\u76d6\u5b50\u4e32","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u672c\u9898\u5173\u952e\u70b9\u5728\u4e8e\u600e\u4e48\u6bd4\u8f83\u5b50\u5b57\u7b26\u4e32\u662f\u5426\u8986\u76d6\u76ee\u6807\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u6bcf\u6b21\u904d\u5386\u90fd\u6309\u5143\u7d20\u6bd4\u8f83\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\uff0c\u5219\u65f6\u95f4\u590d\u6742\u5ea6\u8fbe\u5230\\(O(n^2)\\)\uff0c\u56e0\u6b64\u9700\u8981\u8003\u8651\u5176\u4ed6\u65b9\u5f0f\u6765\u6bd4\u8f83\uff1a\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u76ee\u524d\u8fd8\u9700\u8981\u7684\u5b57\u7b26\uff08\u7528\u4e8e\u586b\u5145\u76ee\u6807\u5b57\u7b26\u4e32\uff09\u7684\u5b57\u5178\u6765\u8fbe\u5230\u8fd9\u4e00\u76ee\u7684</li> </ul> <pre><code>class Solution:\n    def minWindow(self, s: str, t: str) -&gt; str:\n        left = 0\n        res = ''\n        need_map = {}\n        for c in t:\n            if c not in need_map:\n                need_map[c] = 1\n            else:\n                need_map[c] += 1\n        need_cnt = len(t)\n        for right in range(len(s)):\n            if s[right] in need_map:\n                if need_cnt &gt; 0:\n                    need_cnt -= 1\n                need_map[s[right]] -= 1\n            while need_cnt == 0:\n                if not res or right - left + 1 &lt; len(res):\n                    res = s[left: right + 1]\n                if s[left] in need_map:\n                    # \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u5b57\u5178\u4e2d\u67d0\u4e2a\u5143\u7d20\u5bf9\u5e94\u6570\u503c\u53ef\u80fd\u5c0f\u4e8e0\n                    if need_map[s[left]] == 0:\n                        need_cnt += 1\n                    need_map[s[left]] += 1\n                left += 1\n        return res\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%93%88%E5%B8%8C%E8%A1%A8/","title":"\u4ee3\u7801-\u54c8\u5e0c\u8868","text":"<ul> <li>\u4ee3\u7801-\u54c8\u5e0c\u8868<ul> <li>\u6982\u8ff0</li> <li>\u9898\u76ee<ul> <li>242.\u6709\u6548\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd</li> <li>349.\u4e24\u4e2a\u6570\u7ec4\u7684\u4ea4\u96c6</li> <li>202/\u5feb\u4e50\u6570</li> <li>1.\u4e24\u6570\u4e4b\u548c</li> <li>454.\u56db\u6570\u76f8\u52a0II</li> <li>383.\u8d4e\u91d1\u4fe1</li> <li>15.\u4e09\u6570\u4e4b\u548c</li> <li>18.\u56db\u6570\u4e4b\u548c</li> </ul> </li> </ul> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%93%88%E5%B8%8C%E8%A1%A8/#_1","title":"\u6982\u8ff0","text":"<p>\u54c8\u5e0c\u8868\u901a\u8fc7\u54c8\u5e0c\u51fd\u6570\u5c06\u5143\u7d20\u6620\u5c04\u5230\u7279\u5b9a\u6570\u5b57\uff0c\u4ece\u800c\u53ef\u4ee5\u5b9e\u73b0\\(O(1)\\)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u7d22\u5f15\u5143\u7d20\u3002</p>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%93%88%E5%B8%8C%E8%A1%A8/#_2","title":"\u9898\u76ee","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%93%88%E5%B8%8C%E8%A1%A8/#242","title":"242.\u6709\u6548\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u7b2c\u4e00\u79cd\u601d\u8def\uff1a\u56e0\u4e3a\u53ea\u670926\u4e2a\u5b57\u6bcd\uff0c\u6240\u4ee5\u6784\u5efa\u4e00\u4e2a\u957f\u4e3a26\u7684\u6570\u5b57\u8bb0\u5f55a-z\u7684\u4e2a\u6570\u5373\u53ef\uff0c\u5148\u904d\u5386\u4e00\u4e2a\u5b57\u7b26\u4e32\u8bb0\u5f55\u4e2a\u6570\uff0c\u7136\u540e\u904d\u5386\u53e6\u4e00\u4e2a\u5b57\u7b26\u4e32\u51cf\u5c0f\u4e2a\u6570\uff1b</li> </ul> <pre><code>class Solution:\n    def isAnagram(self, s: str, t: str) -&gt; bool:\n        res = [0] * 26\n        for c in s:\n            res[ord(c) - ord('a')] += 1\n        for c in t:\n            res[ord(c) - ord('a')] -= 1\n        for i in range(26):\n            if res[i] != 0:\n                return False\n        return True\n</code></pre> <ul> <li>\u7b2c\u4e8c\u79cd\u601d\u8def\uff1a\u76f4\u63a5\u7528<code>dict</code>\u6216\u8005collections\u5e93\u4e2d\u7684<code>defacultdict</code>\u6216\u8005<code>Counter</code>\u7c7b\u89e3\u51b3</li> </ul> <pre><code>class Solution:\n    def isAnagram(self, s: str, t: str) -&gt; bool:\n        return Counter(s) == Counter(t)\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%93%88%E5%B8%8C%E8%A1%A8/#349","title":"349.\u4e24\u4e2a\u6570\u7ec4\u7684\u4ea4\u96c6","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u7528\u96c6\u5408\u6c42\u89e3</li> </ul> <pre><code>class Solution:\n    def intersection(self, nums1: List[int], nums2: List[int]) -&gt; List[int]:\n        return list(set(nums1) &amp; set(nums2))\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%93%88%E5%B8%8C%E8%A1%A8/#202","title":"202/\u5feb\u4e50\u6570","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li> <p>\u6c42\u51fa\u6570\u5b57\u5404\u4e2a\u4f4d\u6570\u5e73\u65b9\u4e4b\u548c\u4e4b\u540e\uff0c\u7528\u6570\u7ec4\u8bb0\u5f55\u5373\u53ef</p> </li> <li> <p>\u5176\u4e2d\u6c42\u6570\u5b57\u5404\u4f4d\u6570\u4e4b\u548c\u53ef\u4ee5\u7528\u6c42\u4f59\uff0c\u4e5f\u53ef\u4ee5\u628a\u6570\u5b57\u8f6c\u6362\u6210\u5b57\u7b26\u4e32</p> </li> </ul> <pre><code>class Solution:\n    def isHappy(self, n: int) -&gt; bool:\n        def calc_squre(n):\n            # return sum([int(c) for c in str(n)])\n            r = 0\n            while n:\n                r += ((n % 10) ** 2)\n                n = n // 10 \n            return r\n        record = []\n        while n:\n            record.append(n)\n            n = calc_squre(n)\n            if n == 1:\n                return True\n            elif n in record:\n                return False \n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%93%88%E5%B8%8C%E8%A1%A8/#1","title":"1.\u4e24\u6570\u4e4b\u548c","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u4f7f\u7528\u54c8\u5e0c\u8868\u8bb0\u5f55\u5df2\u7ecf\u4fbf\u5229\u7684\u6570\u53ca\u5176\u4e0b\u6807\uff0c\u5e76\u4e14\u641c\u7d22\u76ee\u6807\u503c\u4e0e\u5f53\u524d\u904d\u5386\u6570\u5b57\u7684\u5dee\u662f\u5426\u5728\u54c8\u5e0c\u8868\u4e2d</li> </ul> <pre><code>class Solution:\n    def twoSum(self, nums: List[int], target: int) -&gt; List[int]:\n        res = {}\n        for i in range(len(nums)):\n            if target - nums[i] in res:\n                return [res[target - nums[i]], i]\n            res[nums[i]] = i\n\n        # \u53cc\u6307\u9488\n        # \u5bf9\u8f93\u5165\u5217\u8868\u8fdb\u884c\u6392\u5e8f\n        nums_sorted = sorted(nums)\n\n        # \u4f7f\u7528\u53cc\u6307\u9488\n        left = 0\n        right = len(nums_sorted) - 1\n        while left &lt; right:\n            current_sum = nums_sorted[left] + nums_sorted[right]\n            if current_sum == target:\n                # \u5982\u679c\u548c\u7b49\u4e8e\u76ee\u6807\u6570\uff0c\u5219\u8fd4\u56de\u4e24\u4e2a\u6570\u7684\u4e0b\u6807\n                left_index = nums.index(nums_sorted[left])\n                right_index = nums.index(nums_sorted[right])\n                if left_index == right_index:\n                    # \u5f53\u4e24\u4e2a\u6570\u76f8\u7b49\u65f6,index\u65b9\u6cd5\u627e\u5230\u7684\u662f\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4e0b\u6807\n                    right_index = nums[left_index + 1: ].index(nums_sorted[right]) + left_index + 1\n                return [left_index, right_index]\n            elif current_sum &lt; target:\n                # \u5982\u679c\u603b\u548c\u5c0f\u4e8e\u76ee\u6807\uff0c\u5219\u5c06\u5de6\u4fa7\u6307\u9488\u5411\u53f3\u79fb\u52a8\n                left += 1\n            else:\n                # \u5982\u679c\u603b\u548c\u5927\u4e8e\u76ee\u6807\u503c\uff0c\u5219\u5c06\u53f3\u6307\u9488\u5411\u5de6\u79fb\u52a8\n                right -= 1\n</code></pre> <ul> <li>\u4f7f\u7528\u53cc\u7aef\u6307\u9488\u641c\u7d22\uff0c\u8fd9\u9700\u8981\u9996\u5148\u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff0c\u540c\u65f6\u9700\u8981\u6ce8\u610f\u5982\u679c\u627e\u5230\u7684\u4e24\u4e2a\u6570\u5b57\u76f8\u7b49\uff0c\u90a3\u4e48\u7528index\u65b9\u6cd5\u4ecelist\u4e2d\u7d22\u5f15\u65f6\u8fd4\u56de\u7684\u662f\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u6240\u4ee5\u9700\u8981\u8fdb\u4e00\u6b65\u7d22\u5f15</li> </ul> <pre><code>class Solution:\n    def twoSum(self, nums: List[int], target: int) -&gt; List[int]:\n        sort_nums = sorted(nums)\n        i, j = 0, len(nums) - 1\n        num_sum = 0\n        while i &lt; j:\n            num_sum = sort_nums[i] + sort_nums[j]\n            if num_sum == target:\n                id_i = nums.index(sort_nums[i])\n                id_j = nums.index(sort_nums[j])\n                if id_i == id_j:\n                    id_j = nums[id_i + 1: ].index(sort_nums[j]) + id_i + 1\n                return [id_i, id_j]\n            elif num_sum &lt; target:\n                i += 1\n            else:\n                j -= 1\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%93%88%E5%B8%8C%E8%A1%A8/#454ii","title":"454.\u56db\u6570\u76f8\u52a0II","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u7528\u54c8\u5e0c\u8868\u8bb0\u5f55\u4e24\u4e2a\u6570\u7ec4\u7684\u4e24\u6570\u4e4b\u548c\u7684\u4e2a\u6570\uff0c\u7136\u540e\u904d\u5386\u53e6\u5916\u4e24\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u8fd9\u4e24\u4e2a\u6570\u7ec4\u7684\u6570\u5b57\u548c\u7684\u8d1f\u6570\u51fa\u73b0\u5728\u54c8\u5e0c\u8868\u4e2d\uff0c\u7ed3\u679c\u52a0\u4e0a\u54c8\u5e0c\u8868\u7684\u8ba1\u6570\u3002</li> </ul> <pre><code>class Solution:\n    def fourSumCount(self, nums1: List[int], nums2: List[int], nums3: List[int], nums4: List[int]) -&gt; int:\n        sum12 = {}\n        for n1 in nums1:\n            for n2 in nums2:\n                if (n1 + n2) in sum12:\n                    sum12[n1 +n2] += 1\n                else:\n                    sum12[n1 + n2] = 1\n        cnt = 0\n        for n3 in nums3:\n            for n4 in nums4:\n                if -(n3 + n4) in sum12:\n                    cnt += sum12[-(n3 + n4)]\n        return cnt \n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%93%88%E5%B8%8C%E8%A1%A8/#383","title":"383.\u8d4e\u91d1\u4fe1","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u8bb0\u5f55<code>reasomNote</code>\u7684\u5b57\u6bcd\u4e2a\u6570\uff0c\u7136\u540e\u4e0e<code>magazine</code>\u5bf9\u6bd4\u5373\u53ef\uff0c\u53ef\u4ee5\u91c7\u7528\u6570\u7ec4/\u5b57\u5178/<code>defacultdict</code>/<code>Counter</code></li> </ul> <pre><code># \u4f7f\u7528Counter\nclass Solution:\n    def canConstruct(self, ransomNote: str, magazine: str) -&gt; bool:\n        a, b = Counter(ransomNote), Counter(magazine)\n        for k, v in a.items():\n            if (k not in b) or (k in b and v &gt; b[k]):\n                return False\n        return True\n\n# \u4f7f\u7528\u5b57\u5178\nclass Solution:\n    def canConstruct(self, ransomNote: str, magazine: str) -&gt; bool:\n        counts = {}\n        for c in magazine:\n            counts[c] = counts.get(c, 0) + 1\n        for c in ransomNote:\n            if c not in counts or counts[c] == 0:\n                return False\n            counts[c] -= 1\n        return True\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%93%88%E5%B8%8C%E8%A1%A8/#15","title":"15.\u4e09\u6570\u4e4b\u548c","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u53cc\u6307\u9488\uff1a\u9996\u5148\u786e\u5b9a\u4e09\u5143\u7ec4\u5de6\u8fb9\u5143\u7d20\uff0c\u518d\u5bf9\u53f3\u8fb9\u533a\u95f4\u8fdb\u884c\u53cc\u6307\u9488\u904d\u5386\uff0c\u9700\u8981\u6ce8\u610f\u5404\u79cd\u53bb\u91cd\u903b\u8f91</li> </ul> <pre><code>class Solution:\n    def threeSum(self, nums: List[int]) -&gt; List[List[int]]:\n        result = []\n        nums.sort()\n\n        for i in range(len(nums)):\n            # \u5982\u679c\u7b2c\u4e00\u4e2a\u5143\u7d20\u5df2\u7ecf\u5927\u4e8e0\uff0c\u4e0d\u9700\u8981\u8fdb\u4e00\u6b65\u68c0\u67e5\n            if nums[i] &gt; 0:\n                return result\n\n            # \u8df3\u8fc7\u76f8\u540c\u7684\u5143\u7d20\u4ee5\u907f\u514d\u91cd\u590d\n            if i &gt; 0 and nums[i] == nums[i - 1]:\n                continue\n\n            left = i + 1\n            right = len(nums) - 1\n\n            while right &gt; left:\n                sum_ = nums[i] + nums[left] + nums[right]\n\n                if sum_ &lt; 0:\n                    left += 1\n                elif sum_ &gt; 0:\n                    right -= 1\n                else:\n                    result.append([nums[i], nums[left], nums[right]])\n\n                    # \u8df3\u8fc7\u76f8\u540c\u7684\u5143\u7d20\u4ee5\u907f\u514d\u91cd\u590d\n                    while right &gt; left and nums[right] == nums[right - 1]:\n                        right -= 1\n                    while right &gt; left and nums[left] == nums[left + 1]:\n                        left += 1\n\n                    right -= 1\n                    left += 1\n\n        return result\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E5%93%88%E5%B8%8C%E8%A1%A8/#18","title":"18.\u56db\u6570\u4e4b\u548c","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u4e0e15.\u4e09\u6570\u4e4b\u548c\u601d\u8def\u76f8\u540c\uff0c\u6b64\u65f6\u9664\u4e86\u53cc\u6307\u9488\u5916\uff0c\u8fd8\u9700\u8981\u5f15\u5165\u989d\u5916\u4e24\u4e2a\u5faa\u73af\u904d\u5386</li> </ul> <pre><code>class Solution:\n    def fourSum(self, nums: List[int], target: int) -&gt; List[List[int]]:\n        nums.sort()\n        n = len(nums)\n        result = []\n        for i in range(n):\n            if nums[i] &gt; target and nums[i] &gt; 0 and target &gt; 0: # \u526a\u679d\uff08\u53ef\u7701\uff09\n                break\n            if i &gt; 0 and nums[i] == nums[i-1]: # \u53bb\u91cd\n                continue\n            for j in range(i+1, n):\n                if nums[i] + nums[j] &gt; target and target &gt; 0: #\u526a\u679d\uff08\u53ef\u7701\uff09\n                    break\n                if j &gt; i+1 and nums[j] == nums[j-1]: # \u53bb\u91cd\n                    continue\n                left, right = j+1, n-1\n                while left &lt; right:\n                    s = nums[i] + nums[j] + nums[left] + nums[right]\n                    if s == target:\n                        result.append([nums[i], nums[j], nums[left], nums[right]])\n                        while left &lt; right and nums[left] == nums[left+1]:\n                            left += 1\n                        while left &lt; right and nums[right] == nums[right-1]:\n                            right -= 1\n                        left += 1\n                        right -= 1\n                    elif s &lt; target:\n                        left += 1\n                    else:\n                        right -= 1\n        return result\n</code></pre> <p>\u200b      </p>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E6%8E%A8%E7%90%86%E9%A2%98/","title":"\u4ee3\u7801-\u6a21\u62df\u9898","text":"<ul> <li>\u4ee3\u7801-\u6a21\u62df\u9898<ul> <li>\u6982\u8ff0</li> <li>\u9898\u76ee<ul> <li>54. \u87ba\u65cb\u77e9\u9635</li> <li></li> </ul> </li> </ul> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E6%8E%A8%E7%90%86%E9%A2%98/#_1","title":"\u6982\u8ff0","text":"<ul> <li>\u6a21\u62df\u9898\u76ee\u4e0d\u4e00\u5b9a\u5c5e\u4e8e\u67d0\u4e2a\u7c7b\u522b\uff0c\u5173\u952e\u5728\u4e8e\u9700\u8981\u6309\u7167\u903b\u8f91\u987a\u5e8f\u5b9e\u73b0\u4ee3\u7801</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E6%8E%A8%E7%90%86%E9%A2%98/#_2","title":"\u9898\u76ee","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E6%8E%A8%E7%90%86%E9%A2%98/#54","title":"54. \u87ba\u65cb\u77e9\u9635","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u672c\u9898\u5173\u952e\u5728\u4e8e\u5982\u4f55\u6a21\u62df\u8fc7\u7a0b\uff0c\u6bcf\u4e00\u6b65\u90fd\u9700\u8981\u8003\u8651\u6e05\u695a\u8fb9\u754c\u6761\u4ef6</li> </ul> <pre><code>class Solution:\n    def spiralOrder(self, matrix: List[List[int]]) -&gt; List[int]:\n        left, right, top, bottom = 0, len(matrix[0]) - 1, 0, len(matrix) - 1\n        res = []\n        while True:\n            for i in range(left, right + 1):\n                res.append(matrix[top][i])\n            top += 1\n            if top &gt; bottom:\n                break\n            for i in range(top, bottom + 1):\n                res.append(matrix[i][right])\n            right -= 1\n            if left &gt; right:\n                break\n            for i in range(right, left - 1, -1):\n                res.append(matrix[bottom][i])\n            bottom -= 1\n            if top &gt; bottom:\n                break\n            for i in range(bottom, top - 1, -1):\n                res.append(matrix[i][left])\n            left += 1\n            if left &gt; right:\n                break\n        return res\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E6%8E%A8%E7%90%86%E9%A2%98/#_3","title":"\u4ee3\u7801-\u6a21\u62df\u9898","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E8%B4%AA%E5%BF%83/","title":"\u8d2a\u5fc3","text":"<ul> <li>\u8d2a\u5fc3<ul> <li>\u9898\u76ee<ul> <li>455.\u5206\u53d1\u997c\u5e72</li> <li>376.\u6446\u52a8\u5e8f\u5217</li> <li>53.\u6700\u5927\u5b50\u6570\u7ec4\u548c</li> <li>55.\u8df3\u8dc3\u6e38\u620f</li> <li>45.\u8df3\u8dc3\u6e38\u620fII</li> <li>1005.K\u6b21\u53d6\u53cd\u540e\u6700\u5927\u5316\u7684\u6570\u7ec4\u548c</li> <li>134.\u52a0\u6cb9\u7ad9</li> <li>135.\u5206\u53d1\u7cd6\u679c</li> <li>406.\u6839\u636e\u8eab\u9ad8\u91cd\u5efa\u961f\u5217</li> <li>452.\u7528\u6700\u5c11\u6570\u91cf\u7684\u7bad\u5f15\u7206\u6c14\u7403</li> <li>435.\u65e0\u91cd\u53e0\u533a\u95f4</li> <li>763.\u5212\u5206\u5b57\u6bcd\u533a\u95f4</li> <li>56.\u5408\u5e76\u533a\u95f4</li> <li>738.\u5355\u8c03\u9012\u589e\u7684\u6570\u5b57</li> </ul> </li> </ul> </li> </ul> <p>\u8d2a\u5fc3\u7c7b\u7684\u9898\u76ee\u66f4\u50cf\u667a\u529b\u9898\u3002</p>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E8%B4%AA%E5%BF%83/#_2","title":"\u9898\u76ee","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E8%B4%AA%E5%BF%83/#455","title":"455.\u5206\u53d1\u997c\u5e72","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li> <p>:exclamation:\u53ef\u4ee5\u6709\u4e24\u79cd\u601d\u8def\uff1a</p> </li> <li> <p>\u9996\u5148\u6ee1\u8db3\u80c3\u53e3\u5c0f\u7684\uff0c\u90a3\u4e48\u5c31\u6309\u4ece\u5c0f\u5230\u5927\u904d\u5386\u997c\u5e72\uff0c\u8bb0\u5f55\u53ef\u4ee5\u6ee1\u8db3\u7684\u5b69\u5b50\u6570\u76ee</p> <pre><code>class Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -&gt; int:\n        g.sort()\n        s.sort()\n        idx = 0\n        for i in range(len(s)):\n            if idx &lt; len(g) and g[idx] &lt;= s[i]:\n                idx += 1\n        return idx\n</code></pre> </li> <li> <p>\u9996\u5148\u6ee1\u8db3\u80c3\u53e3\u5927\u7684\uff0c\u6b64\u65f6\u9700\u8981\u6ce8\u610f\u9700\u8981\u904d\u5386\u80c3\u53e3\u800c\u4e0d\u662f\u997c\u5e72\uff0c\u56e0\u4e3a\u5982\u679c\u904d\u5386\u997c\u5e72\uff0c\u5f53\u78b0\u5230\u65e0\u6cd5\u6ee1\u8db3\u7684\u5b69\u5b50\u65f6\uff0c\u90a3\u4e48\u7ee7\u7eed\u904d\u5386\u997c\u5e72\u90fd\u65e0\u6cd5\u6ee1\u8db3\u8fd9\u4e2a\u5b69\u5b50\uff0c\u4f46\u662f\u6ca1\u529e\u6cd5\u8df3\u5230\u4e0b\u4e00\u4e2a\u5b69\u5b50\u3002</p> <pre><code>class Solution:\n    def findContentChildren(self, g: List[int], s: List[int]) -&gt; int:\n        g.sort()\n        s.sort()\n        idx = len(s) - 1\n        res = 0\n        for i in range(len(g)-1, -1, -1):\n            if idx &gt;= 0 and s[idx] &gt;= g[i]:\n                res += 1\n                idx -= 1\n        return res\n</code></pre> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E8%B4%AA%E5%BF%83/#376","title":"376.\u6446\u52a8\u5e8f\u5217","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>:exclamation:\u601d\u8def\uff1a\u60f3\u8c61\u6210\u627e\u6ce2\u5cf0\u6ce2\u8c37\uff0c\u6ce2\u5cf0\u6ce2\u8c37\u4e2d\u95f4\u7684\u70b9\u5220\u53bb\u3002\u4f46\u662f\u5f53\u6d89\u53ca\u5e73\u5761\u7684\u65f6\u5019\u9700\u8981\u8003\u8651\u7279\u6b8a\u60c5\u51b5\uff0c\u5bf9\u4e8e\u5e73\u5761\uff0c\u53ef\u4ee5\u9650\u5b9a\u53ea\u8003\u8651\u7b2c\u4e00\u4e2a\u70b9\u6216\u8005\u53ea\u8003\u8651\u6700\u540e\u4e00\u4e2a\u70b9\uff0c\u5982\u679c\u8bb0\u5f53\u524d\u70b9\u4e0e\u524d\u4e00\u4e2a\u70b9\u7684\u5dee\u503c\u4e3apre_diff,\u540e\u4e00\u4e2a\u70b9\u4e0e\u5f53\u524d\u70b9\u7684\u5dee\u503c\u7b49\u4e8epost_diff\uff0c\u90a3\u4e48\u53ea\u8003\u8651\u6700\u540e\u4e00\u4e2a\u70b9\u65f6\uff0c\u5373\u8981\u6c42\uff1a\\(pre_{diff} \\geq 0\\)\u4e14\\(post_{diff}&lt;0\\)\u6216\u8005\\(pre_{diff} \\leq 0\\)\u4e14\\(post_{diff}&gt;0\\)\u3002\u8fd9\u6837\u4ece\u7b2c\u4e00\u4e2a\u70b9\u904d\u5386\u5230\u5012\u6570\u7b2c\u4e8c\u4e2a\u70b9\uff08\u9ed8\u8ba4\u8ba1\u6570\u6700\u540e\u4e00\u4e2a\u70b9\uff0c\u7b2c\u4e00\u4e2a\u70b9\u524d\u9762\u7684pre_diff\u521d\u59cb\u4e3a0\uff09\u65f6\u4f1a\u53d1\u73b0\u4ecd\u7136\u65e0\u6cd5\u901a\u8fc7\u3002\u8fd9\u662f\u56e0\u4e3a\u6f0f\u6389\u4e86\u5355\u8c03\u8d8b\u52bf\u4e2d\u5b58\u5728\u5e73\u5761\u7684\u60c5\u51b5\uff0c ==\u6392\u9664\u8fd9\u79cd\u60c5\u51b5\u7684\u65b9\u5f0f\u53ea\u9700\u8981\u901a\u8fc7\u5728\u53d1\u73b0\u5cf0\u503c\u65f6\u518d\u66f4\u65b0pre_diff\u4e3apost_diff\u5373\u53ef==\u3002</li> </ul> <pre><code>class Solution:\n    def wiggleMaxLength(self, nums: List[int]) -&gt; int:\n        if len(nums) &lt;= 1:\n            return len(nums)  # \u5982\u679c\u6570\u7ec4\u957f\u5ea6\u4e3a0\u62161\uff0c\u5219\u8fd4\u56de\u6570\u7ec4\u957f\u5ea6\n        post_diff = 0  # \u540e\u4e00\u5bf9\u5143\u7d20\u7684\u5dee\u503c\n        pre_diff = 0   # \u524d\u4e00\u5bf9\u5143\u7d20\u7684\u5dee\u503c\n        res = 1  # \u8bb0\u5f55\u5cf0\u503c\u7684\u4e2a\u6570\uff0c\u521d\u59cb\u4e3a1\uff08\u9ed8\u8ba4\u6700\u53f3\u8fb9\u7684\u5143\u7d20\u88ab\u89c6\u4e3a\u5cf0\u503c\uff09\n        for i in range(len(nums) - 1):\n            post_diff = nums[i + 1] - nums[i]  # \u8ba1\u7b97\u4e0b\u4e00\u4e2a\u5143\u7d20\u4e0e\u5f53\u524d\u5143\u7d20\u7684\u5dee\u503c\n            # \u5982\u679c\u9047\u5230\u4e00\u4e2a\u5cf0\u503c\n            if (pre_diff &lt;= 0 and post_diff &gt; 0) or (pre_diff &gt;= 0 and post_diff &lt; 0):\n                res += 1  # \u5cf0\u503c\u4e2a\u6570\u52a01\n                pre_diff = post_diff  # \u6ce8\u610f\u8fd9\u91cc\uff0c\u53ea\u5728\u6446\u52a8\u53d8\u5316\u7684\u65f6\u5019\u66f4\u65b0pre_diff\n        return res  # \u8fd4\u56de\u6700\u957f\u6446\u52a8\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E8%B4%AA%E5%BF%83/#53","title":"53.\u6700\u5927\u5b50\u6570\u7ec4\u548c","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u9996\u5148\u60f3\u5230\u7684\u5e94\u8be5\u662f\u52a8\u6001\u89c4\u5212\uff0c<code>dp[i]</code>\u8868\u793a\u4ee5\u4e0b\u6807<code>i</code>\u7ed3\u5c3e\u7684\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c\uff0c\u6700\u540e\u8fd4\u56de<code>dp</code>\u6570\u7ec4\u7684\u6700\u5927\u503c</li> </ul> <pre><code>class Solution:\n    def maxSubArray(self, nums: List[int]) -&gt; int:\n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        for i in range(1, len(nums)):\n            dp[i] = max(dp[i - 1] + nums[i], nums[i])\n        return max(dp)\n</code></pre> <ul> <li>\u672c\u9898\u7684\u8d2a\u5fc3\u89e3\u6cd5\u5173\u952e\u5728\u4e8e==\u6c42\u7d2f\u8ba1\u548c\u7684\u65f6\u5019\u4e00\u65e6\u7d2f\u8ba1\u548c\u5c0f\u4e8e0\uff0c\u5c31\u5e94\u8be5\u91cd\u65b0\u5f00\u59cb\u7d2f\u8ba1==</li> </ul> <pre><code>class Solution:\n    def maxSubArray(self, nums: List[int]) -&gt; int:\n      result = float('-inf')  # \u521d\u59cb\u5316\u7ed3\u679c\u4e3a\u8d1f\u65e0\u7a77\u5927\n        count = 0\n        for i in range(len(nums)):\n            count += nums[i]\n            if count &gt; result:  # \u53d6\u533a\u95f4\u7d2f\u8ba1\u7684\u6700\u5927\u503c\uff08\u76f8\u5f53\u4e8e\u4e0d\u65ad\u786e\u5b9a\u6700\u5927\u5b50\u5e8f\u7ec8\u6b62\u4f4d\u7f6e\uff09\n                result = count\n            if count &lt;= 0:  # \u76f8\u5f53\u4e8e\u91cd\u7f6e\u6700\u5927\u5b50\u5e8f\u8d77\u59cb\u4f4d\u7f6e\uff0c\u56e0\u4e3a\u9047\u5230\u8d1f\u6570\u4e00\u5b9a\u662f\u62c9\u4f4e\u603b\u548c\n                count = 0\n        return result\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E8%B4%AA%E5%BF%83/#55","title":"55.\u8df3\u8dc3\u6e38\u620f","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u672c\u9898\u9996\u5148\u60f3\u5230\u7684\u662f\u8981\u7ef4\u62a4\u4e00\u4e2a\u5f53\u524d\u904d\u5386\u5230\u7684\u4e0b\u6807\u7684\u6700\u8fdc\u8df3\u8dc3\u8986\u76d6\u8303\u56f4\uff0c\u8fd9\u5176\u4e2d\u7684\u4e00\u4e2a\u5173\u952e\u903b\u8f91\u662f\u80fd\u4e0d\u80fd\u5230\u8fbe\u5f53\u524d\u4e0b\u6807\uff0c\u8fd9\u8981\u6c42\u5f53\u524d\u4e0b\u6807<code>i</code>\u5fc5\u987b\u4e0d\u8d85\u8fc7\u76ee\u524d\u7ef4\u62a4\u6700\u5927\u8986\u76d6\u8303\u56f4</li> </ul> <pre><code>class Solution:\n    def canJump(self, nums: List[int]) -&gt; bool:\n        cover = 0\n        for i in range(len(nums)):\n            if i &lt;= cover:\n                cover = max(i + nums[i], cover)\n                if cover &gt;= len(nums) - 1:\n                    return True\n        return False\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E8%B4%AA%E5%BF%83/#45ii","title":"45.\u8df3\u8dc3\u6e38\u620fII","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>:one: \u9996\u5148\u521d\u770b\u672c\u9898\u60f3\u5230\u7684\u662f\u52a8\u6001\u89c4\u5212\uff0cdp[i]\u5b9a\u4e49\u4e3a\u5230\u8fbe\u7d22\u5f15i\u6240\u9700\u7684\u6700\u5c0f\u8df3\u8dc3\u6b21\u6570\uff0c\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5e94\u8be5\u8868\u793a\u4e3adp[i]=min(dp[i],dp[j]+1),\u5176\u4e2dj\u5c0f\u4e8ei,\u6ee1\u8db3\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u65f6\\(j+nums[j] \\geq i\\),\u521d\u59cb\u5316\u65b9\u5f0f\uff1adp[0]\u8868\u793a\u5230\u8fbe\u4e0b\u68070\u7684\u6700\u5c0f\u8df3\u8dc3\u6b21\u6570\uff0c\u5e94\u8be5\u4e3a0\uff1b\u56e0\u4e3a\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u6d89\u53ca\u6c42\u6700\u5c0f\u503c\uff0c\u6240\u4ee5\u5176\u4ed6\u5143\u7d20\u521d\u59cb\u5316\u4e3a<code>inf</code>,\u53ef\u4ee5\u5199\u51fa\u5982\u4e0b\u4ee3\u7801\uff1a</li> </ul> <pre><code>class Solution:\n    def jump(self, nums: List[int]) -&gt; int:\n        dp = [float('inf')] * len(nums)\n        dp[0] = 0\n        for i in range(1, len(nums)):\n            for j in range(i):\n                if j + nums[j] &gt;= i:\n                    dp[i] = min(dp[i], dp[j]+1)\n        return dp[-1]\n</code></pre> <ul> <li>:two:\u7531\u4e8e\u9898\u76ee\u4e2dnums\u7684\u957f\u5ea6\u6709\u53ef\u80fd\u8fbe\u5230\\(10^4\\),\u6240\u4ee5\u4e0a\u8ff0\u89e3\u7b54\u8d85\u65f6\u4e86\uff0c\u8003\u8651\u8fdb\u4e00\u6b65\u4f18\u5316\u3002\u7b2c\u4e00\u4e2afor\u5faa\u73af\u4e0d\u53ef\u907f\u514d\uff0c\u8003\u8651\u4f18\u5316\u7b2c\u4e8c\u4e2afor\u5faa\u73af\uff0c\u56e0\u4e3a\u53ea\u8981\\(j+nums[j] \\geq i\\)\u65f6\uff0c\u5176\u5b9e\u5c31\u5df2\u7ecf\u627e\u5230\u4e86dp[i]\u7684\u89e3\u4e86\uff0c\u4e14j\u4e0d\u9700\u8981\u4ece0\u5f00\u59cb\uff0c\u53ef\u4ee5\u4ece\u4e0a\u4e00\u4e2aj\u7684\u4f4d\u7f6e\u5f00\u59cb\uff1b\u5e76\u4e14\u6b64\u65f6\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u6839\u636e\u6b64\u65f6\u7684j\u53ef\u4ee5\u76f4\u63a5\u786e\u5b9a\uff1a\\(dp[i] = dp[j] + 1\\)\uff1b\u90a3\u4e48\u6b64\u65f6dp\u6570\u7ec4\u521d\u59cb\u5316\u4e5f\u4e0d\u9700\u8981\u521d\u59cb\u5316\u4e3a<code>inf</code>\u4e86\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f18\u5316\u5982\u4e0b\uff1a</li> </ul> <pre><code>class Solution:\n    def jump(self, nums: List[int]) -&gt; int:\n        dp = [0] * len(nums)\n        j = 0\n        for i in range(1, len(nums)):\n            while j + nums[j] &lt; i:\n                j += 1\n            dp[i] = dp[j] + 1\n        return dp[-1]\n</code></pre> <ul> <li> <p>:three:\u8d2a\u5fc3\u7b56\u7565\uff1a\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4f4d\u7f6e i \u6765\u8bf4\uff0c\u6240\u80fd\u8df3\u5230\u7684\u6240\u6709\u4f4d\u7f6e\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u4e0b\u4e00\u4e2a\u8d77\u8df3\u70b9\uff0c\u4e3a\u4e86\u5c3d\u53ef\u80fd\u4f7f\u7528\u6700\u5c11\u7684\u8df3\u8dc3\u6b21\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u5e94\u8be5\u4f7f\u5f97\u4e0b\u4e00\u6b21\u8d77\u8df3\u6240\u80fd\u8fbe\u5230\u7684\u4f4d\u7f6e\u5c3d\u53ef\u80fd\u7684\u8fdc\u3002\u7b80\u5355\u6765\u8bf4\uff0c\u5c31\u662f\u6bcf\u6b21\u5728\u300c\u53ef\u8df3\u8303\u56f4\u300d\u5185\u9009\u62e9\u53ef\u4ee5\u4f7f\u4e0b\u4e00\u6b21\u8df3\u7684\u66f4\u8fdc\u7684\u4f4d\u7f6e\u3002\u8fd9\u6837\u624d\u80fd\u83b7\u5f97\u6700\u5c11\u8df3\u8dc3\u6b21\u6570\u3002\u5177\u4f53\u505a\u6cd5\u5982\u4e0b\uff1a</p> </li> <li> <p>\u7ef4\u62a4\u51e0\u4e2a\u53d8\u91cf\uff1a\u5f53\u524d\u6240\u80fd\u8fbe\u5230\u7684\u6700\u8fdc\u4f4d\u7f6e end\uff0c\u4e0b\u4e00\u6b65\u6240\u80fd\u8df3\u5230\u7684\u6700\u8fdc\u4f4d\u7f6e max_pos\uff0c\u6700\u5c11\u8df3\u8dc3\u6b21\u6570 steps\u3002</p> </li> <li>\u904d\u5386\u6570\u7ec4 nums \uff1a<ul> <li>\u6bcf\u6b21\u66f4\u65b0\u7b2c i \u4f4d\u7f6e\u4e0b\u4e00\u6b65\u6240\u80fd\u8df3\u5230\u7684\u6700\u8fdc\u4f4d\u7f6e max_pos\u3002</li> <li>\u5982\u679c\u7d22\u5f15 i \u5230\u8fbe\u4e86 end \u8fb9\u754c\uff0c\u5219\uff1a\u66f4\u65b0 end \u4e3a\u65b0\u7684\u5f53\u524d\u4f4d\u7f6e max_pos\uff0c\u5e76\u4ee4\u6b65\u6570 setps \u52a0 1\u3002\u5982\u679c\u4e0b\u4e00\u6b65\u6700\u8fdc\u8ddd\u79bb\u5927\u4e8e\u6570\u7ec4\u6700\u5927\u4e0b\u6807\uff0c\u5219\u8df3\u51fa\u5faa\u73af\u3002\u6700\u7ec8\u8fd4\u56de\u8df3\u8dc3\u6b21\u6570 steps\u3002</li> </ul> </li> </ul> <pre><code>class Solution:\n    def jump(self, nums: List[int]) -&gt; int:\n        end, max_pos = 0, 0\n        steps = 0\n        for i in range(len(nums)):\n            max_pos = max(max_pos, nums[i] + i)\n            if i == end:\n                end = max_pos\n                steps += 1\n                if max_pos &gt;= len(nums) - 1:\n                    break\n        return steps\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E8%B4%AA%E5%BF%83/#1005k","title":"1005.K\u6b21\u53d6\u53cd\u540e\u6700\u5927\u5316\u7684\u6570\u7ec4\u548c","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>:exclamation:\u7531\u4e8e\u6211\u4eec\u5fc5\u987b\u53cd\u8f6ck\u6b21\uff0c\u90a3\u4e48\u6709\u4e0d\u6b62k\u4e2a\u8d1f\u6570\u7684\u8bdd\uff0c\u6211\u4eec\u8981\u53cd\u8f6c\u91cc\u9762\u6700\u5c0f\u7684k\u4e2a\uff0c\u8fd9\u6837\u6700\u5927\u3002 \u6709\u4e0d\u5230k\u4e2a\u8d1f\u6570\u7684\u8bdd\uff08\u6570\u7ec4\u4f1a\u53d8\u4e3a\u5168\u90e8\u4e3a\u6b63\uff09\uff0c \u5269\u4e0b\u7684\u6b21\u6570\u53cd\u590d\u53cd\u8f6c\u6240\u6709\u6570\u91cc\u9762\u7edd\u5bf9\u503c\u6700\u5c0f\u7684\u90a3\u4e2a \uff08\u5982\u679c\u5076\u6570\u6b21\u8d1f\u8d1f\u5f97\u6b63\u6240\u4ee5\u4e0d\u53d8\uff0c\u5947\u6570\u6b21\u76f8\u5f53\u4e8e\u53ea\u53cd\u8f6c\u4e00\u6b21\u6700\u5c0f\u7684\u90a3\u4e2a\uff09</li> </ul> <pre><code>class Solution:\n    def largestSumAfterKNegations(self, nums: List[int], k: int) -&gt; int:\n        nums.sort()\n        m, ans = inf, 0\n        for num in nums:\n            m = min(m, abs(num))\n            if num &lt; 0 and k:\n                k -= 1\n                ans -= num\n            else:\n                ans += num\n        # \u53ea\u6709\u4e00\u79cd\u60c5\u51b5\u6211\u4eec\u9700\u8981\u51cf\u53bb\u6700\u5c0f\u7684\u90a3\u4e2a\uff0ck\u591a\u4f59\u4e86\u4e14\u662f\u5947\u6570\uff08\u7531\u4e8e\u5df2\u7ecf\u52a0\u8fdb\u53bb\u4e86\u6240\u4ee5\u8981\u51cf2\u500d\uff09\n        return ans - 2 * m if k and k % 2 else ans\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E8%B4%AA%E5%BF%83/#134","title":"134.\u52a0\u6cb9\u7ad9","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li> <p>:exclamation:\u524d\u63d0\uff1a\u5982\u679c\u9700\u8981\u6d88\u8017\u7684\u6c7d\u6cb9\u603b\u91cf\\(sum_{cost}\\)\u5927\u4e8e\u52a0\u6cb9\u7ad9\u53ef\u4ee5\u52a0\u6cb9\u7684\u603b\u91cf\\(sum_{gas}\\)\uff0c\u90a3\u4e48\u4e00\u5b9a\u4e0d\u80fd\u5230\u8fbe\uff1b\u5982\u679c\\(sum_{cost}\\leq sum_{gas}\\),\u5219\u4e00\u5b9a\u6709\u89e3\uff0c\u4e14\u89e3\u552f\u4e00\uff1b</p> </li> <li> <p>\u89e3\u6cd5\uff1a\u4ece0\u5f00\u59cb\uff0c\u4e4b\u540e\u6bcf\u5230\u4e00\u4e2a\u7ad9\u70b9\uff0c\u66f4\u65b0\u5269\u4f59\u6cb9\u91cf\uff0c\u5982\u679c\u5230\u7ad9\u70b9i\u65f6\uff08\u5047\u8bbe\u5b58\u5728\u8d1f\u6cb9\u91cf\u7684\u60c5\u51b5\uff09\uff0c\u5269\u4f59\u6cb9\u91cf\u5c0f\u4e8e0\uff0c\u90a3\u4e48\u8bf4\u660e\u7ad9\u70b90\u548ci\u4e4b\u95f4\u4e0d\u5b58\u5728\u6ee1\u8db3\u9898\u610f\u7684\u51fa\u53d1\u70b9\uff1b\u6b64\u65f6\u4ece\u7ad9\u70b9i+1\u5f00\u59cb\u91cd\u65b0\u66f4\u65b0\u5269\u4f59\u6cb9\u91cf\uff0c\u76f4\u5230\u4ece\u67d0\u4e2a\u7ad9\u70b9\u51fa\u53d1\u4e00\u76f4\u5230\u7b2clen(gas)-1\u7ad9\u70b9\u5176\u5269\u4f59\u6cb9\u91cf\u4e00\u76f4\u5927\u4e8e0\uff0c\u5219\u6ee1\u8db3\u6761\u4ef6\u3002</p> </li> </ul> <pre><code>class Solution:\n    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -&gt; int:\n        if sum(gas) &lt; sum(cost):\n            return -1\n        start, total = 0, 0\n        for i in range(len(gas)):\n            total += gas[i] - cost[i]\n            if total &lt; 0:\n                start = i + 1\n                total = 0\n        return start\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E8%B4%AA%E5%BF%83/#135","title":"135.\u5206\u53d1\u7cd6\u679c","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>:exclamation:\u601d\u8def\uff1a\u8fd9\u9053\u9898\u7684\u601d\u8def\u5f88\u76f4\u63a5\u4f46\u662f\u4e5f\u633a\u96be\u60f3\u7684\uff1a\u5148\u4ece\u5de6\u5230\u53f3\u904d\u5386\uff0c\u5904\u7406\u53f3\u8fb9\u5b69\u5b50\u6bd4\u5de6\u8fb9\u5b69\u5b50\u5206\u6570\u9ad8\u7684\u60c5\u51b5\uff1b\u7136\u540e\u4ece\u53f3\u5411\u5de6\u904d\u5386\uff0c\u5904\u7406\u5de6\u8fb9\u5b69\u5b50\u6bd4\u53f3\u8fb9\u5b69\u5b50\u5206\u6570\u9ad8\u7684\u60c5\u51b5\u3002\u6ce8\u610f\u4ece\u5de6\u5411\u53f3\u904d\u5386\u53ea\u80fd\u4ece\u53f3\u5f80\u5de6\u6bd4\uff0c\u56e0\u4e3a\u4ece\u5de6\u5f80\u53f3\u6bd4\u904d\u5386\u540e\u7eed\u5b69\u5b50\u6ca1\u6cd5\u6ee1\u8db3\u6761\u4ef6\uff0c\u4ece\u53f3\u5f80\u5de6\u904d\u5386\u540c\u7406\u3002</li> </ul> <pre><code>class Solution:\n    def candy(self, ratings: List[int]) -&gt; int:\n        n = len(ratings)\n        candies = [1] * n\n        for i in range(1, n):\n            if ratings[i] &gt; ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n        for i in range(n-2, -1, -1):\n            if ratings[i] &gt; ratings[i + 1]:\n                candies[i] = max(candies[i], candies[i + 1] + 1)\n        return sum(candies)\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E8%B4%AA%E5%BF%83/#406","title":"406.\u6839\u636e\u8eab\u9ad8\u91cd\u5efa\u961f\u5217","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li> <p>:exclamation:\u601d\u8def\uff1a\u7531\u4e8e\u8eab\u9ad8\u77ee\u7684\u4eba\u5bf9\u8eab\u9ad8\u9ad8\u7684\u4eba\u7684k\u503c\u6ca1\u6709\u5f71\u54cd\uff0c\u56e0\u6b64\u5e94\u8be5\u6309\u8eab\u9ad8\u4ece\u9ad8\u5230\u4f4e\u63d2\u5165\u5143\u7d20\uff1b\u4e3a\u4e86\u8003\u8651k\u503c\uff0c\u8eab\u9ad8\u76f8\u540c\u7684\u4eba\u5e94\u8be5\u6309\u7167k\u503c\u4ece\u4f4e\u5230\u9ad8\u6392\u5e8f\uff1b\u6bcf\u4e2a\u5143\u7d20\u63d2\u5165\u4f4d\u7f6e\u7b49\u4e8e\u5176k\u503c\u3002</p> </li> <li> <p>\u89e3\u6cd5\u6b65\u9aa4\uff1a</p> </li> <li> <p>\u9996\u5148\u5c06\u6570\u7ec4\u6309\u7167\u8eab\u9ad8\u964d\u5e8f\u6392\u5217\uff0c\u8eab\u9ad8\u76f8\u540c\u7684\u6309\u7167k\u5347\u5e8f\u6392\u5217</p> </li> <li> <p>\u7136\u540e\u904d\u5386\u6570\u7ec4\uff08\u5373\u4ece\u8eab\u9ad8\u9ad8\u7684\u5f00\u59cb\u904d\u5386\uff09\uff0c\u6309\u7167k\u503c\u63d2\u5165\u5143\u7d20\uff0c\u56e0\u4e3a\u8eab\u9ad8\u8f83\u5c0f\u7684\u5373\u4f7f\u63d2\u5165\u5230\u524d\u9762\u4e5f\u4e0d\u5f71\u54cd\u5df2\u7ecf\u63d2\u5165\u8eab\u9ad8\u66f4\u9ad8\u5143\u7d20\u7684k\u503c\u6392\u5217</p> </li> <li> <p>\u4ee3\u7801\uff1a</p> </li> </ul> <pre><code>class Solution:\n    def reconstructQueue(self, people: List[List[int]]) -&gt; List[List[int]]:\n        people.sort(key=lambda x: (-x[0], x[1]))\n        que = []\n        for p in people:\n            que.insert(p[1], p)\n        return que\n</code></pre> <p>### 860.\u67e0\u6aac\u6c34\u627e\u96f6</p> <p></p> <p>\u9898\u89e3\uff1a</p> <ul> <li>:exclamation:\u601d\u8def\uff1a\u672c\u9898\u5173\u952e\u6ce8\u610f\u5f53\u6536\u523010\u5143\u65f6\uff0c\u624b\u4e0a\u5fc5\u987b\u8981\u67095\u5143\uff0c\u5426\u5219\u4e0d\u80fd\u6b63\u786e\u627e\u96f6\uff1b\u6536\u523020\u5143\u65f6\uff0c\u624b\u4e0a\u8981\u4e48\u6709\u81f3\u5c11\u4e00\u4e2a10\u5143\u548c5\u5143\uff0c\u6216\u80053\u4e2a5\u5143\uff0c\u56e0\u4e3a10\u5143\u66f4\u96be\u627e\u51fa\u53bb\uff0c\u6240\u4ee5\u6536\u523020\u5143\u65f6\u4f18\u5148\u627e\u96f610\u5143\u3002</li> </ul> <pre><code>class Solution:\n    def lemonadeChange(self, bills: List[int]) -&gt; bool:\n        five, ten = 0, 0\n        for bill in bills:\n            if bill == 5:\n                five += 1\n            if bill == 10:\n                if five &gt; 0:\n                    five -= 1\n                    ten += 1\n                else:\n                    return False\n            if bill == 20:\n                if ten &gt; 0 and five &gt; 0:\n                    five -= 1\n                    ten -= 1\n                elif five &gt;= 3:\n                    five -= 3\n                else:\n                    return False\n        return True\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E8%B4%AA%E5%BF%83/#452","title":"452.\u7528\u6700\u5c11\u6570\u91cf\u7684\u7bad\u5f15\u7206\u6c14\u7403","text":"<ul> <li> <p>:exclamation:\u601d\u8def\uff1a\u9996\u5148\u672c\u9898\u53ef\u4ee5\u62bd\u8c61\u6210\u533a\u95f4\u76f8\u4ea4\u7684\u95ee\u9898\u3002\u4e24\u4e2a\u533a\u95f4\u76f8\u4ea4\u7684\u6761\u4ef6\u4e3a\u4e00\u4e2a\u533a\u95f4\u7684\u8d77\u70b9\u5c0f\u4e8e\u7b49\u4e8e\uff08\u8fd9\u91cc\u662f\u5426\u53d6\u7b49\u4e8e\u53f7\u9700\u8981\u6839\u636e\u9898\u76ee\u610f\u601d\u5224\u65ad\uff0c\u672c\u9898\u9700\u8981\u53d6\u7b49\u53f7\uff09\u53e6\u4e00\u4e2a\u533a\u95f4\u7684\u7ec8\u70b9\uff1b\u8fdb\u4e00\u6b65\u5730\uff0c==\u591a\u4e2a\u533a\u95f4\u5747\u76f8\u4ea4\u7684\u5145\u8981\u6761\u4ef6\u662f\uff1a\u6240\u6709\u533a\u95f4\u7684\u8d77\u70b9\u5747\u5c0f\u4e8e\u7b49\u4e8e\u6240\u6709\u533a\u95f4\u7ec8\u70b9\u7684\u6700\u5c0f\u503c==\u3002</p> </li> <li> <p>\u56de\u5230\u672c\u9898\uff0c\u5229\u7528\u4e0a\u8ff0\u533a\u95f4\u76f8\u4ea4\u6761\u4ef6\uff0c\u53ea\u9700\u8981\u5c06\u6240\u6709\u533a\u95f4\u6309\u7167\u8d77\u70b9\u6392\u5e8f\uff0c\u7136\u540e\u904d\u5386\u533a\u95f4\uff0c\u4e00\u65e6\u78b0\u5230\u533a\u95f4\u8d77\u70b9\u5927\u4e8e\u76ee\u524d\u6240\u8bb0\u5f55\u5230\u7684\u6700\u5c0f\u7ec8\u70b9\uff0c\u6240\u9700\u8981\u7684\u7bad\u52a0\u4e00\u3002\u4e0b\u9762\u662f\u4e24\u79cd\u89e3\u6cd5\uff0c\u7b2c\u4e00\u79cd\u5355\u72ec\u7ef4\u62a4\u4e00\u4e2a\u5f53\u524d\u6700\u5c0f\u533a\u95f4\u7ec8\u70b9\uff0c\u7b2c\u4e8c\u79cd\u8fdb\u4e00\u6b65\u4f18\u5316\u7a7a\u95f4\u590d\u6742\u5ea6\uff0c\u76f4\u63a5\u7528\u5217\u8868\u5143\u7d20\u4ee3\u66ff\u6b64\u533a\u95f4\u7ec8\u70b9\u3002</p> </li> </ul> <pre><code>class Solution:\n    def findMinArrowShots(self, points: List[List[int]]) -&gt; int:\n        points.sort()\n        end = points[0][1]\n        arrows = 1\n        for i in range(1, len(points)):\n            if points[i][0] &lt;= end:\n                end = min(end, points[i][1])\n            else:\n                arrows += 1\n                end = points[i][1]\n        return arrows\n\nclass Solution:\n    def findMinArrowShots(self, points: List[List[int]]) -&gt; int:\n        points.sort()\n        arrows = 1\n        for i in range(1, len(points)):\n            if points[i][0] &gt; points[i - 1][1]:\n                arrows += 1\n            else:\n                points[i][1] = min(points[i][1], points[i - 1][1])\n        return arrows\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E8%B4%AA%E5%BF%83/#435","title":"435.\u65e0\u91cd\u53e0\u533a\u95f4","text":"<ul> <li>\u601d\u8def\uff1a\u672c\u9898\u4e5f\u662f\u533a\u95f4\u91cd\u53e0\u95ee\u9898\uff0c\u9996\u5148\u627e\u51fa\u91cd\u53e0\u533a\u95f4\u7c7b\u522b\uff0c\u7136\u540e\u7528\u603b\u957f\u5ea6\u51cf\u53bb</li> </ul> <pre><code>class Solution:\n    def eraseOverlapIntervals(self, intervals: List[List[int]]) -&gt; int:\n        intervals.sort()\n        end = intervals[0][1]\n        cnt = 1\n        for i in range(1, len(intervals)):\n            if intervals[i][0] &lt; end:\n                end = min(intervals[i][1], end)\n            else:\n                end = intervals[i][1]\n                cnt += 1\n        return len(intervals) - cnt\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E8%B4%AA%E5%BF%83/#763","title":"763.\u5212\u5206\u5b57\u6bcd\u533a\u95f4","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>:one: \u672c\u9898\u7b2c\u4e00\u79cd\u601d\u8def\u662f\u627e\u51fa\u6bcf\u4e2a\u5b57\u7b26\u51fa\u73b0\u7684\u9996\u5c3e\u4e0b\u6807\uff0c\u7136\u540e\u6309\u7167\u627e\u533a\u95f4\u91cd\u53e0\u6765\u89e3\uff1b</li> </ul> <pre><code>class Solution:\n    def partitionLabels(self, s: str) -&gt; List[int]:\n        s_set = set(s)\n        pos = {}\n        for c in s_set:\n            pos[c] = []\n        for i, c in enumerate(s):\n            pos[c].append(i)\n        for c, value in pos.items():\n            if len(value) == 1:\n                pos[c].append(value[0])\n            else:\n                pos[c] = [value[0], value[-1]]\n        pos_ls = []\n        for p in pos.values():\n            pos_ls.append(p)\n        pos_ls.sort()\n        end = pos_ls[0][1]\n        res = []\n        for i in range(1, len(pos_ls)):\n            if pos_ls[i][0] &lt; end:\n                end = max(end, pos_ls[i][1])\n            else:\n                res.append(end + 1)\n                end = pos_ls[i][1]\n        res.append(end + 1)\n        for i in range(len(res) - 1, 0, -1):\n            res[i] -= res[i - 1]\n        return res\n</code></pre> <ul> <li>:two:\u53e6\u4e00\u79cd\u662f\u9996\u5148\u627e\u51fa\u6bcf\u4e2a\u5b57\u7b26\u6700\u5927\u51fa\u73b0\u4e0b\u6807\uff0c\u7136\u540e\u904d\u5386\u5b57\u7b26\u4e32\uff0c\u5e76\u4e14\u7ef4\u62a4\u4e00\u4e2a\u5f53\u524d\u4f4d\u7f6e\u5b57\u7b26\u6700\u5927\u4e0b\u6807\u4e0e\u4e4b\u524d\u8bb0\u5f55\u7684\u6700\u5927\u4e0b\u6807\u7684\u66f4\u5927\u8005\uff0c\u4e00\u65e6\u904d\u5386\u5230\u7684\u4e0b\u6807\u7b49\u4e8e\u5f53\u524d\u7ef4\u62a4\u7684\u6700\u5927\u4e0b\u6807\uff0c\u8bf4\u660e\u627e\u5230\u4e00\u4e2a\u5206\u754c\u70b9\u3002</li> </ul> <pre><code>class Solution:\n    def partitionLabels(self, s: str) -&gt; List[int]:\n        last_pos = {}\n        for i, c in enumerate(s):\n            last_pos[c] = i\n        last = 0\n        res = []\n        for i, c in enumerate(s):\n            last = max(last_pos[c], last)\n            if i == last:\n                res.append(i + 1)\n        for i in range(len(res) - 1, 0, -1):\n            res[i] -= res[i - 1]\n        return res\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E8%B4%AA%E5%BF%83/#56","title":"56.\u5408\u5e76\u533a\u95f4","text":"<ul> <li>:one:\u672c\u9898\u7c7b\u4f3c\u533a\u95f4\u91cd\u53e0\uff0c\u53ea\u9700\u9700\u8981\u8bb0\u5f55\u533a\u95f4\u6700\u5927\u7ec8\u70b9\uff1b</li> </ul> <pre><code>class Solution:\n    def merge(self, intervals: List[List[int]]) -&gt; List[List[int]]:\n        intervals.sort()\n        start, end, res = intervals[0][0], intervals[0][1], []\n        for i in range(1, len(intervals)):\n            if intervals[i][0] &lt;= end:\n                end = max(end, intervals[i][1])\n            else:\n                res.append([start, end])\n                start, end = intervals[i][0], intervals[i][1]\n        res.append([start, end])     \n        return res\n</code></pre> <ul> <li>:two:\u4ee3\u7801\u53ef\u4ee5\u8fdb\u4e00\u6b65\u4f18\u5316\uff0c\u4e0d\u9700\u8981\u7ef4\u62a4\u5f00\u59cb\u548c\u7ed3\u675f\u53d8\u91cf\uff0c\u56e0\u4e3a\u6bcf\u5f53\u78b0\u5230\u4e00\u4e2a\u4e0d\u91cd\u53e0\u533a\u95f4\u65f6\uff0c\u76f4\u63a5\u628a\u8fd9\u4e2a\u533a\u95f4\u653e\u5165\u7ed3\u679c\u4e2d\uff0c\u7136\u540e\u66f4\u6539\u6b64\u533a\u95f4\u7684\u53f3\u8fb9\u754c\u5c31\u884c\u3002</li> </ul> <pre><code>class Solution:\n    def merge(self, intervals):\n        result = []\n        intervals.sort(key=lambda x: x[0])  # \u6309\u7167\u533a\u95f4\u7684\u5de6\u8fb9\u754c\u8fdb\u884c\u6392\u5e8f\n\n        result.append(intervals[0])  # \u7b2c\u4e00\u4e2a\u533a\u95f4\u53ef\u4ee5\u76f4\u63a5\u653e\u5165\u7ed3\u679c\u96c6\u4e2d\n\n        for i in range(1, len(intervals)):\n            if result[-1][1] &gt;= intervals[i][0]:  # \u53d1\u73b0\u91cd\u53e0\u533a\u95f4\n                # \u5408\u5e76\u533a\u95f4\uff0c\u53ea\u9700\u8981\u66f4\u65b0\u7ed3\u679c\u96c6\u6700\u540e\u4e00\u4e2a\u533a\u95f4\u7684\u53f3\u8fb9\u754c\uff0c\u56e0\u4e3a\u6839\u636e\u6392\u5e8f\uff0c\u5de6\u8fb9\u754c\u5df2\u7ecf\u662f\u6700\u5c0f\u7684\n                result[-1][1] = max(result[-1][1], intervals[i][1])\n            else:\n                result.append(intervals[i])  # \u533a\u95f4\u4e0d\u91cd\u53e0\n\n        return result\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E8%B4%AA%E5%BF%83/#738","title":"738.\u5355\u8c03\u9012\u589e\u7684\u6570\u5b57","text":"<ul> <li>\u672c\u9898\u53ef\u4ee5\u5148\u8003\u8651\u6570\u5b57\u4ece\u5de6\u5230\u53f3\u90fd\u6709\u54ea\u4e9b\u53d8\u5316\u5f62\u5f0f\uff0c\u5982\u679c\u4e0d\u8003\u8651\u591a\u79cd\u8d8b\u52bf\uff0c\u6700\u7b80\u5355\u7684\u5305\u62ec\u56db\u79cd\u8d8b\u52bf\uff1a\u9012\u589e\uff0c\u9012\u51cf\uff0c\u5148\u589e\u518d\u51cf\uff0c\u5148\u51cf\u518d\u589e\u3002\u6bcf\u4e00\u79cd\u5217\u51fa\u4e00\u4e2a\u793a\u4f8b\u5c31\u4f1a\u53d1\u73b0\u6240\u6709\u60c5\u51b5\u4e0b\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u5b57\u662f\u5c06\u5f53\u524d\u6570\u5b57\u4ece\u53f3\u5f80\u5de6\u627e\u5230\u7684\u6700\u540e\u4e00\u4e2a\u4e0d\u6ee1\u8db3\u9012\u589e\u6027\u8d28\u7684\u6570\u5b57\u540e\u9762\u6240\u6709\u6570\u5b57\u90fd\u53d8\u4e3a9\uff0c\u5f53\u524d\u6570\u5b57\u51cf\u4e00\u3002</li> </ul> <pre><code>class Solution:\n    def monotoneIncreasingDigits(self, N: int) -&gt; int:\n        s = list(str(N))\n        n = len(s)\n        for i in range(n - 2, -1, -1):\n            if int(s[i]) &gt; int(s[i + 1]):\n                s[i + 1:] = '9' * (n - 1 - i)\n                s[i] = str(int(s[i]) - 1)\n        return int(''.join(s)) \n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E9%93%BE%E8%A1%A8/","title":"\u4ee3\u7801-\u94fe\u8868","text":"<ul> <li>\u4ee3\u7801-\u94fe\u8868<ul> <li>\u6982\u8ff0</li> <li>\u9898\u76ee<ul> <li>203. \u79fb\u9664\u94fe\u8868\u5143\u7d20</li> <li>707. \u8bbe\u8ba1\u94fe\u8868</li> <li>206. \u53cd\u8f6c\u94fe\u8868</li> <li>24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9</li> <li>19. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c N \u4e2a\u7ed3\u70b9</li> <li>\u9762\u8bd5\u9898 02.07. \u94fe\u8868\u76f8\u4ea4</li> <li>142. \u73af\u5f62\u94fe\u8868 II</li> </ul> </li> </ul> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E9%93%BE%E8%A1%A8/#_1","title":"\u6982\u8ff0","text":"<ul> <li> <p>\u94fe\u8868\u7684\u589e\u5220\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f<code>O(1)</code>\uff0c\u67e5\u8be2\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a<code>O(n)</code>\uff08\u56e0\u4e3a\u9700\u8981\u4ece\u5934\u904d\u5386\u67e5\u627e\uff09</p> </li> <li> <p>\u89e3\u51b3\u94fe\u8868\u9898\u76ee\u5f80\u5f80\u5b9a\u4e49\u4e00\u4e2a\u865a\u62df\u8868\u5934\u66f4\u52a0\u65b9\u4fbf\uff1b\u5f88\u591a\u94fe\u8868\u95ee\u9898\u53ef\u4ee5\u7528\u53cc\u6307\u9488\u89e3\u51b3\uff1b</p> </li> <li> <p>python\u5b9a\u4e49\u94fe\u8868\u793a\u4f8b\uff1a</p> </li> </ul> <pre><code>class Node:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E9%93%BE%E8%A1%A8/#_2","title":"\u9898\u76ee","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E9%93%BE%E8%A1%A8/#203","title":"203. \u79fb\u9664\u94fe\u8868\u5143\u7d20","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u5b9a\u4e49\u4e00\u4e2a\u865a\u62df\u8868\u5934\uff0c\u7136\u540e\u904d\u5386\u94fe\u8868\u5143\u7d20</li> </ul> <pre><code># Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def removeElements(self, head: Optional[ListNode], val: int) -&gt; Optional[ListNode]:\n        dummy_head = ListNode(next=head)\n        cur = dummy_head\n        while cur.next is not None:\n            if cur.next.val == val:\n                cur.next = cur.next.next\n            else:\n                cur = cur.next\n        return dummy_head.next\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E9%93%BE%E8%A1%A8/#707","title":"707. \u8bbe\u8ba1\u94fe\u8868","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u4e3a\u4e86\u904d\u5386\u4fbf\u5229\uff0c\u65b0\u7684\u94fe\u8868\u7c7b\u5e94\u8be5\u5b9a\u4e49\u4e00\u4e2a\u865a\u62df\u5934\u8282\u70b9\uff0c\u540c\u65f6\u56e0\u4e3a\u9700\u8981\u7528\u7d22\u5f15\u904d\u5386\uff0c\u5219\u8fd8\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u94fe\u8868\u957f\u5ea6\u53d8\u91cf\uff1b\u9700\u8981\u6ce8\u610f\u7d22\u5f15\u662f\u5426\u6b63\u786e\uff0c\u540c\u65f6\u589e\u5220\u8282\u70b9\u65f6\u9700\u8981\u66f4\u65b0\u94fe\u8868\u957f\u5ea6\uff0c\u540c\u65f6\u9700\u8981\u5224\u65ad\u7d22\u5f15\u662f\u5426\u6b63\u786e\uff08\u5bf9\u4e8e<code>get/deleteAtIndex</code>\uff0cindex\u4e0d\u80fd\u5927\u4e8e\u7b49\u4e8e\u94fe\u8868\u957f\u5ea6\uff1b\u800c\u5bf9\u4e8e<code>addAtIndex</code>\uff0cindex\u5219\u53ef\u4ee5\u7b49\u4e8e\u94fe\u8868\u957f\u5ea6\uff09</li> </ul> <pre><code>class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\nclass MyLinkedList:\n    def __init__(self):\n        self.dummy_head = ListNode()\n        self.size = 0\n\n    def get(self, index: int) -&gt; int:\n        if index &lt; 0 or index &gt;= self.size:\n            return -1\n        cur = self.dummy_head\n        for i in range(index):\n            cur = cur.next\n        return cur.next.val\n\n    def addAtHead(self, val: int) -&gt; None:\n        self.dummy_head.next = ListNode(val, self.dummy_head.next)\n        self.size += 1\n\n    def addAtTail(self, val: int) -&gt; None:\n        cur = self.dummy_head\n        while cur.next:\n            cur = cur.next\n        cur.next = ListNode(val)\n        self.size += 1\n\n    def addAtIndex(self, index: int, val: int) -&gt; None:\n        if index &lt; 0 or index &gt; self.size:\n            return \n        cur = self.dummy_head\n        for i in range(index):\n            cur = cur.next\n        cur.next = ListNode(val, next=cur.next)\n        self.size += 1\n\n    def deleteAtIndex(self, index: int) -&gt; None:\n        if index &lt; 0 or index &gt;= self.size:\n            return\n        cur = self.dummy_head\n        for i in range(index):\n            cur = cur.next\n        cur.next = cur.next.next\n        self.size -= 1\n\n# Your MyLinkedList object will be instantiated and called as such:\n# obj = MyLinkedList()\n# param_1 = obj.get(index)\n# obj.addAtHead(val)\n# obj.addAtTail(val)\n# obj.addAtIndex(index,val)\n# obj.deleteAtIndex(index)\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E9%93%BE%E8%A1%A8/#206","title":"206. \u53cd\u8f6c\u94fe\u8868","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u53cc\u6307\u9488\uff1a\u5b9a\u4e49\u4e00\u4e2a<code>cur</code>\u548c<code>pre</code>\u6307\u9488\uff0c\u904d\u5386<code>cur</code>\u6307\u9488\uff0c\u5e76\u4e0d\u65ad\u6539\u53d8\u6307\u9488\u6307\u5411\u3002\u672c\u9898\u4e5f\u53ef\u4ee5\u7528\u9012\u5f52\u6765\u89e3\uff0c\u4f46\u662f\u592a\u96be\u7406\u89e3\u4e86\u3002</li> </ul> <pre><code># Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    # \u53cc\u6307\u9488\u6cd5\n    def reverseList(self, head: Optional[ListNode]) -&gt; Optional[ListNode]:\n        cur, pre = head, None\n        while cur:\n            temp = cur.next\n            cur.next = pre\n            pre = cur\n            cur = temp\n        return pre\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E9%93%BE%E8%A1%A8/#24","title":"24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9","text":"<p>\u9898\u89e3\uff1a</p> <pre><code># Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def swapPairs(self, head: Optional[ListNode]) -&gt; Optional[ListNode]:\n        dummy_head = ListNode(next=head)\n        cur = dummy_head\n        while cur.next and cur.next.next:\n            temp = cur.next\n            temp1 = cur.next.next.next\n\n            cur.next = cur.next.next\n            cur.next.next = temp\n            temp.next = temp1\n\n            cur = cur.next.next\n\n        return dummy_head.next\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E9%93%BE%E8%A1%A8/#19-n","title":"19. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c N \u4e2a\u7ed3\u70b9","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u53cc\u6307\u9488\uff1a\u5b9a\u4e49\u5feb\u6162\u6307\u9488\uff0c\u5feb\u6307\u9488\u9886\u5148\u6162\u6307\u9488n\u6b65\uff0c\u5f53\u5feb\u6307\u9488\u5230\u8fbe\u94fe\u8868\u672b\u5c3e\u7684\u65f6\u5019\uff0c\u6162\u6307\u9488\u5230\u8fbe\u6307\u5b9a\u4f4d\u7f6e</li> </ul> <pre><code># Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -&gt; Optional[ListNode]:\n        dummy_head = ListNode(next=head)\n        fast = slow = dummy_head\n        for i in range(n):\n            fast = fast.next\n        while fast.next:\n            fast = fast.next\n            slow = slow.next\n        slow.next = slow.next.next\n        return dummy_head.next\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E9%93%BE%E8%A1%A8/#0207","title":"\u9762\u8bd5\u9898 02.07. \u94fe\u8868\u76f8\u4ea4","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u672c\u9898\u5173\u952e\u662f\u7406\u89e3\u9898\u76ee\u610f\u601d\uff0c\u94fe\u8868\u76f8\u4ea4\u662f\u6307\u540e\u534a\u90e8\u5206\u76f8\u540c\uff1b\u636e\u6b64\u53ea\u9700\u8981\u5c06\u66f4\u957f\u7684\u94fe\u8868\u540e\u79fb\u4e24\u4e2a\u94fe\u8868\u957f\u5ea6\u4e4b\u5dee\u4e2a\u8282\u70b9\u518d\u904d\u5386\u6bd4\u8f83\u4e24\u4e2a\u94fe\u8868\u7684\u8282\u70b9</li> </ul> <pre><code># Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -&gt; ListNode:\n        lenA, lenB = 0, 0\n        cur = headA\n        while cur:         # \u6c42\u94fe\u8868A\u7684\u957f\u5ea6\n            cur = cur.next \n            lenA += 1\n        cur = headB \n        while cur:         # \u6c42\u94fe\u8868B\u7684\u957f\u5ea6\n            cur = cur.next \n            lenB += 1\n        curA, curB = headA, headB\n        if lenA &gt; lenB:     # \u8ba9curB\u4e3a\u6700\u957f\u94fe\u8868\u7684\u5934\uff0clenB\u4e3a\u5176\u957f\u5ea6\n            curA, curB = curB, curA\n            lenA, lenB = lenB, lenA \n        for _ in range(lenB - lenA):  # \u8ba9curA\u548ccurB\u5728\u540c\u4e00\u8d77\u70b9\u4e0a\uff08\u672b\u5c3e\u4f4d\u7f6e\u5bf9\u9f50\uff09\n            curB = curB.next \n        while curA:         #  \u904d\u5386curA \u548c curB\uff0c\u9047\u5230\u76f8\u540c\u5219\u76f4\u63a5\u8fd4\u56de\n            if curA == curB:\n                return curA\n            else:\n                curA = curA.next \n                curB = curB.next\n        return None \n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81-%E9%93%BE%E8%A1%A8/#142-ii","title":"142. \u73af\u5f62\u94fe\u8868 II","text":"<p>\u9898\u89e3\uff1a</p> <ul> <li>\u7b2c\u4e00\u79cd\u65b9\u5f0f\u76f4\u63a5\u904d\u5386\u94fe\u8868\u8282\u70b9\u5e76\u4fdd\u5b58\u5230\u5b57\u5178\u4e2d\uff0c\u5982\u679c\u8282\u70b9\u5df2\u7ecf\u5b58\u5728\uff0c\u8bf4\u660e\u5b58\u5728\u73af</li> </ul> <pre><code># Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\n\nclass Solution:\n    def detectCycle(self, head: ListNode) -&gt; ListNode:\n        visited = set()\n\n        while head:\n            if head in visited:\n                return head\n            visited.add(head)\n            head = head.next\n\n        return None\n</code></pre> <ul> <li>\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u8003\u8651\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u4e2a\u6bcf\u6b21\u904d\u53861\u4e2a\u8282\u70b9\uff0c\u53e6\u4e00\u4e2a\u6bcf\u6b21\u904d\u53862\u4e2a\u8282\u70b9\uff0c\u5982\u679c\u5b58\u5728\u73af\uff0c\u90a3\u4e48\u4e24\u4e2a\u6307\u9488\u4e00\u5b9a\u4f1a\u76f8\u9047\uff0c\u63a5\u4e0b\u6765\u9700\u8981\u627e\u5230\u73af\u7684\u5165\u53e3\uff1b\u9996\u5148\u9700\u8981\u660e\u786e\u76f8\u9047\u65f6\u6162\u6307\u9488\u4e00\u5b9a\u6ca1\u6709\u8d70\u5b8c\u4e00\u5708\uff0c\u5047\u8bbe\u6162\u6307\u9488\u5230\u8fbe\u5165\u53e3\u65f6\uff0c\u5feb\u6307\u9488\u9886\u5148\u6162\u6307\u9488a\u4e2a\u8282\u70b9\uff0c\u7ecf\u8fc7t\u65f6\u95f4\u540e\uff0c\u4e24\u6307\u9488\u76f8\u9047\uff0c\u90a3\u4e48<code>2t-t+a=t+a=nS</code>\uff0c\u8fd9\u91ccS\u4e3a\u73af\u7684\u957f\u5ea6\uff0c\u56e0\u4e3a\\(n \\geq 1\\),\u7b2c\u4e00\u6b21\u76f8\u9047\u65f6<code>t=S-a</code>\uff0c\u8fd9\u8bf4\u660e\u6162\u6307\u9488\u672a\u8d70\u5b8c\u4e00\u5708\uff1b\u5047\u8bbe\u5feb\u6162\u6307\u9488\u76f8\u9047\u4f4d\u7f6e\u8ddd\u79bb\u73af\u5165\u53e3y\uff08\u5982\u4e0b\u56fe\uff09\uff0c\u53ef\u4ee5\u5efa\u7acb\u7b49\u5f0f\\(x+y+n(y+z)=2(x+y)\\)\uff0c\u5373\\(x=(n-1)(y+z)+z\\)\uff0c\u8fd9\u8bf4\u660e\u5f53\u4e00\u4e2a\u6307\u9488\u4ece\u5934\u8282\u70b9\u51fa\u53d1\uff0c\u53e6\u4e00\u4e2a\u6307\u9488\u4ece\u76f8\u9047\u8282\u70b9\u51fa\u53d1\u65f6\uff0c\u5b83\u4eec\u4f1a\u5728\u73af\u7684\u5165\u53e3\u76f8\u9047</li> </ul> <p></p> <pre><code># Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def detectCycle(self, head: Optional[ListNode]) -&gt; Optional[ListNode]:\n        slow = head\n        fast = head\n\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n\n            # If there is a cycle, the slow and fast pointers will eventually meet\n            if slow == fast:\n                # Move one of the pointers back to the start of the list\n                slow = head\n                while slow != fast:\n                    slow = slow.next\n                    fast = fast.next\n                return slow\n        # If there is no cycle, return None\n        return None\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E6%95%B0%E5%AD%A6%E9%A2%98-%E5%BE%AE%E7%A7%AF%E5%88%86%E5%92%8C%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/","title":"\u5fae\u79ef\u5206\u548c\u7ebf\u6027\u4ee3\u6570","text":"<ul> <li>\u5fae\u79ef\u5206\u548c\u7ebf\u6027\u4ee3\u6570<ul> <li></li> </ul> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E6%95%B0%E5%AD%A6%E9%A2%98-%E5%BE%AE%E7%A7%AF%E5%88%86%E5%92%8C%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/#_2","title":"\u5fae\u79ef\u5206\u548c\u7ebf\u6027\u4ee3\u6570","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E6%95%B0%E5%AD%A6%E9%A2%98-%E6%A6%82%E7%8E%87%E8%AE%BA/","title":"\u6982\u7387\u8bba","text":"<ul> <li>\u6982\u7387\u8bba<ul> <li>\u79bb\u6563\u548c\u8fde\u7eed\u5206\u5e03<ul> <li>\u4e00\u4e9b\u57fa\u672c\u5b9a\u4e49</li> <li>\u79bb\u6563\u968f\u673a\u5206\u5e03</li> <li>\u8fde\u7eed\u968f\u673a\u5206\u5e03</li> </ul> </li> </ul> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E6%95%B0%E5%AD%A6%E9%A2%98-%E6%A6%82%E7%8E%87%E8%AE%BA/#_2","title":"\u79bb\u6563\u548c\u8fde\u7eed\u5206\u5e03","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E6%95%B0%E5%AD%A6%E9%A2%98-%E6%A6%82%E7%8E%87%E8%AE%BA/#_3","title":"\u4e00\u4e9b\u57fa\u672c\u5b9a\u4e49","text":"\u968f\u673a\u53d8\u91cfX \u79bb\u6563 \u8fde\u7eed \u7d2f\u79ef\u5206\u5e03\u51fd\u6570<code>cdf</code> \\(F(a) = P(X \\leq a)\\) \\(F(a)=\\int_{-\\infin}^{a}f(x)dx\\) \u5206\u5e03\u5217/\u6982\u7387\u5bc6\u5ea6\u51fd\u6570<code>pdf</code> \\(p(x) = P(X=x)\\) \\(f(x)=\\frac{d}{dx}F(x)\\) X\u7684\u671f\u671b\u671f\u671b<code>E(x)</code> \\(E(x)=\\sum xp(x)\\) \\(E(x)=\\int_{-\\infin}^{\\infin} xf(x) dx\\) \u65b9\u5dee<code>Var(x)</code> \\(Var(x)=E[(X-E^2[X])^2]=E^2[X]-E[X^2]\\) \\(Var(x)=E[(X-E^2[X])^2]=E^2[X]-E[X^2]\\) g(X)\u7684\u671f\u671b<code>E(g(X))</code> \\(E(x)=\\sum g(x)p(x)\\) \\(E(x)=\\int_{-\\infin}^{\\infin} g(x)f(x) dx\\)"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E6%95%B0%E5%AD%A6%E9%A2%98-%E6%A6%82%E7%8E%87%E8%AE%BA/#_4","title":"\u79bb\u6563\u968f\u673a\u5206\u5e03","text":"\u540d\u79f0 \u5206\u5e03\u5217 \u671f\u671b<code>E(X)</code> \u65b9\u5dee<code>Var(X)</code> \u5747\u5300\u5206\u5e03\uff08Union\uff09 \\(P(x)=\\frac{1}{b-a+1}, x=a,a+1,...,b\\) \\(\\frac{a+b}{2}\\) \\(\\frac{(b-a+1)^2-1}{12}\\) \u4f2f\u52aa\u5229\u5206\u5e03\uff08Bernoulli\uff09 \\(P(x)=p^x (1-p)^{1-x}, x=0,1\\) \\(p\\) \\(p(1-p)\\) \u4e8c\u9879\u5206\u5e03\uff08Binomial\uff09 \\(P(x)=C_n^x p^x (1-p)^{n-x}, x=0,1,...,n\\) \\(np\\) \\(np(1-p)\\) \u6cca\u677e\u5206\u5e03\uff08Poisson\uff09 \\(P(x)=\\frac{e^{-\\lambda t (\\lambda t)^x}}{x!}, x=0,1,...\\) \\(\\lambda t\\) \\(\\lambda t\\) \u51e0\u4f55\u5206\u5e03\uff08Geometric\uff09 \\(P(x)=(1-p)^{x-1}p, x=1,2,...\\) \\(\\frac{1}{p}\\) \\(\\frac{1-p}{p^2}\\) \u8d1f\u4e8c\u9879\u5206\u5e03\uff08Negative Binomial\uff09 \\(P(x)=C_{x-1}^{r-1} p^r (1-p)^{x-r}, x=r,r+1,...\\) \\(\\frac{r}{p}\\) \\(\\frac{r(1-p)}{p^2}\\) <p>\u90e8\u5206\u63a8\u5bfc\uff1a</p> <ul> <li>\u4f2f\u52aa\u5229\u5206\u5e03\uff1a\u4f2f\u52aa\u5229\u5206\u5e03\u5728\u968f\u673a\u53d8\u91cf\u53d6\u503c\u4e3a1\u65f6\u6982\u7387\u4e3ap\uff0c\u53d6\u503c\u4e3a0\u65f6\u6982\u7387\u4e3a1-p\u3002\u4e00\u4e2a\u5178\u578b\u7684\u4f8b\u5b50\u662f\u63b7\u4e00\u6b21\u786c\u5e01\uff0c\u6b63\u9762\u5411\u4e0a\u8bb0\u4e3a1\uff0c\u6982\u7387\u4e3ap\u3002</li> <li>\u4e8c\u9879\u5206\u5e03\uff1a\u5c06\u4e00\u679a\u786c\u5e01\u8fde\u7eed\u629b\u63b7n\u6b21\uff0c\u6bcf\u6b21\u629b\u63b7\u6b63\u9762\u5411\u4e0a\u6982\u7387\u4e3ap\uff0c\u53cd\u9762\u5411\u4e0a\u6982\u7387\u4e3a1-p\uff0c\u6bcf\u6b21\u629b\u63b7\u7ed3\u679c\u76f8\u4e92\u72ec\u7acb\uff0c\u90a3\u4e48\u6b63\u9762\u5411\u4e0a\u7684\u6b21\u6570X\u6ee1\u8db3\u4e8c\u9879\u5206\u5e03\u3002\u4e8c\u9879\u5206\u5e03\u5747\u503c\u548c\u65b9\u5dee\u63a8\u5bfc\uff1a</li> <li>\u5747\u503c\uff1a</li> <li>\u65b9\u5dee\uff1a</li> <li>\u51e0\u4f55\u5206\u5e03\uff1a\u8fde\u7eed\u629b\u63b7\u4e00\u679a\u786c\u5e01\uff0c\u6bcf\u6b21\u629b\u63b7\u6b63\u9762\u5411\u4e0a\u6982\u7387\u4e3ap\uff0c\u53cd\u9762\u5411\u4e0a\u6982\u7387\u4e3a1-p\uff0c\u6bcf\u6b21\u629b\u63b7\u7ed3\u679c\u76f8\u4e92\u72ec\u7acb\uff0c\u76f4\u5230\u7b2c\u4e00\u6b21\u51fa\u73b0\u6b63\u9762\u5411\u4e0a\u7684\u6b21\u6570X\u6ee1\u8db3\u51e0\u4f55\u5206\u5e03\u3002\u51e0\u4f55\u5206\u5e03\u7684\u5747\u503c\u548c\u65b9\u5dee\u63a8\u5bfc\u5982\u4e0b:</li> <li>\u5747\u503c\uff1a</li> <li>\u65b9\u5dee\uff1a</li> <li>\u6cca\u677e\u5206\u5e03\uff1a</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E6%95%B0%E5%AD%A6%E9%A2%98-%E6%A6%82%E7%8E%87%E8%AE%BA/#_5","title":"\u8fde\u7eed\u968f\u673a\u5206\u5e03","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/","title":"\u673a\u5668\u5b66\u4e60","text":"<ul> <li>\u673a\u5668\u5b66\u4e60<ul> <li>\u51cf\u5c11\u8fc7\u62df\u5408\u7684\u65b9\u5f0f</li> <li>\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u9009\u62e9\u4ea4\u53c9\u71b5\u635f\u5931\u4f5c\u4e3a\u5206\u7c7b\u95ee\u9898\u7684\u635f\u5931\u51fd\u6570</li> </ul> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/#_2","title":"\u51cf\u5c11\u8fc7\u62df\u5408\u7684\u65b9\u5f0f","text":"<ul> <li>\u6743\u91cd\u8870\u51cf\uff1a\u6743\u91cd\u8870\u51cf\u662f\u6307\u5728\u66f4\u65b0\u635f\u5931\u51fd\u6570\u68af\u5ea6\u7684\u65f6\u5019\u5728\u5bf9\u53c2\u6570\u9879\u6dfb\u52a0\u4e00\u4e2a\u8870\u51cf\u56e0\u5b50\uff0c\u4ece\u539f\u7406\u4e0a\u6743\u91cd\u8870\u51cf\u7b49\u4ef7\u4e8e\u635f\u5931\u51fd\u6570\u7684L2\u6b63\u5219\u5316\u3002</li> <li>\u6b63\u5219\u5316\uff1a\u6b63\u5219\u5316\u76f8\u6bd4\u6743\u91cd\u8870\u51cf\u66f4\u52a0\u4e00\u822c\u3002</li> <li>\u6682\u9000\u6cd5\uff08dropout\uff09</li> <li>\u65e9\u505c</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%AC%94%E9%9D%A2%E8%AF%95/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/#_3","title":"\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u9009\u62e9\u4ea4\u53c9\u71b5\u635f\u5931\u4f5c\u4e3a\u5206\u7c7b\u95ee\u9898\u7684\u635f\u5931\u51fd\u6570","text":"<p>1.\u6570\u5b66\u6027\u8d28:\u4ea4\u53c9\u5ae1\u662f\u4e00\u4e2a\u5e7f\u6cdb\u5e94\u7528\u4e8e\u4fe1\u606f\u8bba\u548c\u673a\u5668\u5b66\u4e60\u4e2d\u7684\u6982\u5ff5\uff0c\u5177\u6709\u826f\u597d\u7684\u6570\u5b66\u6027\u8d28\u3002\u5b83\u662f\u4e00\u4e2a\u975e\u8d1f\u51fd\u6570\uff0c\u5f53\u4e14\u4ec5\u5f53\u4e24\u4e2a\u6982\u7387\u5206\u5e03\u5b8c\u5168\u76f8\u540c\u65f6\u53d6\u5f97\u6700\u5c0f\u503c\u3002\u56e0\u6b64\uff0c\u4f7f\u7528\u4ea4\u53c9\u5ae1\u4f5c\u4e3a\u635f\u5931\u51fd\u6570\u53ef\u4ee5\u5e2e\u52a9\u6a21\u578b\u66f4\u597d\u5730\u62df\u5408\u8bad\u7ec3\u6570\u636e\u3002</p> <p>\u2489.\u6700\u5927\u4f3c\u7136\u4f30\u8ba1:\u4ea4\u53c9\u5ae1\u635f\u5931\u51fd\u6570\u53ef\u4ee5\u4e0e\u6700\u5927\u4f3c\u7136\u4f30\u8ba1(Maximum Likelihood Estimation\uff09\u76f8\u8054\u7cfb\u3002\u5728\u5206\u7c7b\u4efb\u52a1\u4e2d\uff0c\u6211\u4eec\u5e0c\u671b\u6a21\u578b\u7684\u8f93\u51fa\u6982\u7387\u5206\u5e03\u80fd\u591f\u5c3d\u53ef\u80fd\u5730\u63a5\u8fd1\u771f\u5b9e\u6807\u7b7e\u7684\u5206\u5e03\u3002\u6700\u5927\u5316\u4f3c\u7136\u51fd\u6570\u7b49\u4ef7\u4e8e\u6700\u5c0f\u5316\u4ea4\u53c9\u5ae1\u635f\u5931\u51fd\u6570\uff0c\u56e0\u6b64\u4f7f\u7528\u4ea4\u53c9\u5ae1\u53ef\u4ee5\u4f18\u5316\u6a21\u578b\u7684\u5206\u7c7b\u6027\u80fd\u3002</p> <p>3.\u68af\u5ea6\u4e0b\u964d\u4f18\u5316:\u4ea4\u53c9\u5ae1\u635f\u5931\u51fd\u6570\u5bf9\u4e8e\u68af\u5ea6\u4e0b\u964d\u4f18\u5316\u7b97\u6cd5\u6765\u8bf4\u5177\u6709\u826f\u597d\u7684\u53ef\u5bfc\u6027\u8d28\u3002\u68af\u5ea6\u4e0b\u964d\u662f\u4e00\u79cd\u5e38\u7528\u7684\u4f18\u5316\u7b97\u6cd5\uff0c\u901a\u8fc7\u8ba1\u7b97\u635f\u5931\u51fd\u6570\u5bf9\u6a21\u578b\u53c2\u6570\u7684\u68af\u5ea6\u6765\u66f4\u65b0\u53c2\u6570\u503c\uff0c\u4f7f\u5f97\u635f\u5931\u51fd\u6570\u9010\u6e10\u51cf\u5c0f\u3002\u4ea4\u53c9\u5ae1\u635f\u5931\u51fd\u6570\u7684\u68af\u5ea6\u8ba1\u7b97\u76f8\u5bf9\u7b80\u5355\uff0c\u80fd\u591f\u6709\u6548\u5730\u6307\u5bfc\u6a21\u578b\u53c2\u6570\u7684\u66f4\u65b0\u3002</p> <p>4.\u7c7b\u522b\u4e0d\u5e73\u8861\u95ee\u9898:\u5728\u5206\u7c7b\u4efb\u52a1\u4e2d\uff0c\u4e0d\u540c\u7c7b\u522b\u7684\u6837\u672c\u6570\u91cf\u53ef\u80fd\u5b58\u5728\u4e0d\u5e73\u8861\u3002\u4ea4\u53c9\u5ae1\u635f\u5931\u51fd\u6570\u5bf9\u4e8e\u4e0d\u540c\u7c7b\u522b\u7684\u6837\u672c\u6709\u4e0d\u540c\u7684\u6743\u91cd\uff0c\u53ef\u4ee5\u66f4\u597d\u5730\u5904\u7406\u7c7b\u522b\u4e0d\u5e73\u8861\u95ee\u9898\u3002\u5b83\u80fd\u591f\u8ba9\u6a21\u578b\u66f4\u5173\u6ce8\u5c11\u6570\u7c7b\u522b\u7684\u6837\u672c\uff0c\u4ece\u800c\u63d0\u9ad8\u6574\u4f53\u5206\u7c7b\u6027\u80fd\u3002</p>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BB%8F%E9%AA%8C/GPU%E7%89%88%E6%9C%ACtensorflow%E5%92%8Cpytorch%E5%AE%89%E8%A3%85/","title":"GPU\u7248\u672ctensorflow\u548cpytorch\u5b89\u88c5","text":"<ul> <li>GPU\u7248\u672ctensorflow\u548cpytorch\u5b89\u88c5<ul> <li>\u5b89\u88c5cuda\u548ccudnn</li> <li>\u5b89\u88c5tensorflow-gpu</li> <li>\u5b89\u88c5pytorch-gpu</li> <li>\u53c2\u8003</li> </ul> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BB%8F%E9%AA%8C/GPU%E7%89%88%E6%9C%ACtensorflow%E5%92%8Cpytorch%E5%AE%89%E8%A3%85/#cudacudnn","title":"\u5b89\u88c5cuda\u548ccudnn","text":"<ul> <li>\u5b89\u88c5\u663e\u5361\u9a71\u52a8\u7f51\u5740</li> <li>\u67e5\u770b\u663e\u5361\u652f\u6301\u7684cuda\u6700\u9ad8\u7248\u672c!</li> <li>\u67e5\u770bcuda\u3001cudnn\u3001tensorflow\u7248\u672c\u5bf9\u5e94\u5173\u7cfb\u7f51\u5740</li> <li>\u5b89\u88c5cuda\u4e0b\u8f7d\u7f51\u5740\uff0c\u9ed8\u8ba4\u4f1a\u6dfb\u52a0\u73af\u5883\u53d8\u91cf</li> <li>\u4e0b\u8f7dcudnn\u538b\u7f29\u5305\u7f51\u5740\uff0c\u5c06\u4e09\u4e2a\u6587\u4ef6\u5939\u590d\u5236\u5230cuda\u5b89\u88c5\u6587\u4ef6\u5939\u4e0b</li> <li>==\u597d\u50cf\u4e0d\u7528\u5b89\u88c5cuda\u4e5f\u884c\uff1fpip\u5b89\u88c5cudatookit\u4e5f\u53ef\u4ee5\uff1f==</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BB%8F%E9%AA%8C/GPU%E7%89%88%E6%9C%ACtensorflow%E5%92%8Cpytorch%E5%AE%89%E8%A3%85/#tensorflow-gpu","title":"\u5b89\u88c5tensorflow-gpu","text":"<ul> <li>\u6839\u636etensorflow\u7248\u672c\u5b89\u88c5<code>pip install tensorflow-gpu==2.x.x</code></li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BB%8F%E9%AA%8C/GPU%E7%89%88%E6%9C%ACtensorflow%E5%92%8Cpytorch%E5%AE%89%E8%A3%85/#pytorch-gpu","title":"\u5b89\u88c5pytorch-gpu","text":"<ul> <li> <p>\u67e5\u770b\u5bf9\u5e94cuda\u7248\u672c\u7684torch\u548ctorchvision\uff0ctorch\u548ctorchvision\u7248\u672c\u4f9d\u8d56\u5173\u7cfb\u89c1\u7f51\u5740</p> </li> <li> <p>\u4e0b\u8f7d\u5bf9\u5e94\u7248\u672c\u7684torch\u548ctorchvision\u7684whl\u6587\u4ef6\u7f51\u5740</p> </li> <li> <p>\u5b89\u88c5,\u5148\u5b89\u88c5torch</p> </li> </ul> <pre><code>pip install xxx.whl\n</code></pre>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BB%8F%E9%AA%8C/GPU%E7%89%88%E6%9C%ACtensorflow%E5%92%8Cpytorch%E5%AE%89%E8%A3%85/#_1","title":"\u53c2\u8003","text":"<ul> <li>https://blog.csdn.net/Netceor/article/details/119821270</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BB%8F%E9%AA%8C/pip%E4%B8%8B%E8%BD%BD%E6%BA%90%E8%AE%BE%E7%BD%AE/","title":"pip\u76f8\u5173\u95ee\u9898","text":"<ul> <li>pip\u76f8\u5173\u95ee\u9898<ul> <li>pip\u8bbe\u7f6e\u56fd\u5185\u4e0b\u8f7d\u6e90</li> </ul> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BB%8F%E9%AA%8C/pip%E4%B8%8B%E8%BD%BD%E6%BA%90%E8%AE%BE%E7%BD%AE/#pip_1","title":"pip\u8bbe\u7f6e\u56fd\u5185\u4e0b\u8f7d\u6e90","text":"<ul> <li>\u56fd\u5185\u955c\u50cf\u6e90\u5730\u5740(\u63a8\u8350\u6e05\u534e\u6e90)\uff1a</li> <li>\u963f\u91cc\u4e91\uff1ahttp://mirrors.aliyun.com/pypi/simple/</li> <li>\u8c46\u74e3\uff1ahttp://pypi.douban.com/simple/</li> <li>\u6e05\u534e\u5927\u5b66\uff1ahttps://pypi.tuna.tsinghua.edu.cn/simple/</li> <li>\u4e2d\u56fd\u79d1\u5b66\u6280\u672f\u5927\u5b66\uff1ahttp://pypi.mirrors.ustc.edu.cn/simple/</li> <li> <p>\u534e\u4e2d\u79d1\u6280\u5927\u5b66\uff1ahttp://pypi.hustunique.com/</p> </li> <li> <p>\u6c38\u4e45\u8bbe\u7f6e</p> </li> <li> <p><code>pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</code></p> </li> <li> <p>\u4e34\u65f6\u4f7f\u7528\u56fd\u5185\u6e90\u5b89\u88c5</p> </li> <li> <p><code>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple package-name</code></p> </li> <li> <p>\u8bbe\u7f6e\u591a\u4e2a\u5907\u7528\u6e90</p> </li> <li> <p>\u66f4\u6539\u7528\u6237\u76ee\u5f55<code>C:\\Users\\username\\AppData\\Roaming\\pip</code>\u4e0b\u7684<code>pip</code>\u6587\u4ef6\u5939\u5185\u7684<code>pip.ini</code>\u6587\u4ef6</p> </li> <li> <p><code>python     [global]     index-url = https://pypi.mirrors.ustc.edu.cn/simple/     extra-index-url = https://pypi.mirrors.ustc.edu.cn/simple/             https://mirrors.aliyun.com/pypi/simple/             https://pypi.tuna.tsinghua.edu.cn/simple/             http://pypi.mirrors.ustc.edu.cn/simple/             https://pypi.org/simple/     trusted-host = pypi.mirrors.ustc.edu.cn             pypi.mirrors.ustc.edu.cn             mirrors.aliyun.com             pypi.tuna.tsinghua.edu.cn             pypi.mirrors.ustc.edu.cn             pypi.org</code></p> </li> <li></li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BB%8F%E9%AA%8C/%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0/","title":"\u8bba\u6587\u590d\u73b0\u7ecf\u9a8c","text":"<ul> <li>\u8bba\u6587\u590d\u73b0\u7ecf\u9a8c<ul> <li>\u73af\u5883\u914d\u7f6e\u76f8\u5173</li> </ul> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E7%BB%8F%E9%AA%8C/%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0/#_2","title":"\u73af\u5883\u914d\u7f6e\u76f8\u5173","text":"<ul> <li> <p>\u5f88\u591a\u8bba\u6587\u4e2d\u7528<code>.sh</code>\u6587\u4ef6\u8fd0\u884c<code>.py</code>\u6587\u4ef6\uff0c\u5982\u679c\u8981\u5728<code>windows</code>\u7535\u8111\u4e0a\u8fd0\u884c\uff0c\u9700\u8981\u501f\u52a9<code>Git</code>\u3002\u4e0b\u9762\u4ecb\u7ecd\u5728<code>Pycharm</code>\u4e2d\u5229\u7528<code>Git</code>\u7ec8\u7aef\u8fd0\u884c<code>.sh</code>\u6587\u4ef6\u7684\u65b9\u6cd5\uff1a</p> </li> <li> <p>\u9996\u5148\u9700\u8981\u5c06<code>Pycharm</code>\u7684\u7ec8\u7aef\u914d\u7f6e\u6210<code>Git</code>\u7684\u7ec8\u7aef\u3002\u64cd\u4f5c\u65b9\u5f0f\u4e3a\uff1a</p> <p><code>\u6587\u4ef6 -&gt; \u8bbe\u7f6e -&gt; \u5de5\u5177 -&gt; \u7ec8\u7aef -&gt; shell\u8def\u5f84</code></p> <p>\u8fd9\u91cc\u9700\u8981\u5c06shell\u8def\u5f84\u66f4\u6539\u4e3a<code>Git</code>\u5b89\u88c5\u8def\u5f84\u4e0b\u7684<code>bin/sh.exe</code>\u6216\u8005<code>bin/bash.exe</code>\u6587\u4ef6\u5939\u8def\u5f84</p> </li> <li> <p>\u7136\u540e\u5728<code>Pycharm</code>\u4e2d\u6253\u5f00\u7ec8\u7aef\uff0c\u8fd0\u884c<code>sh xx/xx/xx.sh</code>\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f<code>Git</code>\u9ed8\u8ba4\u91c7\u7528Python\u7684Base\u73af\u5883\uff0c\u5982\u679c\u8981\u4f7f\u7528\u5176\u4ed6\u73af\u5883\uff0c\u9700\u8981\u4f9d\u6b21\u8fd0\u884c<code>source activate -&gt; conda activate env_name</code>\uff08\u76f4\u63a5\u8fd0\u884c\u540e\u4e00\u53e5\u4f1a\u62a5\u9519\uff09\u3002</p> </li> <li> <p>\u6b64\u5916\uff0c\u53ef\u4ee5\u66f4\u6539\u7528\u6237\u76ee\u5f55\u4e0b\u7684.bash_profile\u6587\u4ef6\uff0c\u6dfb\u52a0<code>eval \"$('C:/ProgramData/miniconda3/Scripts/conda.exe' 'shell.bash' 'hook')\"</code>\uff0c\u5219\u8fdb\u5165<code>git bash</code>\u9ed8\u8ba4\u8fdb\u5165<code>conda base</code>\u73af\u5883\u3002</p> </li> <li> <p>\u5982\u679c\u6e90\u4ee3\u7801\u4e2d\u4f7f\u7528\u4e86<code>DataLoader</code>\u4e2d\u7684<code>num_workers</code>\uff0c\u5982\u679c\u8981\u987a\u5229\u8fd0\u884c\uff0c\u9700\u8981\u5c06<code>num_workers</code>\u8bbe\u7f6e\u4e3a0\u3002</p> </li> <li> <p>\u5982\u679c\u4ee3\u7801\u91c7\u7528<code>argparse</code>\u8fd9\u79cd\u901a\u8fc7\u547d\u4ee4\u884c\u8fdb\u884c\u53c2\u6570\u914d\u7f6e\u53ca\u65e5\u5fd7\u91cd\u5b9a\u5411\uff0c\u8981\u5728<code>Pycharm</code>\u4e2d\u8c03\u8bd5\u7684\u8bdd\uff0c\u9700\u8981\u5bf9\u4ee3\u7801\u6587\u4ef6\u8fdb\u884c\u914d\u7f6e\u3002\u586b\u5199\u53c2\u6570\u4fe1\u606f\u7684\u683c\u5f0f\u4e3a\uff1a<code>--arg value</code>,\u65e5\u5fd7\u91cd\u5b9a\u5411\u9700\u8981\u5148\u521b\u5efa\u76ee\u6807\u6587\u4ef6\u624d\u884c\u3002\u53e6\u4e00\u79cd\u8c03\u8bd5\u65b9\u5f0f\u662f\u901a\u8fc7\u6784\u5efa\u4e00\u4e2a\u7c7b\u4f3c\u4e8e<code>argparse</code>\u5f97\u5230\u7684\u53c2\u6570\u7c7b\u7684\u65b9\u5f0f\u5bf9\u7a0b\u5e8f\u8fdb\u884c\u6539\u5199\u3002</p> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E9%87%91%E8%9E%8D/%E6%9C%9F%E6%9D%83/","title":"\u671f\u6743","text":"<ul> <li>\u671f\u6743<ul> <li>\u671f\u6743\u5e02\u573a\u673a\u5236<ul> <li>\u671f\u6743\u7c7b\u578b</li> <li>\u671f\u6743\u5934\u5bf8</li> <li>\u6807\u7684\u8d44\u4ea7</li> <li>\u80a1\u7968\u671f\u6743\u7684\u7ec6\u8282</li> <li>\u4ea4\u6613</li> </ul> </li> <li>\u80a1\u7968\u671f\u6743\u7684\u6027\u8d28<ul> <li>\u5f71\u54cd\u671f\u6743\u4ef7\u683c\u7684\u56e0\u7d20</li> </ul> </li> </ul> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E9%87%91%E8%9E%8D/%E6%9C%9F%E6%9D%83/#_2","title":"\u671f\u6743\u5e02\u573a\u673a\u5236","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E9%87%91%E8%9E%8D/%E6%9C%9F%E6%9D%83/#_3","title":"\u671f\u6743\u7c7b\u578b","text":"<ul> <li> <p>\u57fa\u672c\u672f\u8bed\uff1a</p> </li> <li> <p>\u770b\u6da8\u671f\u6743\uff08call option\uff09\uff1a\u671f\u6743\u6301\u6709\u8005\u5728\u5230\u671f\u65e5\uff08\u6216\u4e4b\u524d\uff09\u6709\u6743\u4ee5\u6572\u5b9a\u4ef7\u683c\u4e70\u5165\u8d44\u4ea7</p> </li> <li>\u770b\u8dcc\u671f\u6743\uff08put option\uff09\uff1a\u671f\u6743\u6301\u6709\u8005\u5728\u5230\u671f\u65e5\uff08\u6216\u4e4b\u524d\uff09\u6709\u6743\u4ee5\u6572\u5b9a\u4ef7\u683c\u5356\u51fa\u8d44\u4ea7</li> <li>\u5230\u671f\u65e5\uff08expiration date\uff09/\u6ee1\u671f\u65e5\uff08maturity date\uff09</li> <li>\u6267\u884c\u4ef7\u683c\uff08exercise price\uff09/\u6572\u5b9a\u4ef7\u683c\uff08strike price\uff09</li> <li>\u7f8e\u5f0f\u671f\u6743\uff1a\u53ef\u4ee5\u5728\u5230\u671f\u65e5\u4e4b\u524d\u7684\u4efb\u4f55\u65f6\u523b\u884c\u4f7f\uff0c\u5927\u591a\u6570\u4ea4\u6613\u6240\u91c7\u7528\u7f8e\u5f0f\u671f\u6743</li> <li>\u6b27\u5f0f\u671f\u6743\uff1a\u53ea\u80fd\u5728\u5230\u671f\u65e5\u624d\u80fd\u884c\u4f7f</li> <li> <p>\u671f\u6743\u6301\u6709\u4eba\uff08\u591a\u5934\uff09\uff0c\u671f\u6743\u627f\u7ea6\u65b9\uff08\u7a7a\u5934\uff09</p> </li> <li> <p>\u671f\u6743\u6301\u6709\u4eba\u6301\u6709\u770b\u6da8\u671f\u6743\u4e0e\u770b\u8dcc\u671f\u6743\u7684\u76c8\u5229\u548c\u6807\u7684\u5728\u5230\u671f\u65e5\u4ef7\u683c\u7684\u5173\u7cfb\uff1a</p> </li> </ul> <p></p> <ul> <li>\u5bf9\u4e8e\u770b\u6da8\u671f\u6743\uff1a\u5982\u679c\u5728\u5230\u671f\u65e5\u6807\u7684\u4ef7\u683c\u4f4e\u4e8e\u6267\u884c\u4ef7\u683c\uff0c\u90a3\u4e48\u671f\u6743\u4e0d\u4f1a\u88ab\u6267\u884c\uff0c\u4e70\u5165\u671f\u6743\u7684\u8d39\u7528\u5168\u90e8\u4e8f\u635f\uff1b\u5982\u679c\u4ef7\u683c\u9ad8\u4e8e\u6267\u884c\u4ef7\u683c\uff0c\u671f\u6743\u88ab\u6267\u884c\uff0c\u56e0\u6b64\u671f\u6743\u6301\u6709\u4eba\u53ef\u4ee5\u4ee5\u6267\u884c\u4ef7\u683c\u4e70\u5165\u800c\u4ee5\u6807\u7684\u4ef7\u683c\u5356\u51fa\uff08\u4f4e\u4e70\u9ad8\u5356\uff09\uff1b</li> <li> <p>\u5bf9\u4e8e\u770b\u8dcc\u671f\u6743\uff1a\u5982\u679c\u5728\u5230\u671f\u65e5\u6807\u7684\u4ef7\u683c\u9ad8\u4e8e\u6267\u884c\u4ef7\u683c\uff0c\u90a3\u4e48\u671f\u6743\u4e0d\u4f1a\u88ab\u6267\u884c\uff0c\u4e70\u5165\u671f\u6743\u7684\u8d39\u7528\u5168\u90e8\u4e8f\u635f\uff1b\u5982\u679c\u4ef7\u683c\u4f4e\u4e8e\u6267\u884c\u4ef7\u683c\uff0c\u671f\u6743\u88ab\u6267\u884c\uff0c\u56e0\u6b64\u671f\u6743\u6301\u6709\u4eba\u53ef\u4ee5\u4ee5\u6807\u7684\u4ef7\u683c\u5356\u51fa\u800c\u4ee5\u6267\u884c\u4ef7\u683c\u5356\u51fa\uff08\u4f4e\u4e70\u9ad8\u5356\uff09\uff1b</p> </li> <li> <p>\u671f\u6743\u627f\u7ea6\u65b9\u7684\u76c8\u4e8f\u4e0e\u671f\u6743\u6301\u6709\u4eba\u6070\u597d\u76f8\u53cd\u3002</p> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E9%87%91%E8%9E%8D/%E6%9C%9F%E6%9D%83/#_4","title":"\u671f\u6743\u5934\u5bf8","text":"<ul> <li>\u671f\u6743\u4ea4\u6613\u67094\u79cd\u5934\u5bf8\u5f62\u5f0f\uff1a</li> <li>\u770b\u6da8\u671f\u6743\u591a\u5934</li> <li>\u770b\u8dcc\u671f\u6743\u591a\u5934</li> <li>\u770b\u6da8\u671f\u6743\u7a7a\u5934</li> <li>\u770b\u8dcc\u671f\u6743\u7a7a\u5934</li> <li>\u5728\u4e0d\u8003\u8651\u671f\u6743\u6700\u521d\u4ef7\u683c\u7684\u60c5\u51b5\u4e0b\uff0c\u5047\u5b9a\u6267\u884c\u4ef7\u683c\u4e3a\\(K\\)\uff0c\u6807\u7684\u6700\u7ec8\u4ef7\u683c\u4e3a\\(S_T\\)\uff0c4\u79cd\u5934\u5bf8\u7684\u6b27\u5f0f\u671f\u6743\u6536\u76ca\u5206\u522b\u4e3a\uff1a</li> <li>\u770b\u6da8\u591a\u5934\uff1a\\(max(S_T - K)\\)</li> <li>\u770b\u6da8\u7a7a\u5934\uff1a\\(-max(S_T - K) = min(K - S_T, 0)\\)</li> <li>\u770b\u8dcc\u591a\u5934\uff1a\\(max(K - S_T, 0)\\)</li> <li>\u770b\u8dcc\u7a7a\u5934\uff1a\\(- max(K - S_T, 0) = min(S_T - K,0)\\)</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E9%87%91%E8%9E%8D/%E6%9C%9F%E6%9D%83/#_5","title":"\u6807\u7684\u8d44\u4ea7","text":"<ul> <li>\u80a1\u7968\u671f\u6743\uff1a\u5927\u90e8\u5206\u80a1\u7968\u671f\u6743\u7684\u4ea4\u6613\u5728\u4ea4\u6613\u6240\u8fdb\u884c\u3002\u4e00\u4efd\u671f\u6743\u5408\u7ea6\u5bf9\u5e94100\u53ea\u80a1\u7968\uff08\u5373\u80a1\u7968\u4ea4\u6613\u6700\u5c0f\u624b\u6570\uff09\uff1b</li> <li>\u8d27\u5e01\u671f\u6743\uff1a\u5927\u90e8\u5206\u8d27\u5e01\u671f\u6743\u7684\u4ea4\u6613\u5728\u573a\u5916\u5e02\u573a\u8fdb\u884c\u3002</li> <li>\u6307\u6570\u671f\u6743\uff1a\u573a\u5185\u548c\u573a\u5916\u5e02\u573a\u90fd\u6709\u4ea4\u6613\u3002\u5408\u7ea6\u7ed3\u7b97\u603b\u662f\u4ee5\u73b0\u91d1\u5f62\u5f0f\uff0c\u800c\u4e0d\u662f\u4ea4\u5272\u6307\u6570\u4ea4\u6613\u7ec4\u5408\u3002</li> <li>\u671f\u8d27\u671f\u6743\uff1a\u671f\u8d27\u671f\u6743\u7684\u6709\u6548\u671f\u4e00\u822c\u662f\u5728\u671f\u8d27\u4ea4\u5272\u65e5\u4e4b\u524d\u7684\u4e00\u5c0f\u6bb5\u65f6\u95f4\u3002</li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E9%87%91%E8%9E%8D/%E6%9C%9F%E6%9D%83/#_6","title":"\u80a1\u7968\u671f\u6743\u7684\u7ec6\u8282","text":"<ul> <li>\u6267\u884c\u4ef7\u683c\uff1a\u6267\u884c\u4ef7\u683c\u901a\u5e38\u7531\u4ea4\u6613\u6240\u9009\u5b9a\uff0c\u5f53\u5f15\u5165\u4e00\u4e2a\u65b0\u7684\u5230\u671f\u65e5\u65f6\uff0c\u4ea4\u6613\u6240\u901a\u5e38\u4f1a\u9009\u62e92-3\u4e2a\u6700\u63a5\u8fd1\u80a1\u7968\u5f53\u524d\u4ef7\u683c\u7684\u6267\u884c\u4ef7\u683c\u3002\u5982\u679c\u80a1\u4ef7\u53d8\u52a8\u8d85\u8fc7\u4e86\u6700\u9ad8\u6267\u884c\u4ef7\u683c\u4e0e\u6700\u4f4e\u6267\u884c\u4ef7\u683c\u8303\u56f4\uff0c\u4ea4\u6613\u6240\u4f1a\u5f15\u5165\u65b0\u7684\u6267\u884c\u4ef7\u683c\u7684\u671f\u6743\u3002</li> <li> <p>\u671f\u6743\u7cfb\u5217\uff1a\u4e00\u4e2a\u671f\u6743\u7cfb\u5217\u662f\u7531\u5177\u6709\u76f8\u540c\u5230\u671f\u65e5\u4e0e\u6267\u884c\u4ef7\u683c\u7684\u67d0\u4e2a\u7ed9\u5b9a\u7c7b\u578b\uff08\u770b\u6da8\u6216\u770b\u8dcc\uff09\u7684\u6240\u6709\u671f\u6743\u3002</p> </li> <li> <p>\u5b9e\u503c\u671f\u6743/\u5e73\u503c\u671f\u6743/\u865a\u503c\u671f\u6743\uff1a\u5bf9\u4e8e\u770b\u6da8\u671f\u6743\uff0cS&gt;K\u4e3a\u5b9e\u503c\u671f\u6743\uff0cS&lt;K\u4e3a\u865a\u503c\u671f\u6743\uff0cS=K\u4e3a\u5e73\u503c\u671f\u6743\uff1b\u5bf9\u4e8e\u770b\u6da8\u8dcc\u6743\uff0cSK\u4e3a\u865a\u503c\u671f\u6743\uff0cS=K\u4e3a\u5e73\u503c\u671f\u6743\uff1b <li>\u5185\u6db5\u4ef7\u503c\uff1a\u5047\u8bbe\u671f\u6743\u88ab\u7acb\u523b\u884c\u4f7f\u65f6\u5177\u6709\u7684\u4ef7\u503c\uff1b\u671f\u6743\u7684\u6574\u4f53\u4ef7\u503c\u7b49\u4e8e\u5185\u6db5\u4ef7\u503c\u4e0e\u65f6\u95f4\u4ef7\u503c\u7684\u548c\u3002</li> <li>\u975e\u6807\u51c6\u671f\u6743\uff1a\u7075\u6d3b\u671f\u6743\uff0cETF\u671f\u6743\uff0c\u5355\u5468\u671f\u6743\uff0c\u4e24\u503c\u671f\u6743\uff0c\u4fe1\u7528\u4e8b\u4ef6\u4e24\u503c\u671f\u6743\uff0c\u672b\u65e5\u671f\u6743</li> <li>\u5f53\u516c\u53f8\u53d1\u653e\u73b0\u91d1\u80a1\u606f\u65f6\uff0c\u4ea4\u6613\u6240\u4ea4\u6613\u7684\u671f\u6743\u7684\u6267\u884c\u4ef7\u683c\u4e0d\u4e00\u5b9a\u4f1a\u964d\u4f4e\uff1b\u5f53\u80a1\u7968\u5206\u80a1\u65f6\uff0c\u4ea4\u6613\u6240\u4ea4\u6613\u7684\u671f\u6743\u4f1a\u8fdb\u884c\u8c03\u6574\uff1b\u5f53\u516c\u53f8\u53d1\u653e\u80a1\u7968\u80a1\u606f\uff08\u7c7b\u4f3c\u4e8e\u5206\u80a1\uff0c\u4e5f\u4f1a\u589e\u52a0\u603b\u80a1\u6570\uff09\u65f6\uff0c\u671f\u6743\u4ef7\u683c\u4e5f\u4f1a\u8c03\u6574\u3002</li> <li>\u770b\u6da8\u671f\u6743\u591a\u5934\u4e0e\u770b\u8dcc\u671f\u6743\u7a7a\u5934\u662f\u5e02\u573a\u7684\u540c\u4e00\u65b9\u3002</li>"},{"location":"%E7%AC%94%E8%AE%B0/%E9%87%91%E8%9E%8D/%E6%9C%9F%E6%9D%83/#_7","title":"\u4ea4\u6613","text":"<ul> <li>\u5927\u591a\u6570\u4ea4\u6613\u6240\u91c7\u7528\u505a\u5e02\u5546\u5236\u5ea6\u4fc3\u4f7f\u671f\u6743\u4ea4\u6613\u7684\u8fdb\u884c\u3002\u505a\u5e02\u5546\u62a5\u51fa\u4e70\u5165\u4ef7\u4e0e\u5356\u51fa\u4ef7\uff0c\u5356\u51fa\u4ef7\u4e00\u5b9a\u9ad8\u4e8e\u4e70\u5165\u4ef7\uff0c\u4ea4\u6613\u6240\u8bbe\u5b9a\u4e70\u5356\u4ef7\u5dee\u4e0a\u9650\uff1b</li> <li> <p>\u51b2\u9500\u6307\u4ee4\uff1a\u8d2d\u4e70\u671f\u6743\u7684\u6295\u8d44\u8005\u53ef\u4ee5\u53d1\u51fa\u51fa\u552e\u76f8\u540c\u6570\u91cf\u671f\u6743\u7684\u51b2\u9500\u6307\u4ee4\u6765\u7ed3\u6e05\u5934\u5bf8\u3002\u5f53\u671f\u6743\u4ea4\u6613\u53cc\u65b9\u90fd\u51b2\u9500\u5934\u5bf8\u65f6\uff0c\u6301\u4ed3\u91cf\u624d\u51cf\u4e00\uff0c\u5426\u5219\u4e0d\u53d8\uff1b</p> </li> <li> <p>\u5176\u4ed6\u672f\u8bed</p> </li> <li> <p>\u4f63\u91d1\uff1a\u4e70\u5165\u671f\u6743\u4e0e\u884c\u4f7f\u671f\u6743\u5747\u4f1a\u4ea7\u751f\u4f63\u91d1\uff1b</p> </li> <li> <p>\u4fdd\u8bc1\u91d1\uff1a\u5bf9\u4e8e\u6760\u6746\u8f83\u5c0f\u7684\u671f\u6743\uff0c\u53ef\u4ee5\u7528\u4fdd\u8bc1\u91d1\u7684\u65b9\u5f0f\u8d2d\u4e70\uff1b</p> </li> <li> <p>\u671f\u6743\u7ed3\u7b97\u516c\u53f8\uff1a\u6240\u6709\u671f\u6743\u4ea4\u6613\u901a\u8fc7\u671f\u6743\u7ed3\u7b97\u516c\u53f8\u4f1a\u5458\u7ed3\u6e05\uff1b</p> </li> <li> <p>\u8ba4\u80a1\u6743\u8bc1\uff0c\u96c7\u5458\u80a1\u7968\u671f\u6743\uff0c\u53ef\u8f6c\u6362\u503a\u5238\u90fd\u7c7b\u4f3c\u4e8e\u671f\u6743\uff1b</p> </li> <li> <p>\u573a\u5916\u671f\u6743\u5e02\u573a\u89c4\u6a21\u5df2\u7ecf\u8d85\u8fc7\u4e86\u4ea4\u6613\u6240\u5e02\u573a\uff1b</p> </li> </ul>"},{"location":"%E7%AC%94%E8%AE%B0/%E9%87%91%E8%9E%8D/%E6%9C%9F%E6%9D%83/#_8","title":"\u80a1\u7968\u671f\u6743\u7684\u6027\u8d28","text":""},{"location":"%E7%AC%94%E8%AE%B0/%E9%87%91%E8%9E%8D/%E6%9C%9F%E6%9D%83/#_9","title":"\u5f71\u54cd\u671f\u6743\u4ef7\u683c\u7684\u56e0\u7d20","text":"<ul> <li> <p>\u67096\u79cd\u56e0\u7d20\u4f1a\u5f71\u54cd\u80a1\u7968\u671f\u6743\u7684\u4ef7\u683c\uff1a</p> </li> <li> <p>\u5f53\u524d\u80a1\u7968\u4ef7\u683c\uff1a\u770b\u6da8\u671f\u6743\u4ef7\u683c\u968f\u7740\u80a1\u4ef7\u4e0a\u5347\u800c\u4e0a\u5347\uff0c\u770b\u8dcc\u671f\u6743\u4ef7\u683c\u968f\u7740\u80a1\u4ef7\u4e0a\u5347\u800c\u4e0b\u964d</p> </li> <li>\u6267\u884c\u4ef7\u683c\uff1a\u770b\u6da8\u671f\u6743\u4ef7\u683c\u968f\u7740\u6267\u884c\u4ef7\u683c\u4e0a\u5347\u800c\u4e0b\u964d\uff0c\u770b\u8dcc\u671f\u6743\u4ef7\u683c\u968f\u7740\u6267\u884c\u4ef7\u683c\u4e0a\u5347\u800c\u4e0a\u5347</li> <li>\u671f\u6743\u671f\u9650\uff1a\u5bf9\u4e8e\u7f8e\u5f0f\u671f\u6743\uff0c\u968f\u7740\u671f\u6743\u671f\u9650\u589e\u52a0\uff0c\u7f8e\u5f0f\u770b\u6da8\u4e0e\u770b\u8dcc\u671f\u6743\u4ef7\u683c\u90fd\u4f1a\u4e0a\u5347\uff08\u81f3\u5c11\u4e0d\u4f1a\u51cf\u5c11\uff0c\u56e0\u4e3a\u671f\u9650\u8f83\u77ed\u7684\u671f\u6743\u5728\u884c\u4f7f\u65f6\uff0c\u8f83\u957f\u7684\u671f\u6743\u4e5f\u53ef\u4ee5\u88ab\u884c\u4f7f\uff09\uff0c\u800c\u6b27\u5f0f\u770b\u6da8\u4e0e\u770b\u8dcc\u671f\u6743\u4ef7\u683c\u4e00\u822c\u4f1a\u589e\u52a0\uff08\u4f8b\u5982\u5f53\u957f\u671f\u9650\u5185\u5b58\u5728\u80a1\u7968\u5206\u7ea2\u7b49\u60c5\u51b5\u65f6\uff0c\u957f\u671f\u9650\u671f\u6743\u4ef7\u683c\u53ef\u80fd\u4f4e\u4e8e\u77ed\u671f\u9650\u671f\u6743\uff09\u3002</li> <li>\u80a1\u4ef7\u6ce2\u52a8\u7387\uff1a\u5f53\u6ce2\u52a8\u7387\u589e\u5927\u65f6\uff0c\u80a1\u4ef7\u5927\u5e45\u4e0a\u5347\u6216\u8005\u4e0b\u964d\u7684\u673a\u4f1a\u589e\u5927\uff1b\u770b\u6da8\u671f\u6743\u7684\u62e5\u6709\u8005\u53ef\u4ee5\u4ece\u80a1\u7968\u4e0a\u5347\u4e2d\u83b7\u5229\uff0c\u4f46\u80a1\u4ef7\u4e0b\u8dcc\u5e26\u6765\u7684\u635f\u5931\u6709\u9650\uff1b\u770b\u8dcc\u671f\u6743\u7684\u60c5\u5f62\u7c7b\u4f3c\uff1b\u56e0\u6b64\u6ce2\u52a8\u7387\u589e\u5927\u671f\u6743\u4ef7\u683c\u4e5f\u4f1a\u589e\u52a0\u3002</li> <li>\u65e0\u98ce\u9669\u5229\u7387\uff1a\u5f53\u5176\u4ed6\u5f71\u54cd\u56e0\u7d20\u4e0d\u53d8\u65f6\uff0c\u65e0\u98ce\u9669\u5229\u7387\u589e\u5927\u4f1a\u5f15\u8d77\u770b\u6da8\u671f\u6743\u4ef7\u683c\u589e\u52a0\uff0c\u770b\u8dcc\u671f\u6743\u4ef7\u683c\u4e0b\u964d\uff08\u5f53\u5229\u7387\u589e\u52a0\u65f6\uff0c\u6295\u8d44\u8005\u6240\u8981\u6c42\u7684\u80a1\u7968\u6536\u76ca\u671f\u671b\u589e\u52a0\uff0c\u671f\u6743\u6301\u6709\u4eba\u5c06\u6765\u6240\u6536\u5230\u7684\u73b0\u91d1\u6d41\u7684\u8d34\u73b0\u503c\u4f1a\u4e0b\u964d\uff0c\u7740\u4e24\u79cd\u6548\u5e94\u7684\u7efc\u5408\u6548\u5e94\u4f1a\u5f15\u8d77\u770b\u6da8\u671f\u6743\u4ef7\u683c\u4e0a\u5347\uff0c\u770b\u8dcc\u671f\u6743\u4ef7\u683c\u4e0b\u964d\uff09\u3002==\u6682\u65f6\u4e0d\u7406\u89e3==</li> <li> <p>\u671f\u6743\u671f\u9650\u5185\u9884\u671f\u652f\u4ed8\u7684\u80a1\u606f\uff1a\u80a1\u606f\u5c06\u4f7f\u80a1\u4ef7\u5728\u9664\u606f\u65e5\u4e0b\u964d\uff0c\u56e0\u6b64\u770b\u6da8\u671f\u6743\u4ef7\u683c\u4e0e\u9884\u671f\u80a1\u606f\u53cd\u76f8\u5173\uff0c\u800c\u770b\u8dcc\u671f\u6743\u5219\u4e0e\u9884\u671f\u80a1\u606f\u6b63\u76f8\u5173\u3002</p> </li> <li> <p>\u7b26\u53f7\uff1a</p> </li> <li> <p>\\(S_0\\)\uff1a\u5f53\u524d\u80a1\u4ef7</p> </li> <li>\\(K\\)\uff1a\u671f\u6743\u6267\u884c\u4ef7\u683c</li> <li>\\(T\\)\uff1a\u671f\u6743\u671f\u9650</li> <li>\\(S_T\\)\uff1a\\(T\\)\u65f6\u523b\u80a1\u4ef7</li> <li>\\(r\\)\uff1a\u5728T\u65f6\u523b\u5230\u671f\u7684\u65e0\u98ce\u9669\u6295\u8d44\u5229\u7387</li> <li>\\(C\\)\uff1a\u4e70\u5165\u4e00\u53ea\u7f8e\u5f0f\u770b\u6da8\u671f\u6743\u4ef7\u503c</li> <li>\\(P\\)\uff1a\u5356\u51fa\u4e00\u53ea\u7f8e\u5f0f\u770b\u8dcc\u671f\u6743\u4ef7\u503c</li> <li>\\(c\\)\uff1a\u4e70\u5165\u4e00\u53ea\u6b27\u5f0f\u770b\u6da8\u671f\u6743\u4ef7\u503c</li> <li> <p>\\(p\\)\uff1a\u4e70\u5165\u4e00\u53ea\u6b27\u5f0f\u770b\u8dcc\u671f\u6743\u4ef7\u503c</p> </li> <li> <p>\u671f\u6743\u4ef7\u683c\u7684\u4e0a\u4e0b\u9650</p> </li> <li> <p>\u4e0a\u9650\uff1a\u7f8e\u5f0f\u770b\u6da8\u671f\u6743\u6216\u6b27\u5f0f\u770b\u6da8\u671f\u6743\u7ed9\u5176\u6301\u6709\u8005\u4ee5\u6307\u5b9a\u4ef7\u683c\u4e70\u5165\u80a1\u7968\u7684\u6743\u529b\uff0c\u56e0\u6b64\u4ef7\u683c\u4e0d\u4f1a\u8d85\u8fc7\u80a1\u4ef7\uff0c\\(c \\leq S_0\\)\u6216\\(C \\leq S_0\\)\uff0c\u56e0\u4e3a\u5982\u679c\u671f\u6743\u4ef7\u683c\u5927\u4e8e\u80a1\u4ef7\uff0c\u5957\u5229\u4eba\u53ef\u4ee5\u8d2d\u4e70\u80a1\u7968\u540c\u65f6\u51fa\u552e\u671f\u6743\u6765\u83b7\u53d6\u65e0\u98ce\u9669\u5957\u5229\uff1b\u7f8e\u5f0f\u770b\u8dcc\u671f\u6743\u6301\u6709\u8005\u6709\u6743\u4ee5\u4ef7\u683c\\(K\\)\u5356\u51fa\u80a1\u7968\uff0c\u56e0\u6b64\u4ef7\u683c\u4e0d\u4f1a\u9ad8\u4e8e\u6267\u884c\u4ef7\u683c\uff0c\\(P \\leq K\\)\uff0c\u6b27\u5f0f\u770b\u8dcc\u671f\u6743\u5728T\u65f6\u523b\u4ef7\u683c\u4e0d\u4f1a\u8d85\u8fc7K\uff0c\u56e0\u6b64\u671f\u6743\u4ef7\u683c\u4e0d\u4f1a\u9ad8\u4e8e\\(K\\)\u7684\u8d34\u73b0\u503c\\(p \\leq e^{-rT}K\\)\uff0c\u5982\u679c\u4e0d\u6210\u7acb\uff0c\u5957\u5229\u8005\u53ef\u4ee5\u5356\u51fa\u4e00\u4e2a\u671f\u6743\uff0c\u540c\u65f6\u5c06\u6240\u5f97\u6536\u5165\u8fdb\u884c\u65e0\u98ce\u9669\u5229\u7387\u6295\u8d44\u3002</p> </li> <li> <p>\u65e0\u80a1\u606f\u80a1\u7968\u4e0a\u770b\u6da8\u671f\u6743\u7684\u4e0b\u9650\uff1a</p> <ul> <li>\u65e0\u80a1\u606f\u6b27\u5f0f\u770b\u6da8\u671f\u6743\u4e0b\u9650\uff1a\\(S_0 - Ke^{-rt}\\)\uff0c\u8bc1\u660e\uff1a\u8003\u8651\u4e24\u4e2a\u6295\u8d44\u7ec4\u5408\uff0cA\u4e3a\u4e00\u4e2a\u6b27\u5f0f\u770b\u6da8\u671f\u6743\u52a0\u4e0a\u5728\u65f6\u95f4T\u63d0\u4f9b\u6536\u76caK\u7684\u96f6\u606f\u503a\u5238\uff0cB\u4e3a\u4e00\u53ea\u80a1\u7968\u3002\u5728T\u65f6\u523bA\u7684\u4ef7\u503c\u4e3a\\(max(S_t, K)\\)\uff0c\u800cB\u7684\u4ef7\u503c\u4e3a\\(S_T\\)\uff0c\u5728T\u65f6\u523bA\u7684\u4ef7\u503c\u603b\u4e0d\u4f1a\u4f4e\u4e8eB\u7684\u4ef7\u503c\uff0c\u90a3\u4e48\u5728\u5f53\u524d\u65f6\u523bA\u7684\u4ef7\u503c\u4e5f\u4e0d\u4f1a\u4f4e\u4e8eB\u7684\u4ef7\u503c\uff0c\u6240\u4ee5\u6709\uff1a\\(c+Ke^{-rt} \\geq S_0\\)\uff0c\u5373\\(c \\geq max(S_0 - Ke^{-rt}, 0)\\)</li> </ul> </li> <li> <p>\u65e0\u80a1\u606f\u80a1\u7968\u4e0a\u6b27\u5f0f\u770b\u8dcc\u671f\u6743\u4e0b\u9650\uff1a</p> <ul> <li>\u65e0\u80a1\u606f\u6b27\u5f0f\u770b\u8dcc\u671f\u6743\u4e0b\u9650\uff1a\\(Ke^{-rt} - S_0\\)\uff0c\u8bc1\u660e\uff1a\u8003\u8651\u4e24\u4e2a\u6295\u8d44\u7ec4\u5408\uff0cA\u4e3a\u4e00\u4e2a\u6b27\u5f0f\u770b\u8dcc\u671f\u6743\u52a0\u4e0a\u4e00\u53ea\u80a1\u7968\uff0cB\u4e3a\u5728T\u65f6\u523b\u6536\u76ca\u4e3aK\u7684\u96f6\u606f\u503a\u5238\u3002\u5728T\u65f6\u523bA\u7684\u4ef7\u503c\u4e3a\\(max(S_T, K)\\)\uff0c\u90a3\u4e48\u5728T\u65f6\u523bA\u7684\u4ef7\u503c\u603b\u4e0d\u4f1a\u4f4e\u4e8eB\u7684\u4ef7\u503c\uff0c\u90a3\u4e48\u5728\u5f53\u524d\u65f6\u523bA\u7684\u4ef7\u503c\u4e5f\u4e0d\u4f1a\u4f4e\u4e8eB\u7684\u4ef7\u503c\uff0c\u6240\u4ee5\u6709\uff1a\\(p + S_0 \\geq Ke^{-rt}\\)\uff0c\u5373\\(p \\geq max(Ke^{-rt} - S_0, 0)\\)</li> </ul> </li> <li></li> </ul>"},{"location":"%E8%AE%BA%E6%96%87/","title":"\u8bba\u6587","text":"<p>\u70b9\u51fb\u5de6\u4fa7\u76ee\u5f55\u6253\u5f00\u6587\u7ae0</p>"},{"location":"%E8%AE%BA%E6%96%87/%E6%97%B6%E5%BA%8F%E9%A2%84%E6%B5%8B/AreTransformersEffectiveforTimeSeriesForecasting/","title":"Are Transformers Effective for Time Series Forecasting\uff1f","text":"<ul> <li>Are Transformers Effective for Time Series Forecasting\uff1f<ul> <li>\u8bba\u6587\u4e3b\u8981\u5185\u5bb9</li> <li>\u8bba\u6587\u4eae\u70b9</li> </ul> </li> </ul> \u9605\u8bfb\u65f6\u95f4 2023-10-23"},{"location":"%E8%AE%BA%E6%96%87/%E6%97%B6%E5%BA%8F%E9%A2%84%E6%B5%8B/AreTransformersEffectiveforTimeSeriesForecasting/#_1","title":"\u8bba\u6587\u4e3b\u8981\u5185\u5bb9","text":"<ul> <li>\u901a\u8fc7\u5bf9\u6bd4\u957f\u671f\u65f6\u95f4\u5e8f\u5217\u9884\u6d4b\u4efb\u52a1\u4e2d\u5e38\u7528\u76849\u4e2a\u6570\u636e\u96c6\u5728\u57fa\u4e8eTransformer\u67b6\u6784\u6a21\u578b\u4e0a\u7684\u8868\u73b0\u4ee5\u53ca\u7ebf\u6027\u6a21\u578b\u4e0a\u7684\u8868\u73b0\uff0c\u4f5c\u8005\u53d1\u73b0\u7ebf\u6027\u6a21\u578b\u666e\u904d\u4f18\u4e8eTransformer\u67b6\u6784\u7684\u6a21\u578b\u3002</li> <li>\u6b64\u5916\uff0c\u4f5c\u8005\u8fd8\u91c7\u7528\u5bf9\u6bd4\u548c\u6d88\u878d\u5b9e\u9a8c\u7684\u65b9\u5f0f\uff0c\u5206\u6790\u4e86Transformer\u67b6\u6784\u6a21\u578b\u662f\u5426\u53ef\u4ee5\u5b66\u5230\u65f6\u95f4\u5173\u8054\u6027\u4ee5\u53ca\u4e0d\u540cTransformer\u7ec4\u4ef6\u7684\u5f71\u54cd\u3002</li> </ul>"},{"location":"%E8%AE%BA%E6%96%87/%E6%97%B6%E5%BA%8F%E9%A2%84%E6%B5%8B/AreTransformersEffectiveforTimeSeriesForecasting/#_2","title":"\u8bba\u6587\u4eae\u70b9","text":"<ul> <li>\u8be6\u7ec6\u603b\u7ed3\u4e86Transformer\u67b6\u6784\u7528\u4e8e\u65f6\u95f4\u5e8f\u5217\u9884\u6d4b\u7684\u51e0\u4e2a\u6a21\u578b\u7684\u4e0d\u540c\u4e4b\u5904\u3002</li> <li>\u63d0\u4f9b\u4e86\u6bd4\u8f83\u5b8c\u6574\u7684\u4ee3\u7801\u7528\u4e8e\u590d\u73b0\u3002</li> </ul>"},{"location":"%E8%AE%BA%E6%96%87/%E6%97%B6%E5%BA%8F%E9%A2%84%E6%B5%8B/DeepTransformerModelsforTimeSeriesForecastingTheInfluenzaPrevalenceCase/","title":"Deep Transformer Models for Time Series Forecasting: The Influenza Prevalence Case","text":"<ul> <li>Deep Transformer Models for Time Series Forecasting: The Influenza Prevalence Case<ul> <li>\u8bba\u6587\u4e3b\u8981\u5185\u5bb9</li> <li>\u6536\u83b7</li> </ul> </li> </ul> <ul> <li>Deep Transformer Models for Time Series Forecasting: The Influenza Prevalence Case<ul> <li>\u8bba\u6587\u4e3b\u8981\u5185\u5bb9</li> <li>\u6536\u83b7</li> </ul> </li> </ul> \u9605\u8bfb\u65f6\u95f4 2023-11-25"},{"location":"%E8%AE%BA%E6%96%87/%E6%97%B6%E5%BA%8F%E9%A2%84%E6%B5%8B/DeepTransformerModelsforTimeSeriesForecastingTheInfluenzaPrevalenceCase/#_1","title":"\u8bba\u6587\u4e3b\u8981\u5185\u5bb9","text":"<ul> <li>\u6bd4\u8f83\u4e86\u57fa\u4e8e\u4f20\u7edf\u65b9\u6cd5\u3001\u5faa\u73af\u795e\u7ecf\u7f51\u7edc\u3001<code>seq2seq</code>\u4ee5\u53catransformer\u6a21\u578b\u5728\u7f8e\u56fd\u6d41\u611f\u5468\u5ea6\u53d1\u75c5\u7387\u7684\u5355\u6b65\u65f6\u95f4\u9884\u6d4b\u4e0a\u7684\u8868\u73b0\u3002</li> </ul>"},{"location":"%E8%AE%BA%E6%96%87/%E6%97%B6%E5%BA%8F%E9%A2%84%E6%B5%8B/DeepTransformerModelsforTimeSeriesForecastingTheInfluenzaPrevalenceCase/#_2","title":"\u6536\u83b7","text":"<ul> <li>\u4e86\u89e3\u5230\u4e86<code>ARIMA</code>\u7c7b\u7684\u6a21\u578b\u5c5e\u4e8e\u72b6\u6001\u7a7a\u95f4\uff08<code>SSM</code>\uff09\u6a21\u578b\uff1b</li> <li>\u8fd9\u91cctransformer\u505a\u65f6\u5e8f\u9884\u6d4b\u65f6decoder\u7684\u8f93\u5165\\(\\rightarrow\\)==decoder\u7b2c\u4e00\u4e2a\u8f93\u5165\u662fencoder\u6700\u540e\u4e00\u4e2a\u8f93\u5165==</li> </ul>"},{"location":"%E8%AE%BA%E6%96%87/%E6%97%B6%E5%BA%8F%E9%A2%84%E6%B5%8B/FinancialTimeSeriesForecastingWithDeepLearningASystematicLiteratureReview2005%E2%80%932019/","title":"Financial time series forecasting with deep learning : A systematic literature review 2005\u20132019","text":"<ul> <li>Financial time series forecasting with deep learning : A systematic literature review 2005\u20132019<ul> <li>\u8bba\u6587\u4e3b\u8981\u5185\u5bb9</li> <li>\u8bba\u6587\u4eae\u70b9</li> </ul> </li> </ul> \u9605\u8bfb\u65f6\u95f4 2023-11-01"},{"location":"%E8%AE%BA%E6%96%87/%E6%97%B6%E5%BA%8F%E9%A2%84%E6%B5%8B/FinancialTimeSeriesForecastingWithDeepLearningASystematicLiteratureReview2005%E2%80%932019/#_1","title":"\u8bba\u6587\u4e3b\u8981\u5185\u5bb9","text":"<ul> <li>\u8bba\u6587\u9996\u5148\u7b80\u8981\u4ecb\u7ecd\u4e86\u51e0\u7c7b\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\uff1a\u5305\u62ecMLP\uff0cRNN\uff0cLSTM\uff0cCNN\uff0cRBM\uff08Restricted Boltzmann Machines\uff09\uff0cDBN\uff08Deep Belief Networks\uff09\uff0cRL\uff1b</li> <li>\u9610\u660e\u4e86==\u5927\u90e8\u5206\u91d1\u878d\u65f6\u5e8f\u9884\u6d4b\u4efb\u52a1\u662f\u8d8b\u52bf\u9884\u6d4b\u95ee\u9898==\uff1b</li> <li></li> </ul>"},{"location":"%E8%AE%BA%E6%96%87/%E6%97%B6%E5%BA%8F%E9%A2%84%E6%B5%8B/FinancialTimeSeriesForecastingWithDeepLearningASystematicLiteratureReview2005%E2%80%932019/#_2","title":"\u8bba\u6587\u4eae\u70b9","text":""},{"location":"%E8%AE%BA%E6%96%87/%E6%97%B6%E5%BA%8F%E9%A2%84%E6%B5%8B/TransformersInTimeSeriesASurvey/","title":"Transformers in Time Series: A Survey","text":"<ul> <li>Transformers in Time Series: A Survey<ul> <li>\u8bba\u6587\u4e3b\u8981\u5185\u5bb9</li> <li>\u8bba\u6587\u4eae\u70b9</li> </ul> </li> </ul> \u9605\u8bfb\u65f6\u95f4 2023-11-06"},{"location":"%E8%AE%BA%E6%96%87/%E6%97%B6%E5%BA%8F%E9%A2%84%E6%B5%8B/TransformersInTimeSeriesASurvey/#_1","title":"\u8bba\u6587\u4e3b\u8981\u5185\u5bb9","text":"<ul> <li> <p>\u672c\u6587\u603b\u7ed3\u4e86Transformer\u67b6\u6784\u5728\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u96c6\u4e0a\u7684\u4e09\u4e2a\u4e3b\u8981\u5e94\u7528\uff1a\u9884\u6d4b\u3001\u5f02\u5e38\u68c0\u6d4b\u3001\u5206\u7c7b\u4e0a\u7684\u8fdb\u5c55\u3002</p> </li> <li> <p>\u6587\u7ae0\u5f00\u5934\u4f5c\u8005\u4ecb\u7ecd\u4e86\u6df1\u5ea6\u5b66\u4e60\u65b9\u6cd5\u5728\u8fd9\u4e09\u4e2a\u4efb\u52a1\u4e0a\u7684\u51e0\u4e2a\u7efc\u8ff0\uff0c\u5f3a\u8c03\u672c\u6587\u4fa7\u91cd\u70b9\u5728\u4e8e\u4ecb\u7ecdTransformer\u7684\u5e94\u7528\u3002</p> </li> <li> <p>\u6587\u7ae0\u4ece\u4e24\u4e2a\u65b9\u9762\u603b\u7ed3Transformer\u67b6\u6784\u5728\u65f6\u5e8f\u6570\u636e\u4e0a\u7684\u5e94\u7528\uff1a</p> </li> <li> <p>\u4ece\u6a21\u578b\u5c42\u9762\uff1a\u5728\u6a21\u578b\u5c42\u9762\u4e0a\uff0c\u4f5c\u8005\u56de\u987e\u4e86\u57fa\u4e8eTransformer\u67b6\u6784\u5728\u65f6\u5e8f\u6570\u636e\u4e0a\u7684\u5e94\u7528\uff0c\u76ee\u524d\u5b66\u754c\u6240\u4f5c\u7684\u66f4\u6539\u53ca\u5176\u6548\u679c\u3002\u5176\u4e2d\u6a21\u578b\u66f4\u6539\u53ef\u4ee5\u5206\u4e3a\u4ece\u6a21\u5757\u5c42\u9762\u548c\u4ece\u67b6\u6784\u5c42\u9762\uff0c\u7edd\u5927\u90e8\u5206\u5de5\u4f5c\u90fd\u662f\u4ece\u6a21\u5757\u5c42\u9762\u5bf9\u539f\u59cbTransformer\u67b6\u6784\u8fdb\u884c\u6539\u8fdb\u3002\u6a21\u5757\u5c42\u9762\u7684\u6539\u8fdb\u53c8\u5305\u62ec\u51e0\u4e2a\u65b9\u9762\uff0c\u5177\u4f53\u5305\u62ec\uff1a</p> <ul> <li>\uff081\uff09\u4f4d\u7f6e\u7f16\u7801\u7684\u6539\u8fdb\uff0c\u539f\u59cbTransformer\u67b6\u6784\u7684\u4f4d\u7f6e\u7f16\u7801\u662f\u57fa\u4e8e\u7edd\u5bf9\u4f4d\u7f6e\u7684\u7f16\u7801\uff0c\u6539\u8fdb\u5305\u62ec\u57fa\u4e8e\u76f8\u5bf9\u4f4d\u7f6e\u7684\u7f16\u7801\uff0c\u53ef\u5b66\u4e60\u7f16\u7801\u4ee5\u53ca\u65f6\u95f4\u6233\u7f16\u7801\uff1b</li> <li>\uff082\uff09\u81ea\u6ce8\u610f\u529b\u6a21\u5757\u7684\u6539\u8fdb\uff1a\u5bf9\u81ea\u6ce8\u610f\u529b\u6a21\u5757\u7684\u6539\u8fdb\u4e3b\u8981\u662f\u4e3a\u4e86\u964d\u4f4e\u5176\u65f6\u95f4\u548c\u7a7a\u95f4\u8ba1\u7b97\u590d\u6742\u5ea6\u3002</li> </ul> <p>\u4ece\u67b6\u6784\u5c42\u9762\u7684\u6539\u8fdb\u4e3b\u8981\u5f15\u5165\u53ef\u4ee5\u8868\u5f81\u4e0d\u540c\u65f6\u95f4\u5c3a\u5ea6\u7684\u4fe1\u606f\u7684\u80fd\u529b\u3002</p> </li> <li> <p>\u4ece\u5e94\u7528\u5c42\u9762\uff1a\u5728\u5e94\u7528\u5c42\u9762\u4e0a\uff0c\u4f5c\u8005\u56de\u987e\u4e86Transformer\u5728\u65f6\u5e8f\u9884\u6d4b\uff08\u5305\u62ec\u65f6\u95f4\u5e8f\u5217\u9884\u6d4b\u3001\u65f6\u7a7a\u9884\u6d4b\u3001\u4e8b\u4ef6\u9884\u6d4b\uff09\u3001\u5f02\u5e38\u68c0\u6d4b\u548c\u5206\u7c7b\u4e0a\u7684\u6539\u8fdb\uff0c\u5177\u4f53\u5305\u62ec\uff1a</p> <ul> <li>\u5728\u9884\u6d4b\u4efb\u52a1\u4e0a\uff1a</li> <li>\u65f6\u95f4\u5e8f\u5217\u9884\u6d4b\uff1a\u8bba\u8ff0\u4e86\u5305\u62ec\u6a21\u5757\u5c42\u9762\u548c\u67b6\u6784\u5c42\u9762\u7684\u6539\u8fdb\uff1b</li> <li>\u65f6\u7a7a\u9884\u6d4b\uff1a\u4e3b\u8981\u4ecb\u7ecd\u4e86Transformer\u548cGNN\u7ed3\u5408\u7684\u76f8\u5173\u5de5\u4f5c\uff1b</li> <li>\u4e8b\u4ef6\u9884\u6d4b\uff1a\u4e3b\u8981\u4ecb\u7ecd\u4e86Transformer\u548c\u65f6\u95f4\u70b9\u8fc7\u7a0b\u6a21\u578b\u7ed3\u5408\u7684\u76f8\u5173\u5de5\u4f5c\uff1b</li> <li>\u5728\u5f02\u5e38\u68c0\u6d4b\u4efb\u52a1\u4e0a\uff1a\u4e3b\u8981\u4ecb\u7ecd\u4e86\u5c06Transformer\u67b6\u6784\u548c\u5bf9\u6297\u6a21\u578b\uff08VAE\u548cGAN\uff09\u7ed3\u5408\u7684\u76f8\u5173\u5de5\u4f5c\uff1b</li> <li>\u5728\u5206\u7c7b\u4efb\u52a1\u4e0a\uff1a\u4e3b\u8981\u4ecb\u7ecd\u4e86\u5229\u7528Transformer\u67b6\u6784\u4ee5\u53caTransformer\u9884\u8bad\u7ec3\u8fdb\u884c\u5206\u7c7b\u7684\u76f8\u5173\u5de5\u4f5c\uff1b</li> </ul> </li> <li> <p>\u540c\u65f6\uff0c\u4f5c\u8005\u5229\u7528ETTm2\u6570\u636e\u96c6\u5206\u6790\u4e86\u4e0d\u540cTransformer\u67b6\u6784\u5728\u9884\u6d4b\u4efb\u52a1\u4e0a\u7684\u51e0\u4e2a\u5f71\u54cd\u56e0\u7d20\uff1a</p> <ul> <li>\u5e8f\u5217\u957f\u5ea6\u7684\u5f71\u54cd\uff1a\u5728\u9884\u6d4b\u957f\u5ea6\u4e0d\u53d8\u7684\u60c5\u51b5\u4e0b\uff0c\u5f53\u589e\u5927\u5e8f\u5217\u957f\u5ea6\u65f6\uff0c\u51e0\u4e2aTransformer\u67b6\u6784\u7684\u8868\u73b0\u53cd\u800c\u66f4\u5dee\u4e86\uff1b</li> <li>Transformer\u5757\u5c42\u6570\u7684\u5f71\u54cd\uff1a\u5728\u6b64\u6570\u636e\u96c6\u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u4f73\u7684\u5c42\u6570\u662f\u6bd4\u8f83\u5c0f\u7684\u5c42\u6570\uff083-6\uff09\uff0c\u66f4\u5927\u7684\u5c42\u6570\u4f1a\u5f15\u8d77\u7ed3\u679c\u53d8\u5dee\uff1b</li> <li>\u5f15\u5165\u5b63\u8282-\u8d8b\u52bf\u5206\u89e3\u7684\u5f71\u54cd\uff1a\u5373\u4f7f\u53ea\u5f15\u5165\u7b80\u5355\u7684\u79fb\u52a8\u5e73\u5747\u5b63\u8282-\u8d8b\u52bf\u5206\u89e3\uff0c\u9884\u6d4b\u8868\u73b0\u4e5f\u663e\u8457\u589e\u5f3a\u3002</li> </ul> </li> <li> <p>\u6700\u540e\uff0c\u4f5c\u8005\u603b\u7ed3\u4e86\u51e0\u4e2aTransformer\u67b6\u6784\u5728\u65f6\u5e8f\u6570\u636e\u96c6\u4e0a\u7684\u672a\u6765\u7814\u7a76\u65b9\u5411\uff1a</p> <ul> <li>\u63a8\u5bfc\u504f\u5dee\uff08inductive biases\uff09\u7684\u95ee\u9898\uff1b</li> <li>\u7ed3\u5408GNN\u7684Transformer\uff1b</li> <li>\u9884\u8bad\u7ec3\u7684Transformer\uff1b</li> <li>\u67b6\u6784\u5c42\u9762\u6539\u8fdb\u7684Transformer\uff1b</li> <li>Transformer\u7684Neural architecture search\uff08NAS\uff09\u95ee\u9898\u3002</li> </ul> </li> </ul>"},{"location":"%E8%AE%BA%E6%96%87/%E6%97%B6%E5%BA%8F%E9%A2%84%E6%B5%8B/TransformersInTimeSeriesASurvey/#_2","title":"\u8bba\u6587\u4eae\u70b9","text":"<ul> <li>\u7cfb\u7edf\u6bd4\u8f83\u4e86\u4e0d\u540cTransformer\u6539\u8fdb\u6a21\u578b\u5728\u4e09\u7c7b\u65f6\u5e8f\u4efb\u52a1\u4e0a\u7684\u5f02\u540c\u3002</li> </ul>"}]}